Raven version 0.1
[Info] Processing file lib/library/resource_algebra.rav.
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library
[Debug] Processing module Library
[Debug] Processing module Library: scope_children: 
[Debug] Typing.process_module: computing mod_qual_ident: Library
[Debug] SymbolTbl.resolve_and_find: Library
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = Library; qual_ident = Library
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Type
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA
[Debug] Library
[Debug] SymbolTbl.resolve_and_find: Library
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Processing module Type
[Debug] Processing module Type: scope_children: 
[Debug] Typing.process_module: computing mod_qual_ident: Type
[Debug] SymbolTbl.resolve_and_find: Type
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Type
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Type
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Type
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = Type; qual_ident = Library.Type
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Type.T
[Debug] Library.Type
[Debug] SymbolTbl.resolve_and_find: Library.Type
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Type
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Type
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Type
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Type
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Type
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Type.T
[Debug] Done with processing module Type
[Debug] Rewriter.set_symbol: symbol = Type
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Type
[Debug] Processing module ResourceAlgebra
[Debug] Processing module ResourceAlgebra: scope_children: 
[Debug] Typing.process_module: computing mod_qual_ident: ResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ResourceAlgebra; qual_ident = Library.ResourceAlgebra
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.id
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.frame
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.idValid
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.compAssoc
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.compCommute
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.compId
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.compValid
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.frameId
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.compFrameInv
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuValid
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuReflexive
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.frameValid
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.weak_frameCompInv
[Debug] Library.ResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 0
[Debug] old id a -> -1
[Debug] fresh id a -> 0
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 1
[Debug] old id b -> -1
[Debug] fresh id b -> 0
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 2
[Debug] old id ret -> -1
[Debug] fresh id ret -> 0
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.comp.a
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.comp.b
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.comp.ret
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 3
[Debug] old id a -> 0
[Debug] fresh id a -> 1
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 3
[Debug] old id b -> 0
[Debug] fresh id b -> 1
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 3
[Debug] old id ret -> 0
[Debug] fresh id ret -> 1
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.frame.a^1
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.frame.b^1
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.frame.ret^1
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 3
[Debug] old id a -> 1
[Debug] fresh id a -> 2
[Debug] Keyset: 3
[Debug] old id ret -> 1
[Debug] fresh id ret -> 2
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.valid.a^2
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.valid.ret^2
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 3
[Debug] old id a -> 2
[Debug] fresh id a -> 3
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 3
[Debug] old id b -> 1
[Debug] fresh id b -> 2
[Debug] Keyset: 3
[Debug] old id ret -> 2
[Debug] fresh id ret -> 3
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuAllowed.a^3
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuAllowed.b^2
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuAllowed.ret^3
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = id; qual_ident = Library.ResourceAlgebra.id
[Debug] Rewriter.is_local: qual_ident = Library.ResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.ResourceAlgebra.valid
[Debug] Rewriter.is_local: qual_ident = Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2: Library.ResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.id
[Debug] Rewriter.Symbol.reify val id : Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.idValid
[Debug] Keyset: 3
[Debug] old id a -> 3
[Debug] fresh id a -> 4
[Debug] Keyset: 3
[Debug] old id b -> 2
[Debug] fresh id b -> 3
[Debug] Keyset: 3
[Debug] old id c -> -1
[Debug] fresh id c -> 0
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.ResourceAlgebra.comp
[Debug] Rewriter.is_local: qual_ident = Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.ResourceAlgebra.comp
[Debug] Rewriter.is_local: qual_ident = Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.ResourceAlgebra.comp
[Debug] Rewriter.is_local: qual_ident = Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.ResourceAlgebra.comp
[Debug] Rewriter.is_local: qual_ident = Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.compAssoc.a^4
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.compAssoc.b^3
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.compAssoc.c
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a: Library.ResourceAlgebra.T, b:
                                        Library.ResourceAlgebra.T)
                                returns (ret: Library.ResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a: Library.ResourceAlgebra.T, b:
                                        Library.ResourceAlgebra.T)
                                returns (ret: Library.ResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^4
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra.compAssoc
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^4
[Debug] SymbolTbl.resolve.go_forward: scope_entries: c, b^3, a^4
[Debug] SymbolTbl.resolve.go_forward: ids2: a^4
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^4
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.compAssoc.a^4
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^4
[Debug] Rewriter.Symbol.reify var a^4 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^3
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra.compAssoc
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^3
[Debug] SymbolTbl.resolve.go_forward: scope_entries: c, b^3, a^4
[Debug] SymbolTbl.resolve.go_forward: ids2: b^3
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^3
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.compAssoc.b^3
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^3
[Debug] Rewriter.Symbol.reify var b^3 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra.compAssoc
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: c
[Debug] SymbolTbl.resolve.go_forward: scope_entries: c, b^3, a^4
[Debug] SymbolTbl.resolve.go_forward: ids2: c
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.compAssoc.c
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c
[Debug] Rewriter.Symbol.reify var c : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a: Library.ResourceAlgebra.T, b:
                                        Library.ResourceAlgebra.T)
                                returns (ret: Library.ResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^4
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^4
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.compAssoc.a^4
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^4
[Debug] Rewriter.Symbol.reify var a^4 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a: Library.ResourceAlgebra.T, b:
                                        Library.ResourceAlgebra.T)
                                returns (ret: Library.ResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: b^3
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^3
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.compAssoc.b^3
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^3
[Debug] Rewriter.Symbol.reify var b^3 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.compAssoc.c
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c
[Debug] Rewriter.Symbol.reify var c : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compAssoc
[Debug] Keyset: 4
[Debug] old id a -> 4
[Debug] fresh id a -> 5
[Debug] Keyset: 4
[Debug] old id b -> 3
[Debug] fresh id b -> 4
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.ResourceAlgebra.comp
[Debug] Rewriter.is_local: qual_ident = Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.ResourceAlgebra.comp
[Debug] Rewriter.is_local: qual_ident = Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.compCommute.a^5
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.compCommute.b^4
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a: Library.ResourceAlgebra.T, b:
                                        Library.ResourceAlgebra.T)
                                returns (ret: Library.ResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^5
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra.compCommute
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^5
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^4, a^5
[Debug] SymbolTbl.resolve.go_forward: ids2: a^5
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^5
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.compCommute.a^5
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^5
[Debug] Rewriter.Symbol.reify var a^5 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^4
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra.compCommute
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^4
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^4, a^5
[Debug] SymbolTbl.resolve.go_forward: ids2: b^4
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^4
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.compCommute.b^4
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^4
[Debug] Rewriter.Symbol.reify var b^4 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a: Library.ResourceAlgebra.T, b:
                                        Library.ResourceAlgebra.T)
                                returns (ret: Library.ResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: b^4
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^4
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.compCommute.b^4
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^4
[Debug] Rewriter.Symbol.reify var b^4 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^5
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^5
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.compCommute.a^5
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^5
[Debug] Rewriter.Symbol.reify var a^5 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compCommute
[Debug] Keyset: 4
[Debug] old id a -> 5
[Debug] fresh id a -> 6
[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = id; qual_ident = Library.ResourceAlgebra.id
[Debug] Rewriter.is_local: qual_ident = Library.ResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.ResourceAlgebra.comp
[Debug] Rewriter.is_local: qual_ident = Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.compId.a^6
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a: Library.ResourceAlgebra.T, b:
                                        Library.ResourceAlgebra.T)
                                returns (ret: Library.ResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^6
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra.compId
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^6
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^6
[Debug] SymbolTbl.resolve.go_forward: ids2: a^6
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^6
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.compId.a^6
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^6
[Debug] Rewriter.Symbol.reify var a^6 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.id
[Debug] Rewriter.Symbol.reify val id : Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^6
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^6
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.compId.a^6
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^6
[Debug] Rewriter.Symbol.reify var a^6 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compId
[Debug] Keyset: 4
[Debug] old id a -> 6
[Debug] fresh id a -> 7
[Debug] Keyset: 4
[Debug] old id b -> 4
[Debug] fresh id b -> 5
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.ResourceAlgebra.comp
[Debug] Rewriter.is_local: qual_ident = Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.ResourceAlgebra.valid
[Debug] Rewriter.is_local: qual_ident = Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.ResourceAlgebra.valid
[Debug] Rewriter.is_local: qual_ident = Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.ResourceAlgebra.valid
[Debug] Rewriter.is_local: qual_ident = Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.compValid.a^7
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.compValid.b^5
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2: Library.ResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a: Library.ResourceAlgebra.T, b:
                                        Library.ResourceAlgebra.T)
                                returns (ret: Library.ResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^7
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra.compValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^7
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^5, a^7
[Debug] SymbolTbl.resolve.go_forward: ids2: a^7
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^7
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.compValid.a^7
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^7
[Debug] Rewriter.Symbol.reify var a^7 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^5
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra.compValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^5
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^5, a^7
[Debug] SymbolTbl.resolve.go_forward: ids2: b^5
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^5
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.compValid.b^5
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^5
[Debug] Rewriter.Symbol.reify var b^5 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2: Library.ResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^7
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^7
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.compValid.a^7
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^7
[Debug] Rewriter.Symbol.reify var a^7 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2: Library.ResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: b^5
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^5
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.compValid.b^5
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^5
[Debug] Rewriter.Symbol.reify var b^5 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2: Library.ResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^7
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^7
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.compValid.a^7
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^7
[Debug] Rewriter.Symbol.reify var a^7 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2: Library.ResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a: Library.ResourceAlgebra.T, b:
                                        Library.ResourceAlgebra.T)
                                returns (ret: Library.ResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^7
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^7
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.compValid.a^7
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^7
[Debug] Rewriter.Symbol.reify var a^7 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^5
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^5
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.compValid.b^5
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^5
[Debug] Rewriter.Symbol.reify var b^5 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compValid
[Debug] Keyset: 4
[Debug] old id a -> 7
[Debug] fresh id a -> 8
[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = id; qual_ident = Library.ResourceAlgebra.id
[Debug] Rewriter.is_local: qual_ident = Library.ResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.ResourceAlgebra.frame
[Debug] Rewriter.is_local: qual_ident = Library.ResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.frameId.a^8
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.frame
[Debug] Rewriter.Symbol.reify func frame(a^1: Library.ResourceAlgebra.T, b^1:
                                         Library.ResourceAlgebra.T)
                                returns (ret^1: Library.ResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^8
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra.frameId
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^8
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^8
[Debug] SymbolTbl.resolve.go_forward: ids2: a^8
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^8
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.frameId.a^8
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^8
[Debug] Rewriter.Symbol.reify var a^8 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.id
[Debug] Rewriter.Symbol.reify val id : Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^8
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^8
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.frameId.a^8
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^8
[Debug] Rewriter.Symbol.reify var a^8 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frameId
[Debug] Keyset: 4
[Debug] old id a -> 8
[Debug] fresh id a -> 9
[Debug] Keyset: 4
[Debug] old id b -> 5
[Debug] fresh id b -> 6
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.ResourceAlgebra.frame
[Debug] Rewriter.is_local: qual_ident = Library.ResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.ResourceAlgebra.valid
[Debug] Rewriter.is_local: qual_ident = Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.ResourceAlgebra.frame
[Debug] Rewriter.is_local: qual_ident = Library.ResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.ResourceAlgebra.comp
[Debug] Rewriter.is_local: qual_ident = Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.compFrameInv.a^9
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.compFrameInv.b^6
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2: Library.ResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.frame
[Debug] Rewriter.Symbol.reify func frame(a^1: Library.ResourceAlgebra.T, b^1:
                                         Library.ResourceAlgebra.T)
                                returns (ret^1: Library.ResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^9
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra.compFrameInv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^9
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^6, a^9
[Debug] SymbolTbl.resolve.go_forward: ids2: a^9
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^9
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.compFrameInv.a^9
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^9
[Debug] Rewriter.Symbol.reify var a^9 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^6
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra.compFrameInv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^6
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^6, a^9
[Debug] SymbolTbl.resolve.go_forward: ids2: b^6
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^6
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.compFrameInv.b^6
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^6
[Debug] Rewriter.Symbol.reify var b^6 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a: Library.ResourceAlgebra.T, b:
                                        Library.ResourceAlgebra.T)
                                returns (ret: Library.ResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.frame
[Debug] Rewriter.Symbol.reify func frame(a^1: Library.ResourceAlgebra.T, b^1:
                                         Library.ResourceAlgebra.T)
                                returns (ret^1: Library.ResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^9
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^9
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.compFrameInv.a^9
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^9
[Debug] Rewriter.Symbol.reify var a^9 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^6
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^6
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.compFrameInv.b^6
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^6
[Debug] Rewriter.Symbol.reify var b^6 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^6
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^6
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.compFrameInv.b^6
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^6
[Debug] Rewriter.Symbol.reify var b^6 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^9
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^9
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.compFrameInv.a^9
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^9
[Debug] Rewriter.Symbol.reify var a^9 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2: Library.ResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.frame
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.frame
[Debug] Rewriter.Symbol.reify func frame(a^1: Library.ResourceAlgebra.T, b^1:
                                         Library.ResourceAlgebra.T)
                                returns (ret^1: Library.ResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^9
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^9
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.compFrameInv.a^9
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^9
[Debug] Rewriter.Symbol.reify var a^9 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^6
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^6
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.compFrameInv.b^6
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^6
[Debug] Rewriter.Symbol.reify var b^6 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compFrameInv
[Debug] Keyset: 4
[Debug] old id a -> 9
[Debug] fresh id a -> 10
[Debug] Keyset: 4
[Debug] old id b -> 6
[Debug] fresh id b -> 7
[Debug] Keyset: 4
[Debug] old id c -> 0
[Debug] fresh id c -> 1
[Debug] SymbolTbl.resolve_and_find: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = fpuAllowed; qual_ident = Library.ResourceAlgebra.fpuAllowed
[Debug] Rewriter.is_local: qual_ident = Library.ResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.ResourceAlgebra.valid
[Debug] Rewriter.is_local: qual_ident = Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.ResourceAlgebra.comp
[Debug] Rewriter.is_local: qual_ident = Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.ResourceAlgebra.valid
[Debug] Rewriter.is_local: qual_ident = Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.ResourceAlgebra.comp
[Debug] Rewriter.is_local: qual_ident = Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.ResourceAlgebra.valid
[Debug] Rewriter.is_local: qual_ident = Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuValid.a^10
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuValid.b^7
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuValid.c^1
[Debug] SymbolTbl.resolve_and_find: fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^3: Library.ResourceAlgebra.T,
                                              b^2: Library.ResourceAlgebra.T)
                                returns (ret^3: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^10
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra.fpuValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^10
[Debug] SymbolTbl.resolve.go_forward: scope_entries: c^1, b^7, a^10
[Debug] SymbolTbl.resolve.go_forward: ids2: a^10
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^10
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuValid.a^10
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^10
[Debug] Rewriter.Symbol.reify var a^10 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^7
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra.fpuValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^7
[Debug] SymbolTbl.resolve.go_forward: scope_entries: c^1, b^7, a^10
[Debug] SymbolTbl.resolve.go_forward: ids2: b^7
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^7
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuValid.b^7
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^7
[Debug] Rewriter.Symbol.reify var b^7 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2: Library.ResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^10
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^10
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuValid.a^10
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^10
[Debug] Rewriter.Symbol.reify var a^10 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra,
        fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra,
        fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra, fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra, fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^3: Library.ResourceAlgebra.T,
                                              b^2: Library.ResourceAlgebra.T)
                                returns (ret^3: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^10
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^10
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuValid.a^10
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^10
[Debug] Rewriter.Symbol.reify var a^10 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^7
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^7
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuValid.b^7
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^7
[Debug] Rewriter.Symbol.reify var b^7 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2: Library.ResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a: Library.ResourceAlgebra.T, b:
                                        Library.ResourceAlgebra.T)
                                returns (ret: Library.ResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^10
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^10
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuValid.a^10
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^10
[Debug] Rewriter.Symbol.reify var a^10 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^1
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra.fpuValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: c^1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: c^1, b^7, a^10
[Debug] SymbolTbl.resolve.go_forward: ids2: c^1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuValid.c^1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^1
[Debug] Rewriter.Symbol.reify var c^1 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^3: Library.ResourceAlgebra.T,
                                              b^2: Library.ResourceAlgebra.T)
                                returns (ret^3: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^10
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^10
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuValid.a^10
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^10
[Debug] Rewriter.Symbol.reify var a^10 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^7
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^7
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuValid.b^7
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^7
[Debug] Rewriter.Symbol.reify var b^7 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2: Library.ResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^10
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^10
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuValid.a^10
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^10
[Debug] Rewriter.Symbol.reify var a^10 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^3: Library.ResourceAlgebra.T,
                                              b^2: Library.ResourceAlgebra.T)
                                returns (ret^3: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^10
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^10
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuValid.a^10
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^10
[Debug] Rewriter.Symbol.reify var a^10 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^7
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^7
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuValid.b^7
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^7
[Debug] Rewriter.Symbol.reify var b^7 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2: Library.ResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a: Library.ResourceAlgebra.T, b:
                                        Library.ResourceAlgebra.T)
                                returns (ret: Library.ResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: b^7
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^7
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuValid.b^7
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^7
[Debug] Rewriter.Symbol.reify var b^7 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuValid.c^1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^1
[Debug] Rewriter.Symbol.reify var c^1 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^3: Library.ResourceAlgebra.T,
                                              b^2: Library.ResourceAlgebra.T)
                                returns (ret^3: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^10
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^10
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuValid.a^10
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^10
[Debug] Rewriter.Symbol.reify var a^10 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^7
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^7
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuValid.b^7
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^7
[Debug] Rewriter.Symbol.reify var b^7 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2: Library.ResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^10
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^10
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuValid.a^10
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^10
[Debug] Rewriter.Symbol.reify var a^10 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^3: Library.ResourceAlgebra.T,
                                              b^2: Library.ResourceAlgebra.T)
                                returns (ret^3: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^10
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^10
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuValid.a^10
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^10
[Debug] Rewriter.Symbol.reify var a^10 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^7
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^7
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuValid.b^7
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^7
[Debug] Rewriter.Symbol.reify var b^7 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2: Library.ResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a: Library.ResourceAlgebra.T, b:
                                        Library.ResourceAlgebra.T)
                                returns (ret: Library.ResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^10
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^10
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuValid.a^10
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^10
[Debug] Rewriter.Symbol.reify var a^10 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuValid.c^1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^1
[Debug] Rewriter.Symbol.reify var c^1 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^3: Library.ResourceAlgebra.T,
                                              b^2: Library.ResourceAlgebra.T)
                                returns (ret^3: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^10
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^10
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuValid.a^10
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^10
[Debug] Rewriter.Symbol.reify var a^10 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^7
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^7
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuValid.b^7
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^7
[Debug] Rewriter.Symbol.reify var b^7 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2: Library.ResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^10
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^10
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuValid.a^10
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^10
[Debug] Rewriter.Symbol.reify var a^10 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^3: Library.ResourceAlgebra.T,
                                              b^2: Library.ResourceAlgebra.T)
                                returns (ret^3: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^10
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^10
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuValid.a^10
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^10
[Debug] Rewriter.Symbol.reify var a^10 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^7
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^7
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuValid.b^7
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^7
[Debug] Rewriter.Symbol.reify var b^7 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuValid
[Debug] Keyset: 4
[Debug] old id a -> 10
[Debug] fresh id a -> 11
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.ResourceAlgebra.valid
[Debug] Rewriter.is_local: qual_ident = Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = fpuAllowed; qual_ident = Library.ResourceAlgebra.fpuAllowed
[Debug] Rewriter.is_local: qual_ident = Library.ResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuReflexive.a^11
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2: Library.ResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^11
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra.fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^11
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^11
[Debug] SymbolTbl.resolve.go_forward: ids2: a^11
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^11
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuReflexive.a^11
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^11
[Debug] Rewriter.Symbol.reify var a^11 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^3: Library.ResourceAlgebra.T,
                                              b^2: Library.ResourceAlgebra.T)
                                returns (ret^3: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^11
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^11
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuReflexive.a^11
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^11
[Debug] Rewriter.Symbol.reify var a^11 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^11
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^11
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuReflexive.a^11
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^11
[Debug] Rewriter.Symbol.reify var a^11 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2: Library.ResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^11
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^11
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuReflexive.a^11
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^11
[Debug] Rewriter.Symbol.reify var a^11 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuReflexive
[Debug] Keyset: 4
[Debug] old id a -> 11
[Debug] fresh id a -> 12
[Debug] Keyset: 4
[Debug] old id b -> 7
[Debug] fresh id b -> 8
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.ResourceAlgebra.frame
[Debug] Rewriter.is_local: qual_ident = Library.ResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.ResourceAlgebra.valid
[Debug] Rewriter.is_local: qual_ident = Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.ResourceAlgebra.valid
[Debug] Rewriter.is_local: qual_ident = Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.ResourceAlgebra.valid
[Debug] Rewriter.is_local: qual_ident = Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.frameValid.a^12
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.frameValid.b^8
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2: Library.ResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.frame
[Debug] Rewriter.Symbol.reify func frame(a^1: Library.ResourceAlgebra.T, b^1:
                                         Library.ResourceAlgebra.T)
                                returns (ret^1: Library.ResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^12
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra.frameValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^12
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^8, a^12
[Debug] SymbolTbl.resolve.go_forward: ids2: a^12
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^12
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.frameValid.a^12
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^12
[Debug] Rewriter.Symbol.reify var a^12 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^8
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra.frameValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^8
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^8, a^12
[Debug] SymbolTbl.resolve.go_forward: ids2: b^8
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^8
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.frameValid.b^8
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^8
[Debug] Rewriter.Symbol.reify var b^8 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2: Library.ResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^12
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^12
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.frameValid.a^12
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^12
[Debug] Rewriter.Symbol.reify var a^12 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2: Library.ResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: b^8
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^8
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.frameValid.b^8
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^8
[Debug] Rewriter.Symbol.reify var b^8 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2: Library.ResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^12
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^12
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.frameValid.a^12
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^12
[Debug] Rewriter.Symbol.reify var a^12 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2: Library.ResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.frame
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.frame
[Debug] Rewriter.Symbol.reify func frame(a^1: Library.ResourceAlgebra.T, b^1:
                                         Library.ResourceAlgebra.T)
                                returns (ret^1: Library.ResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^12
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^12
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.frameValid.a^12
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^12
[Debug] Rewriter.Symbol.reify var a^12 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^8
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^8
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.frameValid.b^8
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^8
[Debug] Rewriter.Symbol.reify var b^8 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frameValid
[Debug] Keyset: 4
[Debug] old id a -> 12
[Debug] fresh id a -> 13
[Debug] Keyset: 4
[Debug] old id b -> 8
[Debug] fresh id b -> 9
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.ResourceAlgebra.comp
[Debug] Rewriter.is_local: qual_ident = Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.ResourceAlgebra.valid
[Debug] Rewriter.is_local: qual_ident = Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.ResourceAlgebra.comp
[Debug] Rewriter.is_local: qual_ident = Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.ResourceAlgebra.frame
[Debug] Rewriter.is_local: qual_ident = Library.ResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.ResourceAlgebra.valid
[Debug] Rewriter.is_local: qual_ident = Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.weak_frameCompInv.a^13
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.ResourceAlgebra.weak_frameCompInv.b^9
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2: Library.ResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a: Library.ResourceAlgebra.T, b:
                                        Library.ResourceAlgebra.T)
                                returns (ret: Library.ResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^13
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra.weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^13
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^9, a^13
[Debug] SymbolTbl.resolve.go_forward: ids2: a^13
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^13
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.weak_frameCompInv.a^13
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^13
[Debug] Rewriter.Symbol.reify var a^13 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^9
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra.weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^9
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^9, a^13
[Debug] SymbolTbl.resolve.go_forward: ids2: b^9
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^9
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.weak_frameCompInv.b^9
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^9
[Debug] Rewriter.Symbol.reify var b^9 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2: Library.ResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.frame
[Debug] Rewriter.Symbol.reify func frame(a^1: Library.ResourceAlgebra.T, b^1:
                                         Library.ResourceAlgebra.T)
                                returns (ret^1: Library.ResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a: Library.ResourceAlgebra.T, b:
                                        Library.ResourceAlgebra.T)
                                returns (ret: Library.ResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^13
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^13
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.weak_frameCompInv.a^13
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^13
[Debug] Rewriter.Symbol.reify var a^13 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^9
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^9
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.weak_frameCompInv.b^9
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^9
[Debug] Rewriter.Symbol.reify var b^9 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^9
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^9
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.weak_frameCompInv.b^9
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^9
[Debug] Rewriter.Symbol.reify var b^9 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2: Library.ResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.ResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.ResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a: Library.ResourceAlgebra.T, b:
                                        Library.ResourceAlgebra.T)
                                returns (ret: Library.ResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^13
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^13
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.weak_frameCompInv.a^13
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^13
[Debug] Rewriter.Symbol.reify var a^13 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^9
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^9
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.weak_frameCompInv.b^9
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^9
[Debug] Rewriter.Symbol.reify var b^9 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.weak_frameCompInv
[Debug] Done with processing module ResourceAlgebra
[Debug] Rewriter.set_symbol: symbol = ResourceAlgebra
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra
[Debug] Processing module CancellativeResourceAlgebra
[Debug] Processing module CancellativeResourceAlgebra: scope_children: 
[Debug] Typing.process_module: computing mod_qual_ident: CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = CancellativeResourceAlgebra; qual_ident = Library.CancellativeResourceAlgebra
[Debug] Typing.process_module: module CancellativeResourceAlgebra: checking return type ResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify interface ResourceAlgebra
        {
          rep type T
          
          val id : Library.ResourceAlgebra.T
          
          func comp(a: Library.ResourceAlgebra.T, b:
                    Library.ResourceAlgebra.T)
            returns (ret: Library.ResourceAlgebra.T)
          
          
          func frame(a^1: Library.ResourceAlgebra.T, b^1:
                     Library.ResourceAlgebra.T)
            returns (ret^1: Library.ResourceAlgebra.T)
          
          
          func valid(a^2: Library.ResourceAlgebra.T)
            returns (ret^2: Bool)
          
          
          func fpuAllowed(a^3: Library.ResourceAlgebra.T, b^2:
                          Library.ResourceAlgebra.T)
            returns (ret^3: Bool)
          
          
          lemma idValid()
            ensures Library.ResourceAlgebra.valid(Library.ResourceAlgebra.id)
          
          
          lemma compAssoc()
            ensures forall a^4: Library.ResourceAlgebra.T, b^3:
            Library.ResourceAlgebra.T, c: Library.ResourceAlgebra.T ::
            Library.ResourceAlgebra.comp(Library.ResourceAlgebra.comp(a^4,
            b^3), c) == Library.ResourceAlgebra.comp(a^4,
            Library.ResourceAlgebra.comp(b^3, c))
          
          
          lemma compCommute()
            ensures forall a^5: Library.ResourceAlgebra.T, b^4:
            Library.ResourceAlgebra.T :: Library.ResourceAlgebra.comp(a^5,
            b^4) == Library.ResourceAlgebra.comp(b^4, a^5)
          
          
          lemma compId()
            ensures forall a^6: Library.ResourceAlgebra.T ::
            Library.ResourceAlgebra.comp(a^6, Library.ResourceAlgebra.id) ==
            a^6
          
          
          lemma compValid()
            ensures forall a^7: Library.ResourceAlgebra.T, b^5:
            Library.ResourceAlgebra.T ::
            Library.ResourceAlgebra.valid(Library.ResourceAlgebra.comp(a^7,
            b^5)) ==> Library.ResourceAlgebra.valid(a^7) &&
            Library.ResourceAlgebra.valid(b^5)
          
          
          lemma frameId()
            ensures forall a^8: Library.ResourceAlgebra.T ::
            Library.ResourceAlgebra.frame(a^8, Library.ResourceAlgebra.id) ==
            a^8
          
          
          lemma compFrameInv()
            ensures forall a^9: Library.ResourceAlgebra.T, b^6:
            Library.ResourceAlgebra.T ::
            Library.ResourceAlgebra.valid(Library.ResourceAlgebra.frame(a^9,
            b^6)) ==>
            Library.ResourceAlgebra.comp(Library.ResourceAlgebra.frame(a^9,
            b^6), b^6) == a^9
          
          
          lemma fpuValid()
            ensures forall a^10: Library.ResourceAlgebra.T, b^7:
            Library.ResourceAlgebra.T, c^1: Library.ResourceAlgebra.T ::
            Library.ResourceAlgebra.fpuAllowed(a^10, b^7) &&
            Library.ResourceAlgebra.valid(a^10) &&
            Library.ResourceAlgebra.valid(Library.ResourceAlgebra.comp(a^10,
            c^1)) ==>
            Library.ResourceAlgebra.valid(Library.ResourceAlgebra.comp(b^7,
            c^1))
          
          
          lemma fpuReflexive()
            ensures forall a^11: Library.ResourceAlgebra.T ::
            Library.ResourceAlgebra.valid(a^11) ==>
            Library.ResourceAlgebra.fpuAllowed(a^11, a^11)
          
          
          lemma frameValid()
            ensures forall a^12: Library.ResourceAlgebra.T, b^8:
            Library.ResourceAlgebra.T ::
            Library.ResourceAlgebra.valid(Library.ResourceAlgebra.frame(a^12,
            b^8)) ==> Library.ResourceAlgebra.valid(a^12) &&
            Library.ResourceAlgebra.valid(b^8)
          
          
          lemma weak_frameCompInv()
            ensures forall a^13: Library.ResourceAlgebra.T, b^9:
            Library.ResourceAlgebra.T ::
            Library.ResourceAlgebra.valid(Library.ResourceAlgebra.comp(a^13,
            b^9)) ==>
            Library.ResourceAlgebra.valid(Library.ResourceAlgebra.frame(Library.ResourceAlgebra.comp(a^13,
            b^9), b^9))
          
        }
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frame
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.valid
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.weak_frameCompInv
[Debug] Typing.process_module: CancellativeResourceAlgebra: checking return type interface ResourceAlgebra
{
  rep type T
  
  val id : Library.CancellativeResourceAlgebra.T

func comp(a: Library.CancellativeResourceAlgebra.T,
b:
Library.CancellativeResourceAlgebra.T)
returns (ret: Library.CancellativeResourceAlgebra.T)


func frame(a^1: Library.CancellativeResourceAlgebra.T,
b^1:
Library.CancellativeResourceAlgebra.T)
returns (ret^1: Library.CancellativeResourceAlgebra.T)


func valid(a^2: Library.CancellativeResourceAlgebra.T)
returns (ret^2: Bool)


func fpuAllowed(a^3: Library.CancellativeResourceAlgebra.T,
b^2:
Library.CancellativeResourceAlgebra.T)
returns (ret^3: Bool)


lemma idValid()
  ensures Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.id)


lemma compAssoc()
  ensures forall a^4: Library.CancellativeResourceAlgebra.T,
b^3:
Library.CancellativeResourceAlgebra.T,
c:
Library.CancellativeResourceAlgebra.T
::
Library.CancellativeResourceAlgebra.comp(Library.CancellativeResourceAlgebra.comp(a^4,
b^3),
c) ==
Library.CancellativeResourceAlgebra.comp(a^4,
Library.CancellativeResourceAlgebra.comp(b^3,
c))


lemma compCommute()
  ensures forall a^5: Library.CancellativeResourceAlgebra.T,
b^4:
Library.CancellativeResourceAlgebra.T
::
Library.CancellativeResourceAlgebra.comp(a^5,
b^4) ==
Library.CancellativeResourceAlgebra.comp(b^4,
a^5)


lemma compId()
  ensures forall a^6: Library.CancellativeResourceAlgebra.T
::
Library.CancellativeResourceAlgebra.comp(a^6,
Library.CancellativeResourceAlgebra.id) ==
a^6


lemma compValid()
  ensures forall a^7: Library.CancellativeResourceAlgebra.T,
b^5:
Library.CancellativeResourceAlgebra.T
::
Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.comp(a^7,
b^5)) ==>
Library.CancellativeResourceAlgebra.valid(a^7) &&
Library.CancellativeResourceAlgebra.valid(b^5)


lemma frameId()
  ensures forall a^8: Library.CancellativeResourceAlgebra.T
::
Library.CancellativeResourceAlgebra.frame(a^8,
Library.CancellativeResourceAlgebra.id) ==
a^8


lemma compFrameInv()
  ensures forall a^9: Library.CancellativeResourceAlgebra.T,
b^6:
Library.CancellativeResourceAlgebra.T
::
Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.frame(a^9,
b^6)) ==>
Library.CancellativeResourceAlgebra.comp(Library.CancellativeResourceAlgebra.frame(a^9,
b^6),
b^6) ==
a^9


lemma fpuValid()
  ensures forall a^10: Library.CancellativeResourceAlgebra.T,
b^7:
Library.CancellativeResourceAlgebra.T,
c^1:
Library.CancellativeResourceAlgebra.T
::
Library.CancellativeResourceAlgebra.fpuAllowed(a^10,
b^7) &&
Library.CancellativeResourceAlgebra.valid(a^10) &&
Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.comp(a^10,
c^1)) ==>
Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.comp(b^7,
c^1))


lemma fpuReflexive()
  ensures forall a^11: Library.CancellativeResourceAlgebra.T
::
Library.CancellativeResourceAlgebra.valid(a^11) ==>
Library.CancellativeResourceAlgebra.fpuAllowed(a^11,
a^11)


lemma frameValid()
  ensures forall a^12: Library.CancellativeResourceAlgebra.T,
b^8:
Library.CancellativeResourceAlgebra.T
::
Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.frame(a^12,
b^8)) ==>
Library.CancellativeResourceAlgebra.valid(a^12) &&
Library.CancellativeResourceAlgebra.valid(b^8)


lemma weak_frameCompInv()
  ensures forall a^13: Library.CancellativeResourceAlgebra.T,
b^9:
Library.CancellativeResourceAlgebra.T
::
Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.comp(a^13,
b^9)) ==>
Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.frame(Library.CancellativeResourceAlgebra.comp(a^13,
b^9),
b^9))

}: reified; 
 qual_interface_ident: Library.ResourceAlgebra 
 mid: ResourceAlgebra
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.weak_frameCompInv
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameValid
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuReflexive
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuValid
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compFrameInv
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameId
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compValid
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compId
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compCommute
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compAssoc
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.idValid
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.id
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameCompInv
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameReflexive
[Debug] Library.ResourceAlgebra
[Debug] Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 4
[Debug] old id a -> 13
[Debug] fresh id a -> 14
[Debug] Keyset: 4
[Debug] old id b -> 9
[Debug] fresh id b -> 10
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.weak_frameCompInv.a^14
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.weak_frameCompInv.b^10
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a:
                                        Library.CancellativeResourceAlgebra.T,
                                        b:
                                        Library.CancellativeResourceAlgebra.T)
                                returns (ret:
                                         Library.CancellativeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^14
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra.weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^14
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^10, a^14
[Debug] SymbolTbl.resolve.go_forward: ids2: a^14
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^14
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.weak_frameCompInv.a^14
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^14
[Debug] Rewriter.Symbol.reify var a^14 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^10
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra.weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^10
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^10, a^14
[Debug] SymbolTbl.resolve.go_forward: ids2: b^10
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^10
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.weak_frameCompInv.b^10
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^10
[Debug] Rewriter.Symbol.reify var b^10 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra,
        frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra,
        frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.frame
[Debug] Rewriter.Symbol.reify func frame(a^1:
                                         Library.CancellativeResourceAlgebra.T,
                                         b^1:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^1:
                                         Library.CancellativeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a:
                                        Library.CancellativeResourceAlgebra.T,
                                        b:
                                        Library.CancellativeResourceAlgebra.T)
                                returns (ret:
                                         Library.CancellativeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^14
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^14
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.weak_frameCompInv.a^14
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^14
[Debug] Rewriter.Symbol.reify var a^14 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^10
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^10
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.weak_frameCompInv.b^10
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^10
[Debug] Rewriter.Symbol.reify var b^10 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^10
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^10
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.weak_frameCompInv.b^10
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^10
[Debug] Rewriter.Symbol.reify var b^10 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a:
                                        Library.CancellativeResourceAlgebra.T,
                                        b:
                                        Library.CancellativeResourceAlgebra.T)
                                returns (ret:
                                         Library.CancellativeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^14
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^14
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.weak_frameCompInv.a^14
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^14
[Debug] Rewriter.Symbol.reify var a^14 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^10
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^10
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.weak_frameCompInv.b^10
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^10
[Debug] Rewriter.Symbol.reify var b^10 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.weak_frameCompInv
[Debug] Keyset: 4
[Debug] old id a -> 14
[Debug] fresh id a -> 15
[Debug] Keyset: 4
[Debug] old id b -> 10
[Debug] fresh id b -> 11
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameValid.a^15
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameValid.b^11
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra,
        frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra,
        frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.frame
[Debug] Rewriter.Symbol.reify func frame(a^1:
                                         Library.CancellativeResourceAlgebra.T,
                                         b^1:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^1:
                                         Library.CancellativeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^15
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra.frameValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^15
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^11, a^15
[Debug] SymbolTbl.resolve.go_forward: ids2: a^15
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^15
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frameValid.a^15
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^15
[Debug] Rewriter.Symbol.reify var a^15 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^11
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra.frameValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^11
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^11, a^15
[Debug] SymbolTbl.resolve.go_forward: ids2: b^11
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^11
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frameValid.b^11
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^11
[Debug] Rewriter.Symbol.reify var b^11 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^15
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^15
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frameValid.a^15
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^15
[Debug] Rewriter.Symbol.reify var a^15 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: b^11
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^11
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frameValid.b^11
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^11
[Debug] Rewriter.Symbol.reify var b^11 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^15
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^15
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frameValid.a^15
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^15
[Debug] Rewriter.Symbol.reify var a^15 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.frame
[Debug] Rewriter.Symbol.reify func frame(a^1:
                                         Library.CancellativeResourceAlgebra.T,
                                         b^1:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^1:
                                         Library.CancellativeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^15
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^15
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frameValid.a^15
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^15
[Debug] Rewriter.Symbol.reify var a^15 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^11
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^11
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frameValid.b^11
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^11
[Debug] Rewriter.Symbol.reify var b^11 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameValid
[Debug] Keyset: 4
[Debug] old id a -> 15
[Debug] fresh id a -> 16
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuReflexive.a^16
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^16
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra.fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^16
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^16
[Debug] SymbolTbl.resolve.go_forward: ids2: a^16
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^16
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuReflexive.a^16
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^16
[Debug] Rewriter.Symbol.reify var a^16 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra,
        fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra,
        fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^3:
                                              Library.CancellativeResourceAlgebra.T,
                                              b^2:
                                              Library.CancellativeResourceAlgebra.T)
                                returns (ret^3: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^16
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^16
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuReflexive.a^16
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^16
[Debug] Rewriter.Symbol.reify var a^16 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^16
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^16
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuReflexive.a^16
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^16
[Debug] Rewriter.Symbol.reify var a^16 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^16
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^16
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuReflexive.a^16
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^16
[Debug] Rewriter.Symbol.reify var a^16 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuReflexive
[Debug] Keyset: 4
[Debug] old id a -> 16
[Debug] fresh id a -> 17
[Debug] Keyset: 4
[Debug] old id b -> 11
[Debug] fresh id b -> 12
[Debug] Keyset: 4
[Debug] old id c -> 1
[Debug] fresh id c -> 2
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuValid.a^17
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuValid.b^12
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuValid.c^2
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra,
        fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra,
        fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^3:
                                              Library.CancellativeResourceAlgebra.T,
                                              b^2:
                                              Library.CancellativeResourceAlgebra.T)
                                returns (ret^3: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^17
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra.fpuValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^17
[Debug] SymbolTbl.resolve.go_forward: scope_entries: c^2, b^12, a^17
[Debug] SymbolTbl.resolve.go_forward: ids2: a^17
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^17
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuValid.a^17
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^17
[Debug] Rewriter.Symbol.reify var a^17 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^12
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra.fpuValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^12
[Debug] SymbolTbl.resolve.go_forward: scope_entries: c^2, b^12, a^17
[Debug] SymbolTbl.resolve.go_forward: ids2: b^12
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^12
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuValid.b^12
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^12
[Debug] Rewriter.Symbol.reify var b^12 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^17
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^17
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuValid.a^17
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^17
[Debug] Rewriter.Symbol.reify var a^17 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^3:
                                              Library.CancellativeResourceAlgebra.T,
                                              b^2:
                                              Library.CancellativeResourceAlgebra.T)
                                returns (ret^3: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^17
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^17
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuValid.a^17
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^17
[Debug] Rewriter.Symbol.reify var a^17 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^12
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^12
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuValid.b^12
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^12
[Debug] Rewriter.Symbol.reify var b^12 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a:
                                        Library.CancellativeResourceAlgebra.T,
                                        b:
                                        Library.CancellativeResourceAlgebra.T)
                                returns (ret:
                                         Library.CancellativeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^17
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^17
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuValid.a^17
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^17
[Debug] Rewriter.Symbol.reify var a^17 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^2
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra.fpuValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: c^2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: c^2, b^12, a^17
[Debug] SymbolTbl.resolve.go_forward: ids2: c^2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuValid.c^2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^2
[Debug] Rewriter.Symbol.reify var c^2 : Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^3:
                                              Library.CancellativeResourceAlgebra.T,
                                              b^2:
                                              Library.CancellativeResourceAlgebra.T)
                                returns (ret^3: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^17
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^17
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuValid.a^17
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^17
[Debug] Rewriter.Symbol.reify var a^17 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^12
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^12
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuValid.b^12
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^12
[Debug] Rewriter.Symbol.reify var b^12 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^17
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^17
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuValid.a^17
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^17
[Debug] Rewriter.Symbol.reify var a^17 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^3:
                                              Library.CancellativeResourceAlgebra.T,
                                              b^2:
                                              Library.CancellativeResourceAlgebra.T)
                                returns (ret^3: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^17
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^17
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuValid.a^17
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^17
[Debug] Rewriter.Symbol.reify var a^17 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^12
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^12
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuValid.b^12
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^12
[Debug] Rewriter.Symbol.reify var b^12 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a:
                                        Library.CancellativeResourceAlgebra.T,
                                        b:
                                        Library.CancellativeResourceAlgebra.T)
                                returns (ret:
                                         Library.CancellativeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: b^12
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^12
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuValid.b^12
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^12
[Debug] Rewriter.Symbol.reify var b^12 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuValid.c^2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^2
[Debug] Rewriter.Symbol.reify var c^2 : Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^3:
                                              Library.CancellativeResourceAlgebra.T,
                                              b^2:
                                              Library.CancellativeResourceAlgebra.T)
                                returns (ret^3: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^17
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^17
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuValid.a^17
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^17
[Debug] Rewriter.Symbol.reify var a^17 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^12
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^12
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuValid.b^12
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^12
[Debug] Rewriter.Symbol.reify var b^12 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^17
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^17
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuValid.a^17
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^17
[Debug] Rewriter.Symbol.reify var a^17 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^3:
                                              Library.CancellativeResourceAlgebra.T,
                                              b^2:
                                              Library.CancellativeResourceAlgebra.T)
                                returns (ret^3: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^17
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^17
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuValid.a^17
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^17
[Debug] Rewriter.Symbol.reify var a^17 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^12
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^12
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuValid.b^12
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^12
[Debug] Rewriter.Symbol.reify var b^12 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a:
                                        Library.CancellativeResourceAlgebra.T,
                                        b:
                                        Library.CancellativeResourceAlgebra.T)
                                returns (ret:
                                         Library.CancellativeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^17
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^17
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuValid.a^17
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^17
[Debug] Rewriter.Symbol.reify var a^17 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuValid.c^2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^2
[Debug] Rewriter.Symbol.reify var c^2 : Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^3:
                                              Library.CancellativeResourceAlgebra.T,
                                              b^2:
                                              Library.CancellativeResourceAlgebra.T)
                                returns (ret^3: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^17
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^17
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuValid.a^17
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^17
[Debug] Rewriter.Symbol.reify var a^17 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^12
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^12
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuValid.b^12
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^12
[Debug] Rewriter.Symbol.reify var b^12 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^17
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^17
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuValid.a^17
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^17
[Debug] Rewriter.Symbol.reify var a^17 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^3:
                                              Library.CancellativeResourceAlgebra.T,
                                              b^2:
                                              Library.CancellativeResourceAlgebra.T)
                                returns (ret^3: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^17
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^17
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuValid.a^17
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^17
[Debug] Rewriter.Symbol.reify var a^17 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^12
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^12
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuValid.b^12
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^12
[Debug] Rewriter.Symbol.reify var b^12 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuValid
[Debug] Keyset: 4
[Debug] old id a -> 17
[Debug] fresh id a -> 18
[Debug] Keyset: 4
[Debug] old id b -> 12
[Debug] fresh id b -> 13
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compFrameInv.a^18
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compFrameInv.b^13
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra,
        frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra,
        frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.frame
[Debug] Rewriter.Symbol.reify func frame(a^1:
                                         Library.CancellativeResourceAlgebra.T,
                                         b^1:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^1:
                                         Library.CancellativeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^18
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra.compFrameInv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^18
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^18, b^13
[Debug] SymbolTbl.resolve.go_forward: ids2: a^18
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^18
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.compFrameInv.a^18
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^18
[Debug] Rewriter.Symbol.reify var a^18 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^13
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra.compFrameInv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^13
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^18, b^13
[Debug] SymbolTbl.resolve.go_forward: ids2: b^13
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^13
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.compFrameInv.b^13
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^13
[Debug] Rewriter.Symbol.reify var b^13 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a:
                                        Library.CancellativeResourceAlgebra.T,
                                        b:
                                        Library.CancellativeResourceAlgebra.T)
                                returns (ret:
                                         Library.CancellativeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.frame
[Debug] Rewriter.Symbol.reify func frame(a^1:
                                         Library.CancellativeResourceAlgebra.T,
                                         b^1:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^1:
                                         Library.CancellativeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^18
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^18
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.compFrameInv.a^18
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^18
[Debug] Rewriter.Symbol.reify var a^18 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^13
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^13
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.compFrameInv.b^13
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^13
[Debug] Rewriter.Symbol.reify var b^13 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^13
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^13
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.compFrameInv.b^13
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^13
[Debug] Rewriter.Symbol.reify var b^13 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^18
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^18
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.compFrameInv.a^18
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^18
[Debug] Rewriter.Symbol.reify var a^18 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.frame
[Debug] Rewriter.Symbol.reify func frame(a^1:
                                         Library.CancellativeResourceAlgebra.T,
                                         b^1:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^1:
                                         Library.CancellativeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^18
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^18
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.compFrameInv.a^18
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^18
[Debug] Rewriter.Symbol.reify var a^18 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^13
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^13
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.compFrameInv.b^13
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^13
[Debug] Rewriter.Symbol.reify var b^13 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compFrameInv
[Debug] Keyset: 4
[Debug] old id a -> 18
[Debug] fresh id a -> 19
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameId.a^19
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra,
        frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra,
        frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.frame
[Debug] Rewriter.Symbol.reify func frame(a^1:
                                         Library.CancellativeResourceAlgebra.T,
                                         b^1:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^1:
                                         Library.CancellativeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^19
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra.frameId
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^19
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^19
[Debug] SymbolTbl.resolve.go_forward: ids2: a^19
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^19
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frameId.a^19
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^19
[Debug] Rewriter.Symbol.reify var a^19 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.id
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra, id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra, id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.id
[Debug] Rewriter.Symbol.reify val id : Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^19
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^19
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frameId.a^19
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^19
[Debug] Rewriter.Symbol.reify var a^19 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameId
[Debug] Keyset: 4
[Debug] old id a -> 19
[Debug] fresh id a -> 20
[Debug] Keyset: 4
[Debug] old id b -> 13
[Debug] fresh id b -> 14
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compValid.a^20
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compValid.b^14
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a:
                                        Library.CancellativeResourceAlgebra.T,
                                        b:
                                        Library.CancellativeResourceAlgebra.T)
                                returns (ret:
                                         Library.CancellativeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^20
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra.compValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^20
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^14, a^20
[Debug] SymbolTbl.resolve.go_forward: ids2: a^20
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^20
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.compValid.a^20
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^20
[Debug] Rewriter.Symbol.reify var a^20 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^14
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra.compValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^14
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^14, a^20
[Debug] SymbolTbl.resolve.go_forward: ids2: b^14
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^14
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.compValid.b^14
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^14
[Debug] Rewriter.Symbol.reify var b^14 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^20
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^20
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.compValid.a^20
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^20
[Debug] Rewriter.Symbol.reify var a^20 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: b^14
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^14
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.compValid.b^14
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^14
[Debug] Rewriter.Symbol.reify var b^14 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^20
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^20
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.compValid.a^20
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^20
[Debug] Rewriter.Symbol.reify var a^20 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a:
                                        Library.CancellativeResourceAlgebra.T,
                                        b:
                                        Library.CancellativeResourceAlgebra.T)
                                returns (ret:
                                         Library.CancellativeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^20
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^20
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.compValid.a^20
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^20
[Debug] Rewriter.Symbol.reify var a^20 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^14
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^14
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.compValid.b^14
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^14
[Debug] Rewriter.Symbol.reify var b^14 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compValid
[Debug] Keyset: 4
[Debug] old id a -> 20
[Debug] fresh id a -> 21
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compId.a^21
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a:
                                        Library.CancellativeResourceAlgebra.T,
                                        b:
                                        Library.CancellativeResourceAlgebra.T)
                                returns (ret:
                                         Library.CancellativeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^21
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra.compId
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^21
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^21
[Debug] SymbolTbl.resolve.go_forward: ids2: a^21
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^21
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.compId.a^21
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^21
[Debug] Rewriter.Symbol.reify var a^21 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.id
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra, id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra, id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.id
[Debug] Rewriter.Symbol.reify val id : Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^21
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^21
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.compId.a^21
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^21
[Debug] Rewriter.Symbol.reify var a^21 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compId
[Debug] Keyset: 4
[Debug] old id a -> 21
[Debug] fresh id a -> 22
[Debug] Keyset: 4
[Debug] old id b -> 14
[Debug] fresh id b -> 15
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compCommute.a^22
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compCommute.b^15
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a:
                                        Library.CancellativeResourceAlgebra.T,
                                        b:
                                        Library.CancellativeResourceAlgebra.T)
                                returns (ret:
                                         Library.CancellativeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^22
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra.compCommute
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^22
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^22, b^15
[Debug] SymbolTbl.resolve.go_forward: ids2: a^22
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^22
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.compCommute.a^22
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^22
[Debug] Rewriter.Symbol.reify var a^22 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^15
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra.compCommute
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^15
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^22, b^15
[Debug] SymbolTbl.resolve.go_forward: ids2: b^15
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^15
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.compCommute.b^15
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^15
[Debug] Rewriter.Symbol.reify var b^15 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a:
                                        Library.CancellativeResourceAlgebra.T,
                                        b:
                                        Library.CancellativeResourceAlgebra.T)
                                returns (ret:
                                         Library.CancellativeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: b^15
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^15
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.compCommute.b^15
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^15
[Debug] Rewriter.Symbol.reify var b^15 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^22
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^22
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.compCommute.a^22
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^22
[Debug] Rewriter.Symbol.reify var a^22 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compCommute
[Debug] Keyset: 4
[Debug] old id a -> 22
[Debug] fresh id a -> 23
[Debug] Keyset: 4
[Debug] old id b -> 15
[Debug] fresh id b -> 16
[Debug] Keyset: 4
[Debug] old id c -> 2
[Debug] fresh id c -> 3
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compAssoc.a^23
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compAssoc.b^16
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compAssoc.c^3
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a:
                                        Library.CancellativeResourceAlgebra.T,
                                        b:
                                        Library.CancellativeResourceAlgebra.T)
                                returns (ret:
                                         Library.CancellativeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a:
                                        Library.CancellativeResourceAlgebra.T,
                                        b:
                                        Library.CancellativeResourceAlgebra.T)
                                returns (ret:
                                         Library.CancellativeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^23
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra.compAssoc
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^23
[Debug] SymbolTbl.resolve.go_forward: scope_entries: c^3, a^23, b^16
[Debug] SymbolTbl.resolve.go_forward: ids2: a^23
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^23
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.compAssoc.a^23
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^23
[Debug] Rewriter.Symbol.reify var a^23 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^16
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra.compAssoc
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^16
[Debug] SymbolTbl.resolve.go_forward: scope_entries: c^3, a^23, b^16
[Debug] SymbolTbl.resolve.go_forward: ids2: b^16
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^16
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.compAssoc.b^16
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^16
[Debug] Rewriter.Symbol.reify var b^16 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^3
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra.compAssoc
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: c^3
[Debug] SymbolTbl.resolve.go_forward: scope_entries: c^3, a^23, b^16
[Debug] SymbolTbl.resolve.go_forward: ids2: c^3
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^3
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.compAssoc.c^3
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^3
[Debug] Rewriter.Symbol.reify var c^3 : Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a:
                                        Library.CancellativeResourceAlgebra.T,
                                        b:
                                        Library.CancellativeResourceAlgebra.T)
                                returns (ret:
                                         Library.CancellativeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^23
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^23
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.compAssoc.a^23
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^23
[Debug] Rewriter.Symbol.reify var a^23 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a:
                                        Library.CancellativeResourceAlgebra.T,
                                        b:
                                        Library.CancellativeResourceAlgebra.T)
                                returns (ret:
                                         Library.CancellativeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: b^16
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^16
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.compAssoc.b^16
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^16
[Debug] Rewriter.Symbol.reify var b^16 :
                                    Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^3
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^3
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.compAssoc.c^3
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^3
[Debug] Rewriter.Symbol.reify var c^3 : Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compAssoc
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.id
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra, id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra, id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.id
[Debug] Rewriter.Symbol.reify val id : Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.idValid
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 4
[Debug] old id a -> 23
[Debug] fresh id a -> 24
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 4
[Debug] old id b -> 16
[Debug] fresh id b -> 17
[Debug] Keyset: 4
[Debug] old id ret -> 3
[Debug] fresh id ret -> 4
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuAllowed.a^24
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuAllowed.b^17
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuAllowed.ret^4
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 4
[Debug] old id a -> 24
[Debug] fresh id a -> 25
[Debug] Keyset: 4
[Debug] old id ret -> 4
[Debug] fresh id ret -> 5
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.valid.a^25
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.valid.ret^5
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 4
[Debug] old id a -> 25
[Debug] fresh id a -> 26
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 4
[Debug] old id b -> 17
[Debug] fresh id b -> 18
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 4
[Debug] old id ret -> 5
[Debug] fresh id ret -> 6
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frame.a^26
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frame.b^18
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frame.ret^6
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 4
[Debug] old id a -> 26
[Debug] fresh id a -> 27
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 4
[Debug] old id b -> 18
[Debug] fresh id b -> 19
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 4
[Debug] old id ret -> 6
[Debug] fresh id ret -> 7
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.comp.a^27
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.comp.b^19
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.comp.ret^7
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] Keyset: 4
[Debug] old id a -> 27
[Debug] fresh id a -> 28
[Debug] Keyset: 4
[Debug] old id b -> 19
[Debug] fresh id b -> 20
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.CancellativeResourceAlgebra.comp
[Debug] Rewriter.is_local: qual_ident = Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.is_local: qual_ident = Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.CancellativeResourceAlgebra.comp
[Debug] Rewriter.is_local: qual_ident = Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.CancellativeResourceAlgebra.frame
[Debug] Rewriter.is_local: qual_ident = Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameCompInv.a^28
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameCompInv.b^20
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^25:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^5: Bool)
        
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a^27:
                                        Library.CancellativeResourceAlgebra.T,
                                        b^19:
                                        Library.CancellativeResourceAlgebra.T)
                                returns (ret^7:
                                         Library.CancellativeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^28
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra.frameCompInv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^28
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^28, b^20
[Debug] SymbolTbl.resolve.go_forward: ids2: a^28
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^28
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frameCompInv.a^28
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^28
[Debug] Rewriter.Symbol.reify var a^28 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^20
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra.frameCompInv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^20
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^28, b^20
[Debug] SymbolTbl.resolve.go_forward: ids2: b^20
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^20
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frameCompInv.b^20
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^20
[Debug] Rewriter.Symbol.reify var b^20 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.frame
[Debug] Rewriter.Symbol.reify func frame(a^26:
                                         Library.CancellativeResourceAlgebra.T,
                                         b^18:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^6:
                                         Library.CancellativeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a^27:
                                        Library.CancellativeResourceAlgebra.T,
                                        b^19:
                                        Library.CancellativeResourceAlgebra.T)
                                returns (ret^7:
                                         Library.CancellativeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^28
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^28
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frameCompInv.a^28
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^28
[Debug] Rewriter.Symbol.reify var a^28 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^20
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^20
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frameCompInv.b^20
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^20
[Debug] Rewriter.Symbol.reify var b^20 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^20
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^20
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frameCompInv.b^20
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^20
[Debug] Rewriter.Symbol.reify var b^20 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^28
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^28
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frameCompInv.a^28
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^28
[Debug] Rewriter.Symbol.reify var a^28 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^25:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^5: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a^27:
                                        Library.CancellativeResourceAlgebra.T,
                                        b^19:
                                        Library.CancellativeResourceAlgebra.T)
                                returns (ret^7:
                                         Library.CancellativeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^28
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^28
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frameCompInv.a^28
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^28
[Debug] Rewriter.Symbol.reify var a^28 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^20
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^20
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frameCompInv.b^20
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^20
[Debug] Rewriter.Symbol.reify var b^20 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameCompInv
[Debug] Keyset: 4
[Debug] old id a -> 28
[Debug] fresh id a -> 29
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.is_local: qual_ident = Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.CancellativeResourceAlgebra.frame
[Debug] Rewriter.is_local: qual_ident = Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = id; qual_ident = Library.CancellativeResourceAlgebra.id
[Debug] Rewriter.is_local: qual_ident = Library.CancellativeResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameReflexive.a^29
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^25:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^5: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^29
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra.frameReflexive
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^29
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^29
[Debug] SymbolTbl.resolve.go_forward: ids2: a^29
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^29
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frameReflexive.a^29
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^29
[Debug] Rewriter.Symbol.reify var a^29 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.frame
[Debug] Rewriter.Symbol.reify func frame(a^26:
                                         Library.CancellativeResourceAlgebra.T,
                                         b^18:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^6:
                                         Library.CancellativeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^29
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^29
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frameReflexive.a^29
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^29
[Debug] Rewriter.Symbol.reify var a^29 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^29
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^29
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frameReflexive.a^29
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^29
[Debug] Rewriter.Symbol.reify var a^29 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.id
[Debug] Rewriter.Symbol.reify val id : Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.CancellativeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^25:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^5: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^29
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^29
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frameReflexive.a^29
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^29
[Debug] Rewriter.Symbol.reify var a^29 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameReflexive
[Debug] Done with processing module CancellativeResourceAlgebra
[Debug] Rewriter.set_symbol: symbol = CancellativeResourceAlgebra
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra
[Debug] Processing module LatticeResourceAlgebra
[Debug] Processing module LatticeResourceAlgebra: scope_children: 
[Debug] Typing.process_module: computing mod_qual_ident: LatticeResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = LatticeResourceAlgebra; qual_ident = Library.LatticeResourceAlgebra
[Debug] Typing.process_module: module LatticeResourceAlgebra: checking return type ResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify interface ResourceAlgebra
        {
          rep type T
          
          val id : Library.ResourceAlgebra.T
          
          func comp(a: Library.ResourceAlgebra.T, b:
                    Library.ResourceAlgebra.T)
            returns (ret: Library.ResourceAlgebra.T)
          
          
          func frame(a^1: Library.ResourceAlgebra.T, b^1:
                     Library.ResourceAlgebra.T)
            returns (ret^1: Library.ResourceAlgebra.T)
          
          
          func valid(a^2: Library.ResourceAlgebra.T)
            returns (ret^2: Bool)
          
          
          func fpuAllowed(a^3: Library.ResourceAlgebra.T, b^2:
                          Library.ResourceAlgebra.T)
            returns (ret^3: Bool)
          
          
          lemma idValid()
            ensures Library.ResourceAlgebra.valid(Library.ResourceAlgebra.id)
          
          
          lemma compAssoc()
            ensures forall a^4: Library.ResourceAlgebra.T, b^3:
            Library.ResourceAlgebra.T, c: Library.ResourceAlgebra.T ::
            Library.ResourceAlgebra.comp(Library.ResourceAlgebra.comp(a^4,
            b^3), c) == Library.ResourceAlgebra.comp(a^4,
            Library.ResourceAlgebra.comp(b^3, c))
          
          
          lemma compCommute()
            ensures forall a^5: Library.ResourceAlgebra.T, b^4:
            Library.ResourceAlgebra.T :: Library.ResourceAlgebra.comp(a^5,
            b^4) == Library.ResourceAlgebra.comp(b^4, a^5)
          
          
          lemma compId()
            ensures forall a^6: Library.ResourceAlgebra.T ::
            Library.ResourceAlgebra.comp(a^6, Library.ResourceAlgebra.id) ==
            a^6
          
          
          lemma compValid()
            ensures forall a^7: Library.ResourceAlgebra.T, b^5:
            Library.ResourceAlgebra.T ::
            Library.ResourceAlgebra.valid(Library.ResourceAlgebra.comp(a^7,
            b^5)) ==> Library.ResourceAlgebra.valid(a^7) &&
            Library.ResourceAlgebra.valid(b^5)
          
          
          lemma frameId()
            ensures forall a^8: Library.ResourceAlgebra.T ::
            Library.ResourceAlgebra.frame(a^8, Library.ResourceAlgebra.id) ==
            a^8
          
          
          lemma compFrameInv()
            ensures forall a^9: Library.ResourceAlgebra.T, b^6:
            Library.ResourceAlgebra.T ::
            Library.ResourceAlgebra.valid(Library.ResourceAlgebra.frame(a^9,
            b^6)) ==>
            Library.ResourceAlgebra.comp(Library.ResourceAlgebra.frame(a^9,
            b^6), b^6) == a^9
          
          
          lemma fpuValid()
            ensures forall a^10: Library.ResourceAlgebra.T, b^7:
            Library.ResourceAlgebra.T, c^1: Library.ResourceAlgebra.T ::
            Library.ResourceAlgebra.fpuAllowed(a^10, b^7) &&
            Library.ResourceAlgebra.valid(a^10) &&
            Library.ResourceAlgebra.valid(Library.ResourceAlgebra.comp(a^10,
            c^1)) ==>
            Library.ResourceAlgebra.valid(Library.ResourceAlgebra.comp(b^7,
            c^1))
          
          
          lemma fpuReflexive()
            ensures forall a^11: Library.ResourceAlgebra.T ::
            Library.ResourceAlgebra.valid(a^11) ==>
            Library.ResourceAlgebra.fpuAllowed(a^11, a^11)
          
          
          lemma frameValid()
            ensures forall a^12: Library.ResourceAlgebra.T, b^8:
            Library.ResourceAlgebra.T ::
            Library.ResourceAlgebra.valid(Library.ResourceAlgebra.frame(a^12,
            b^8)) ==> Library.ResourceAlgebra.valid(a^12) &&
            Library.ResourceAlgebra.valid(b^8)
          
          
          lemma weak_frameCompInv()
            ensures forall a^13: Library.ResourceAlgebra.T, b^9:
            Library.ResourceAlgebra.T ::
            Library.ResourceAlgebra.valid(Library.ResourceAlgebra.comp(a^13,
            b^9)) ==>
            Library.ResourceAlgebra.valid(Library.ResourceAlgebra.frame(Library.ResourceAlgebra.comp(a^13,
            b^9), b^9))
          
        }
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frame
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.valid
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.weak_frameCompInv
[Debug] Typing.process_module: LatticeResourceAlgebra: checking return type interface ResourceAlgebra
{
  rep type T
  
  val id : Library.LatticeResourceAlgebra.T

func comp(a: Library.LatticeResourceAlgebra.T,
b:
Library.LatticeResourceAlgebra.T)
returns (ret: Library.LatticeResourceAlgebra.T)


func frame(a^1: Library.LatticeResourceAlgebra.T,
b^1:
Library.LatticeResourceAlgebra.T)
returns (ret^1: Library.LatticeResourceAlgebra.T)


func valid(a^2: Library.LatticeResourceAlgebra.T)
returns (ret^2: Bool)


func fpuAllowed(a^3: Library.LatticeResourceAlgebra.T,
b^2:
Library.LatticeResourceAlgebra.T)
returns (ret^3: Bool)


lemma idValid()
  ensures Library.LatticeResourceAlgebra.valid(Library.LatticeResourceAlgebra.id)


lemma compAssoc()
  ensures forall a^4: Library.LatticeResourceAlgebra.T,
b^3:
Library.LatticeResourceAlgebra.T,
c:
Library.LatticeResourceAlgebra.T
::
Library.LatticeResourceAlgebra.comp(Library.LatticeResourceAlgebra.comp(a^4,
b^3),
c) ==
Library.LatticeResourceAlgebra.comp(a^4,
Library.LatticeResourceAlgebra.comp(b^3,
c))


lemma compCommute()
  ensures forall a^5: Library.LatticeResourceAlgebra.T,
b^4:
Library.LatticeResourceAlgebra.T
::
Library.LatticeResourceAlgebra.comp(a^5,
b^4) ==
Library.LatticeResourceAlgebra.comp(b^4,
a^5)


lemma compId()
  ensures forall a^6: Library.LatticeResourceAlgebra.T
::
Library.LatticeResourceAlgebra.comp(a^6,
Library.LatticeResourceAlgebra.id) ==
a^6


lemma compValid()
  ensures forall a^7: Library.LatticeResourceAlgebra.T,
b^5:
Library.LatticeResourceAlgebra.T
::
Library.LatticeResourceAlgebra.valid(Library.LatticeResourceAlgebra.comp(a^7,
b^5)) ==>
Library.LatticeResourceAlgebra.valid(a^7) &&
Library.LatticeResourceAlgebra.valid(b^5)


lemma frameId()
  ensures forall a^8: Library.LatticeResourceAlgebra.T
::
Library.LatticeResourceAlgebra.frame(a^8,
Library.LatticeResourceAlgebra.id) ==
a^8


lemma compFrameInv()
  ensures forall a^9: Library.LatticeResourceAlgebra.T,
b^6:
Library.LatticeResourceAlgebra.T
::
Library.LatticeResourceAlgebra.valid(Library.LatticeResourceAlgebra.frame(a^9,
b^6)) ==>
Library.LatticeResourceAlgebra.comp(Library.LatticeResourceAlgebra.frame(a^9,
b^6),
b^6) ==
a^9


lemma fpuValid()
  ensures forall a^10: Library.LatticeResourceAlgebra.T,
b^7:
Library.LatticeResourceAlgebra.T,
c^1:
Library.LatticeResourceAlgebra.T
::
Library.LatticeResourceAlgebra.fpuAllowed(a^10,
b^7) &&
Library.LatticeResourceAlgebra.valid(a^10) &&
Library.LatticeResourceAlgebra.valid(Library.LatticeResourceAlgebra.comp(a^10,
c^1)) ==>
Library.LatticeResourceAlgebra.valid(Library.LatticeResourceAlgebra.comp(b^7,
c^1))


lemma fpuReflexive()
  ensures forall a^11: Library.LatticeResourceAlgebra.T
::
Library.LatticeResourceAlgebra.valid(a^11) ==>
Library.LatticeResourceAlgebra.fpuAllowed(a^11,
a^11)


lemma frameValid()
  ensures forall a^12: Library.LatticeResourceAlgebra.T,
b^8:
Library.LatticeResourceAlgebra.T
::
Library.LatticeResourceAlgebra.valid(Library.LatticeResourceAlgebra.frame(a^12,
b^8)) ==>
Library.LatticeResourceAlgebra.valid(a^12) &&
Library.LatticeResourceAlgebra.valid(b^8)


lemma weak_frameCompInv()
  ensures forall a^13: Library.LatticeResourceAlgebra.T,
b^9:
Library.LatticeResourceAlgebra.T
::
Library.LatticeResourceAlgebra.valid(Library.LatticeResourceAlgebra.comp(a^13,
b^9)) ==>
Library.LatticeResourceAlgebra.valid(Library.LatticeResourceAlgebra.frame(Library.LatticeResourceAlgebra.comp(a^13,
b^9),
b^9))

}: reified; 
 qual_interface_ident: Library.ResourceAlgebra 
 mid: ResourceAlgebra
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.weak_frameCompInv
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameValid
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuReflexive
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuValid
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compFrameInv
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameId
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compValid
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compId
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compCommute
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compAssoc
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.idValid
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.id
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv0
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv2
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frame_comp_inv
[Debug] Library.ResourceAlgebra
[Debug] Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 4
[Debug] old id a -> 29
[Debug] fresh id a -> 30
[Debug] Keyset: 4
[Debug] old id b -> 20
[Debug] fresh id b -> 21
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.weak_frameCompInv.a^30
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.weak_frameCompInv.b^21
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a: Library.LatticeResourceAlgebra.T,
                                        b: Library.LatticeResourceAlgebra.T)
                                returns (ret:
                                         Library.LatticeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^30
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra.weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^30
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^21, a^30
[Debug] SymbolTbl.resolve.go_forward: ids2: a^30
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^30
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.weak_frameCompInv.a^30
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^30
[Debug] Rewriter.Symbol.reify var a^30 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^21
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra.weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^21
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^21, a^30
[Debug] SymbolTbl.resolve.go_forward: ids2: b^21
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^21
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.weak_frameCompInv.b^21
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^21
[Debug] Rewriter.Symbol.reify var b^21 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.frame
[Debug] Rewriter.Symbol.reify func frame(a^1:
                                         Library.LatticeResourceAlgebra.T,
                                         b^1:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^1:
                                         Library.LatticeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a: Library.LatticeResourceAlgebra.T,
                                        b: Library.LatticeResourceAlgebra.T)
                                returns (ret:
                                         Library.LatticeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^30
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^30
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.weak_frameCompInv.a^30
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^30
[Debug] Rewriter.Symbol.reify var a^30 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^21
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^21
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.weak_frameCompInv.b^21
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^21
[Debug] Rewriter.Symbol.reify var b^21 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^21
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^21
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.weak_frameCompInv.b^21
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^21
[Debug] Rewriter.Symbol.reify var b^21 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a: Library.LatticeResourceAlgebra.T,
                                        b: Library.LatticeResourceAlgebra.T)
                                returns (ret:
                                         Library.LatticeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^30
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^30
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.weak_frameCompInv.a^30
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^30
[Debug] Rewriter.Symbol.reify var a^30 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^21
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^21
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.weak_frameCompInv.b^21
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^21
[Debug] Rewriter.Symbol.reify var b^21 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.weak_frameCompInv
[Debug] Keyset: 4
[Debug] old id a -> 30
[Debug] fresh id a -> 31
[Debug] Keyset: 4
[Debug] old id b -> 21
[Debug] fresh id b -> 22
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameValid.a^31
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameValid.b^22
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.frame
[Debug] Rewriter.Symbol.reify func frame(a^1:
                                         Library.LatticeResourceAlgebra.T,
                                         b^1:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^1:
                                         Library.LatticeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^31
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra.frameValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^31
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^22, a^31
[Debug] SymbolTbl.resolve.go_forward: ids2: a^31
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^31
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameValid.a^31
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^31
[Debug] Rewriter.Symbol.reify var a^31 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^22
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra.frameValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^22
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^22, a^31
[Debug] SymbolTbl.resolve.go_forward: ids2: b^22
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^22
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameValid.b^22
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^22
[Debug] Rewriter.Symbol.reify var b^22 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^31
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^31
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameValid.a^31
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^31
[Debug] Rewriter.Symbol.reify var a^31 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: b^22
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^22
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameValid.b^22
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^22
[Debug] Rewriter.Symbol.reify var b^22 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^31
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^31
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameValid.a^31
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^31
[Debug] Rewriter.Symbol.reify var a^31 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.frame
[Debug] Rewriter.Symbol.reify func frame(a^1:
                                         Library.LatticeResourceAlgebra.T,
                                         b^1:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^1:
                                         Library.LatticeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^31
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^31
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameValid.a^31
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^31
[Debug] Rewriter.Symbol.reify var a^31 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^22
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^22
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameValid.b^22
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^22
[Debug] Rewriter.Symbol.reify var b^22 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameValid
[Debug] Keyset: 4
[Debug] old id a -> 31
[Debug] fresh id a -> 32
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuReflexive.a^32
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^32
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra.fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^32
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^32
[Debug] SymbolTbl.resolve.go_forward: ids2: a^32
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^32
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuReflexive.a^32
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^32
[Debug] Rewriter.Symbol.reify var a^32 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra,
        fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra,
        fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^3:
                                              Library.LatticeResourceAlgebra.T,
                                              b^2:
                                              Library.LatticeResourceAlgebra.T)
                                returns (ret^3: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^32
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^32
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuReflexive.a^32
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^32
[Debug] Rewriter.Symbol.reify var a^32 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^32
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^32
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuReflexive.a^32
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^32
[Debug] Rewriter.Symbol.reify var a^32 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^32
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^32
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuReflexive.a^32
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^32
[Debug] Rewriter.Symbol.reify var a^32 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuReflexive
[Debug] Keyset: 4
[Debug] old id a -> 32
[Debug] fresh id a -> 33
[Debug] Keyset: 4
[Debug] old id b -> 22
[Debug] fresh id b -> 23
[Debug] Keyset: 4
[Debug] old id c -> 3
[Debug] fresh id c -> 4
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuValid.a^33
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuValid.b^23
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuValid.c^4
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra,
        fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra,
        fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^3:
                                              Library.LatticeResourceAlgebra.T,
                                              b^2:
                                              Library.LatticeResourceAlgebra.T)
                                returns (ret^3: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^33
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra.fpuValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^33
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^23, c^4, a^33
[Debug] SymbolTbl.resolve.go_forward: ids2: a^33
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^33
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuValid.a^33
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^33
[Debug] Rewriter.Symbol.reify var a^33 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^23
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra.fpuValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^23
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^23, c^4, a^33
[Debug] SymbolTbl.resolve.go_forward: ids2: b^23
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^23
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuValid.b^23
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^23
[Debug] Rewriter.Symbol.reify var b^23 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^33
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^33
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuValid.a^33
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^33
[Debug] Rewriter.Symbol.reify var a^33 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^3:
                                              Library.LatticeResourceAlgebra.T,
                                              b^2:
                                              Library.LatticeResourceAlgebra.T)
                                returns (ret^3: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^33
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^33
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuValid.a^33
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^33
[Debug] Rewriter.Symbol.reify var a^33 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^23
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^23
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuValid.b^23
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^23
[Debug] Rewriter.Symbol.reify var b^23 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a: Library.LatticeResourceAlgebra.T,
                                        b: Library.LatticeResourceAlgebra.T)
                                returns (ret:
                                         Library.LatticeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^33
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^33
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuValid.a^33
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^33
[Debug] Rewriter.Symbol.reify var a^33 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^4
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra.fpuValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: c^4
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^23, c^4, a^33
[Debug] SymbolTbl.resolve.go_forward: ids2: c^4
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^4
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuValid.c^4
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^4
[Debug] Rewriter.Symbol.reify var c^4 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^3:
                                              Library.LatticeResourceAlgebra.T,
                                              b^2:
                                              Library.LatticeResourceAlgebra.T)
                                returns (ret^3: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^33
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^33
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuValid.a^33
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^33
[Debug] Rewriter.Symbol.reify var a^33 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^23
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^23
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuValid.b^23
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^23
[Debug] Rewriter.Symbol.reify var b^23 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^33
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^33
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuValid.a^33
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^33
[Debug] Rewriter.Symbol.reify var a^33 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^3:
                                              Library.LatticeResourceAlgebra.T,
                                              b^2:
                                              Library.LatticeResourceAlgebra.T)
                                returns (ret^3: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^33
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^33
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuValid.a^33
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^33
[Debug] Rewriter.Symbol.reify var a^33 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^23
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^23
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuValid.b^23
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^23
[Debug] Rewriter.Symbol.reify var b^23 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a: Library.LatticeResourceAlgebra.T,
                                        b: Library.LatticeResourceAlgebra.T)
                                returns (ret:
                                         Library.LatticeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: b^23
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^23
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuValid.b^23
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^23
[Debug] Rewriter.Symbol.reify var b^23 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^4
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^4
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuValid.c^4
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^4
[Debug] Rewriter.Symbol.reify var c^4 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^3:
                                              Library.LatticeResourceAlgebra.T,
                                              b^2:
                                              Library.LatticeResourceAlgebra.T)
                                returns (ret^3: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^33
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^33
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuValid.a^33
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^33
[Debug] Rewriter.Symbol.reify var a^33 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^23
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^23
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuValid.b^23
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^23
[Debug] Rewriter.Symbol.reify var b^23 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^33
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^33
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuValid.a^33
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^33
[Debug] Rewriter.Symbol.reify var a^33 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^3:
                                              Library.LatticeResourceAlgebra.T,
                                              b^2:
                                              Library.LatticeResourceAlgebra.T)
                                returns (ret^3: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^33
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^33
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuValid.a^33
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^33
[Debug] Rewriter.Symbol.reify var a^33 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^23
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^23
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuValid.b^23
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^23
[Debug] Rewriter.Symbol.reify var b^23 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a: Library.LatticeResourceAlgebra.T,
                                        b: Library.LatticeResourceAlgebra.T)
                                returns (ret:
                                         Library.LatticeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^33
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^33
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuValid.a^33
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^33
[Debug] Rewriter.Symbol.reify var a^33 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^4
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^4
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuValid.c^4
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^4
[Debug] Rewriter.Symbol.reify var c^4 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^3:
                                              Library.LatticeResourceAlgebra.T,
                                              b^2:
                                              Library.LatticeResourceAlgebra.T)
                                returns (ret^3: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^33
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^33
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuValid.a^33
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^33
[Debug] Rewriter.Symbol.reify var a^33 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^23
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^23
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuValid.b^23
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^23
[Debug] Rewriter.Symbol.reify var b^23 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^33
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^33
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuValid.a^33
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^33
[Debug] Rewriter.Symbol.reify var a^33 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^3:
                                              Library.LatticeResourceAlgebra.T,
                                              b^2:
                                              Library.LatticeResourceAlgebra.T)
                                returns (ret^3: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^33
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^33
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuValid.a^33
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^33
[Debug] Rewriter.Symbol.reify var a^33 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^23
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^23
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuValid.b^23
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^23
[Debug] Rewriter.Symbol.reify var b^23 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuValid
[Debug] Keyset: 4
[Debug] old id a -> 33
[Debug] fresh id a -> 34
[Debug] Keyset: 4
[Debug] old id b -> 23
[Debug] fresh id b -> 24
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compFrameInv.a^34
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compFrameInv.b^24
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.frame
[Debug] Rewriter.Symbol.reify func frame(a^1:
                                         Library.LatticeResourceAlgebra.T,
                                         b^1:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^1:
                                         Library.LatticeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^34
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra.compFrameInv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^34
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^24, a^34
[Debug] SymbolTbl.resolve.go_forward: ids2: a^34
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^34
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.compFrameInv.a^34
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^34
[Debug] Rewriter.Symbol.reify var a^34 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^24
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra.compFrameInv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^24
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^24, a^34
[Debug] SymbolTbl.resolve.go_forward: ids2: b^24
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^24
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.compFrameInv.b^24
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^24
[Debug] Rewriter.Symbol.reify var b^24 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a: Library.LatticeResourceAlgebra.T,
                                        b: Library.LatticeResourceAlgebra.T)
                                returns (ret:
                                         Library.LatticeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.frame
[Debug] Rewriter.Symbol.reify func frame(a^1:
                                         Library.LatticeResourceAlgebra.T,
                                         b^1:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^1:
                                         Library.LatticeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^34
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^34
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.compFrameInv.a^34
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^34
[Debug] Rewriter.Symbol.reify var a^34 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^24
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^24
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.compFrameInv.b^24
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^24
[Debug] Rewriter.Symbol.reify var b^24 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^24
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^24
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.compFrameInv.b^24
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^24
[Debug] Rewriter.Symbol.reify var b^24 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^34
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^34
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.compFrameInv.a^34
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^34
[Debug] Rewriter.Symbol.reify var a^34 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.frame
[Debug] Rewriter.Symbol.reify func frame(a^1:
                                         Library.LatticeResourceAlgebra.T,
                                         b^1:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^1:
                                         Library.LatticeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^34
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^34
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.compFrameInv.a^34
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^34
[Debug] Rewriter.Symbol.reify var a^34 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^24
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^24
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.compFrameInv.b^24
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^24
[Debug] Rewriter.Symbol.reify var b^24 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compFrameInv
[Debug] Keyset: 4
[Debug] old id a -> 34
[Debug] fresh id a -> 35
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameId.a^35
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.frame
[Debug] Rewriter.Symbol.reify func frame(a^1:
                                         Library.LatticeResourceAlgebra.T,
                                         b^1:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^1:
                                         Library.LatticeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^35
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra.frameId
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^35
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^35
[Debug] SymbolTbl.resolve.go_forward: ids2: a^35
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^35
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameId.a^35
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^35
[Debug] Rewriter.Symbol.reify var a^35 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.id
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.id
[Debug] Rewriter.Symbol.reify val id : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^35
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^35
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameId.a^35
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^35
[Debug] Rewriter.Symbol.reify var a^35 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameId
[Debug] Keyset: 4
[Debug] old id a -> 35
[Debug] fresh id a -> 36
[Debug] Keyset: 4
[Debug] old id b -> 24
[Debug] fresh id b -> 25
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compValid.a^36
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compValid.b^25
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a: Library.LatticeResourceAlgebra.T,
                                        b: Library.LatticeResourceAlgebra.T)
                                returns (ret:
                                         Library.LatticeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^36
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra.compValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^36
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^36, b^25
[Debug] SymbolTbl.resolve.go_forward: ids2: a^36
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^36
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.compValid.a^36
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^36
[Debug] Rewriter.Symbol.reify var a^36 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^25
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra.compValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^25
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^36, b^25
[Debug] SymbolTbl.resolve.go_forward: ids2: b^25
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^25
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.compValid.b^25
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^25
[Debug] Rewriter.Symbol.reify var b^25 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^36
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^36
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.compValid.a^36
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^36
[Debug] Rewriter.Symbol.reify var a^36 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: b^25
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^25
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.compValid.b^25
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^25
[Debug] Rewriter.Symbol.reify var b^25 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^36
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^36
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.compValid.a^36
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^36
[Debug] Rewriter.Symbol.reify var a^36 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a: Library.LatticeResourceAlgebra.T,
                                        b: Library.LatticeResourceAlgebra.T)
                                returns (ret:
                                         Library.LatticeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^36
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^36
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.compValid.a^36
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^36
[Debug] Rewriter.Symbol.reify var a^36 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^25
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^25
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.compValid.b^25
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^25
[Debug] Rewriter.Symbol.reify var b^25 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compValid
[Debug] Keyset: 4
[Debug] old id a -> 36
[Debug] fresh id a -> 37
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compId.a^37
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a: Library.LatticeResourceAlgebra.T,
                                        b: Library.LatticeResourceAlgebra.T)
                                returns (ret:
                                         Library.LatticeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^37
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra.compId
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^37
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^37
[Debug] SymbolTbl.resolve.go_forward: ids2: a^37
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^37
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.compId.a^37
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^37
[Debug] Rewriter.Symbol.reify var a^37 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.id
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.id
[Debug] Rewriter.Symbol.reify val id : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^37
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^37
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.compId.a^37
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^37
[Debug] Rewriter.Symbol.reify var a^37 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compId
[Debug] Keyset: 4
[Debug] old id a -> 37
[Debug] fresh id a -> 38
[Debug] Keyset: 4
[Debug] old id b -> 25
[Debug] fresh id b -> 26
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compCommute.a^38
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compCommute.b^26
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a: Library.LatticeResourceAlgebra.T,
                                        b: Library.LatticeResourceAlgebra.T)
                                returns (ret:
                                         Library.LatticeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^38
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra.compCommute
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^38
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^26, a^38
[Debug] SymbolTbl.resolve.go_forward: ids2: a^38
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^38
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.compCommute.a^38
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^38
[Debug] Rewriter.Symbol.reify var a^38 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^26
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra.compCommute
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^26
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^26, a^38
[Debug] SymbolTbl.resolve.go_forward: ids2: b^26
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^26
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.compCommute.b^26
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^26
[Debug] Rewriter.Symbol.reify var b^26 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a: Library.LatticeResourceAlgebra.T,
                                        b: Library.LatticeResourceAlgebra.T)
                                returns (ret:
                                         Library.LatticeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: b^26
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^26
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.compCommute.b^26
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^26
[Debug] Rewriter.Symbol.reify var b^26 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^38
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^38
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.compCommute.a^38
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^38
[Debug] Rewriter.Symbol.reify var a^38 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compCommute
[Debug] Keyset: 4
[Debug] old id a -> 38
[Debug] fresh id a -> 39
[Debug] Keyset: 4
[Debug] old id b -> 26
[Debug] fresh id b -> 27
[Debug] Keyset: 4
[Debug] old id c -> 4
[Debug] fresh id c -> 5
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compAssoc.a^39
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compAssoc.b^27
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compAssoc.c^5
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a: Library.LatticeResourceAlgebra.T,
                                        b: Library.LatticeResourceAlgebra.T)
                                returns (ret:
                                         Library.LatticeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a: Library.LatticeResourceAlgebra.T,
                                        b: Library.LatticeResourceAlgebra.T)
                                returns (ret:
                                         Library.LatticeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^39
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra.compAssoc
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^39
[Debug] SymbolTbl.resolve.go_forward: scope_entries: c^5, b^27, a^39
[Debug] SymbolTbl.resolve.go_forward: ids2: a^39
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^39
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.compAssoc.a^39
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^39
[Debug] Rewriter.Symbol.reify var a^39 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^27
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra.compAssoc
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^27
[Debug] SymbolTbl.resolve.go_forward: scope_entries: c^5, b^27, a^39
[Debug] SymbolTbl.resolve.go_forward: ids2: b^27
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^27
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.compAssoc.b^27
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^27
[Debug] Rewriter.Symbol.reify var b^27 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^5
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra.compAssoc
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: c^5
[Debug] SymbolTbl.resolve.go_forward: scope_entries: c^5, b^27, a^39
[Debug] SymbolTbl.resolve.go_forward: ids2: c^5
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^5
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.compAssoc.c^5
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^5
[Debug] Rewriter.Symbol.reify var c^5 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a: Library.LatticeResourceAlgebra.T,
                                        b: Library.LatticeResourceAlgebra.T)
                                returns (ret:
                                         Library.LatticeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^39
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^39
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.compAssoc.a^39
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^39
[Debug] Rewriter.Symbol.reify var a^39 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a: Library.LatticeResourceAlgebra.T,
                                        b: Library.LatticeResourceAlgebra.T)
                                returns (ret:
                                         Library.LatticeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: b^27
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^27
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.compAssoc.b^27
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^27
[Debug] Rewriter.Symbol.reify var b^27 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^5
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^5
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.compAssoc.c^5
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^5
[Debug] Rewriter.Symbol.reify var c^5 : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compAssoc
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^2:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.id
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.id
[Debug] Rewriter.Symbol.reify val id : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.idValid
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 4
[Debug] old id a -> 39
[Debug] fresh id a -> 40
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 4
[Debug] old id b -> 27
[Debug] fresh id b -> 28
[Debug] Keyset: 4
[Debug] old id ret -> 7
[Debug] fresh id ret -> 8
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuAllowed.a^40
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuAllowed.b^28
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuAllowed.ret^8
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 4
[Debug] old id a -> 40
[Debug] fresh id a -> 41
[Debug] Keyset: 4
[Debug] old id ret -> 8
[Debug] fresh id ret -> 9
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.valid.a^41
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.valid.ret^9
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 4
[Debug] old id a -> 41
[Debug] fresh id a -> 42
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 4
[Debug] old id b -> 28
[Debug] fresh id b -> 29
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 4
[Debug] old id ret -> 9
[Debug] fresh id ret -> 10
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frame.a^42
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frame.b^29
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frame.ret^10
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 4
[Debug] old id a -> 42
[Debug] fresh id a -> 43
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 4
[Debug] old id b -> 29
[Debug] fresh id b -> 30
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 4
[Debug] old id ret -> 10
[Debug] fresh id ret -> 11
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.comp.a^43
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.comp.b^30
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.comp.ret^11
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] Keyset: 4
[Debug] old id a -> 43
[Debug] fresh id a -> 44
[Debug] Keyset: 4
[Debug] old id b -> 30
[Debug] fresh id b -> 31
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.LatticeResourceAlgebra.frame
[Debug] Rewriter.is_local: qual_ident = Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.is_local: qual_ident = Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.LatticeResourceAlgebra.frame
[Debug] Rewriter.is_local: qual_ident = Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv.a^44
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv.b^31
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^41:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^9: Bool)
        
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.frame
[Debug] Rewriter.Symbol.reify func frame(a^42:
                                         Library.LatticeResourceAlgebra.T,
                                         b^29:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^10:
                                         Library.LatticeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^44
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra.frameCompInv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^44
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^31, a^44
[Debug] SymbolTbl.resolve.go_forward: ids2: a^44
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^44
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameCompInv.a^44
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^44
[Debug] Rewriter.Symbol.reify var a^44 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^31
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra.frameCompInv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^31
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^31, a^44
[Debug] SymbolTbl.resolve.go_forward: ids2: b^31
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^31
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameCompInv.b^31
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^31
[Debug] Rewriter.Symbol.reify var b^31 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.frame
[Debug] Rewriter.Symbol.reify func frame(a^42:
                                         Library.LatticeResourceAlgebra.T,
                                         b^29:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^10:
                                         Library.LatticeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^44
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^44
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameCompInv.a^44
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^44
[Debug] Rewriter.Symbol.reify var a^44 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^31
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^31
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameCompInv.b^31
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^31
[Debug] Rewriter.Symbol.reify var b^31 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^44
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^44
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameCompInv.a^44
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^44
[Debug] Rewriter.Symbol.reify var a^44 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^41:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^9: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.frame
[Debug] Rewriter.Symbol.reify func frame(a^42:
                                         Library.LatticeResourceAlgebra.T,
                                         b^29:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^10:
                                         Library.LatticeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^44
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^44
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameCompInv.a^44
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^44
[Debug] Rewriter.Symbol.reify var a^44 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^31
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^31
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameCompInv.b^31
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^31
[Debug] Rewriter.Symbol.reify var b^31 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv
[Debug] Keyset: 4
[Debug] old id a -> 44
[Debug] fresh id a -> 45
[Debug] Keyset: 4
[Debug] old id b -> 31
[Debug] fresh id b -> 32
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.LatticeResourceAlgebra.comp
[Debug] Rewriter.is_local: qual_ident = Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.is_local: qual_ident = Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.LatticeResourceAlgebra.comp
[Debug] Rewriter.is_local: qual_ident = Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.LatticeResourceAlgebra.frame
[Debug] Rewriter.is_local: qual_ident = Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.LatticeResourceAlgebra.comp
[Debug] Rewriter.is_local: qual_ident = Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv0.a^45
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv0.b^32
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^41:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^9: Bool)
        
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a^43:
                                        Library.LatticeResourceAlgebra.T,
                                        b^30:
                                        Library.LatticeResourceAlgebra.T)
                                returns (ret^11:
                                         Library.LatticeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^45
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra.frameCompInv0
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^45
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^32, a^45
[Debug] SymbolTbl.resolve.go_forward: ids2: a^45
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^45
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameCompInv0.a^45
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^45
[Debug] Rewriter.Symbol.reify var a^45 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^32
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra.frameCompInv0
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^32
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^32, a^45
[Debug] SymbolTbl.resolve.go_forward: ids2: b^32
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^32
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameCompInv0.b^32
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^32
[Debug] Rewriter.Symbol.reify var b^32 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.frame
[Debug] Rewriter.Symbol.reify func frame(a^42:
                                         Library.LatticeResourceAlgebra.T,
                                         b^29:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^10:
                                         Library.LatticeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a^43:
                                        Library.LatticeResourceAlgebra.T,
                                        b^30:
                                        Library.LatticeResourceAlgebra.T)
                                returns (ret^11:
                                         Library.LatticeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^45
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^45
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameCompInv0.a^45
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^45
[Debug] Rewriter.Symbol.reify var a^45 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^32
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^32
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameCompInv0.b^32
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^32
[Debug] Rewriter.Symbol.reify var b^32 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^32
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^32
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameCompInv0.b^32
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^32
[Debug] Rewriter.Symbol.reify var b^32 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a^43:
                                        Library.LatticeResourceAlgebra.T,
                                        b^30:
                                        Library.LatticeResourceAlgebra.T)
                                returns (ret^11:
                                         Library.LatticeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^45
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^45
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameCompInv0.a^45
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^45
[Debug] Rewriter.Symbol.reify var a^45 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^32
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^32
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameCompInv0.b^32
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^32
[Debug] Rewriter.Symbol.reify var b^32 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^41:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^9: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a^43:
                                        Library.LatticeResourceAlgebra.T,
                                        b^30:
                                        Library.LatticeResourceAlgebra.T)
                                returns (ret^11:
                                         Library.LatticeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^45
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^45
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameCompInv0.a^45
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^45
[Debug] Rewriter.Symbol.reify var a^45 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^32
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^32
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameCompInv0.b^32
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^32
[Debug] Rewriter.Symbol.reify var b^32 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = frameCompInv0
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv0
[Debug] Keyset: 4
[Debug] old id a -> 45
[Debug] fresh id a -> 46
[Debug] Keyset: 4
[Debug] old id b -> 32
[Debug] fresh id b -> 33
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.LatticeResourceAlgebra.comp
[Debug] Rewriter.is_local: qual_ident = Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.is_local: qual_ident = Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.LatticeResourceAlgebra.frame
[Debug] Rewriter.is_local: qual_ident = Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv2.a^46
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv2.b^33
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a^43:
                                        Library.LatticeResourceAlgebra.T,
                                        b^30:
                                        Library.LatticeResourceAlgebra.T)
                                returns (ret^11:
                                         Library.LatticeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^46
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra.frameCompInv2
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^46
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^33, a^46
[Debug] SymbolTbl.resolve.go_forward: ids2: a^46
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^46
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameCompInv2.a^46
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^46
[Debug] Rewriter.Symbol.reify var a^46 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^33
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra.frameCompInv2
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^33
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^33, a^46
[Debug] SymbolTbl.resolve.go_forward: ids2: b^33
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^33
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameCompInv2.b^33
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^33
[Debug] Rewriter.Symbol.reify var b^33 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^46
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^46
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameCompInv2.a^46
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^46
[Debug] Rewriter.Symbol.reify var a^46 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^41:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^9: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^46
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^46
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameCompInv2.a^46
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^46
[Debug] Rewriter.Symbol.reify var a^46 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a^43:
                                        Library.LatticeResourceAlgebra.T,
                                        b^30:
                                        Library.LatticeResourceAlgebra.T)
                                returns (ret^11:
                                         Library.LatticeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^46
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^46
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameCompInv2.a^46
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^46
[Debug] Rewriter.Symbol.reify var a^46 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^33
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^33
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameCompInv2.b^33
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^33
[Debug] Rewriter.Symbol.reify var b^33 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^46
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^46
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameCompInv2.a^46
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^46
[Debug] Rewriter.Symbol.reify var a^46 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.frame
[Debug] Rewriter.Symbol.reify func frame(a^42:
                                         Library.LatticeResourceAlgebra.T,
                                         b^29:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^10:
                                         Library.LatticeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^46
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^46
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameCompInv2.a^46
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^46
[Debug] Rewriter.Symbol.reify var a^46 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^33
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^33
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameCompInv2.b^33
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^33
[Debug] Rewriter.Symbol.reify var b^33 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^46
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^46
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameCompInv2.a^46
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^46
[Debug] Rewriter.Symbol.reify var a^46 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a^43:
                                        Library.LatticeResourceAlgebra.T,
                                        b^30:
                                        Library.LatticeResourceAlgebra.T)
                                returns (ret^11:
                                         Library.LatticeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^46
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^46
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameCompInv2.a^46
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^46
[Debug] Rewriter.Symbol.reify var a^46 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^33
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^33
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameCompInv2.b^33
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^33
[Debug] Rewriter.Symbol.reify var b^33 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^46
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^46
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameCompInv2.a^46
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^46
[Debug] Rewriter.Symbol.reify var a^46 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.Symbol.reify func valid(a^41:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^9: Bool)
        
[Debug] SymbolTbl.resolve_and_find: a^46
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^46
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameCompInv2.a^46
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^46
[Debug] Rewriter.Symbol.reify var a^46 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a^43:
                                        Library.LatticeResourceAlgebra.T,
                                        b^30:
                                        Library.LatticeResourceAlgebra.T)
                                returns (ret^11:
                                         Library.LatticeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^46
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^46
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameCompInv2.a^46
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^46
[Debug] Rewriter.Symbol.reify var a^46 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^33
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^33
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameCompInv2.b^33
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^33
[Debug] Rewriter.Symbol.reify var b^33 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^46
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^46
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameCompInv2.a^46
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^46
[Debug] Rewriter.Symbol.reify var a^46 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = frameCompInv2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv2
[Debug] Keyset: 4
[Debug] old id a -> 46
[Debug] fresh id a -> 47
[Debug] Keyset: 4
[Debug] old id b -> 33
[Debug] fresh id b -> 34
[Debug] Keyset: 4
[Debug] old id c -> 5
[Debug] fresh id c -> 6
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.LatticeResourceAlgebra.comp
[Debug] Rewriter.is_local: qual_ident = Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.LatticeResourceAlgebra.frame
[Debug] Rewriter.is_local: qual_ident = Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.LatticeResourceAlgebra.frame
[Debug] Rewriter.is_local: qual_ident = Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.LatticeResourceAlgebra.frame
[Debug] Rewriter.is_local: qual_ident = Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frame_comp_inv.a^47
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frame_comp_inv.b^34
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frame_comp_inv.c^6
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.frame
[Debug] Rewriter.Symbol.reify func frame(a^42:
                                         Library.LatticeResourceAlgebra.T,
                                         b^29:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^10:
                                         Library.LatticeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^47
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra.frame_comp_inv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^47
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^34, a^47, c^6
[Debug] SymbolTbl.resolve.go_forward: ids2: a^47
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^47
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frame_comp_inv.a^47
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^47
[Debug] Rewriter.Symbol.reify var a^47 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.comp
[Debug] Rewriter.Symbol.reify func comp(a^43:
                                        Library.LatticeResourceAlgebra.T,
                                        b^30:
                                        Library.LatticeResourceAlgebra.T)
                                returns (ret^11:
                                         Library.LatticeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: b^34
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra.frame_comp_inv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^34
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^34, a^47, c^6
[Debug] SymbolTbl.resolve.go_forward: ids2: b^34
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^34
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frame_comp_inv.b^34
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^34
[Debug] Rewriter.Symbol.reify var b^34 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^6
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra.frame_comp_inv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.LatticeResourceAlgebra,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: c^6
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^34, a^47, c^6
[Debug] SymbolTbl.resolve.go_forward: ids2: c^6
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^6
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frame_comp_inv.c^6
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^6
[Debug] Rewriter.Symbol.reify var c^6 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.frame
[Debug] Rewriter.Symbol.reify func frame(a^42:
                                         Library.LatticeResourceAlgebra.T,
                                         b^29:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^10:
                                         Library.LatticeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.LatticeResourceAlgebra.frame
[Debug] Rewriter.Symbol.reify func frame(a^42:
                                         Library.LatticeResourceAlgebra.T,
                                         b^29:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^10:
                                         Library.LatticeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: a^47
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^47
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frame_comp_inv.a^47
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^47
[Debug] Rewriter.Symbol.reify var a^47 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^34
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^34
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frame_comp_inv.b^34
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^34
[Debug] Rewriter.Symbol.reify var b^34 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^6
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^6
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frame_comp_inv.c^6
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^6
[Debug] Rewriter.Symbol.reify var c^6 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = frame_comp_inv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frame_comp_inv
[Debug] Done with processing module LatticeResourceAlgebra
[Debug] Rewriter.set_symbol: symbol = LatticeResourceAlgebra
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra
[Debug] Processing module Nat
[Debug] Processing module Nat: scope_children: 
[Debug] Typing.process_module: computing mod_qual_ident: Nat
[Debug] SymbolTbl.resolve_and_find: Nat
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = Nat; qual_ident = Library.Nat
[Debug] Typing.process_module: module Nat: checking return type CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify interface CancellativeResourceAlgebra
                                : Library.ResourceAlgebra
        {
          lemma weak_frameCompInv()
            ensures forall a^14: Library.CancellativeResourceAlgebra.T, b^10:
            Library.CancellativeResourceAlgebra.T ::
            Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.comp(a^14,
            b^10)) ==>
            Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.frame(Library.CancellativeResourceAlgebra.comp(a^14,
            b^10), b^10))
          
          
          lemma frameValid()
            ensures forall a^15: Library.CancellativeResourceAlgebra.T, b^11:
            Library.CancellativeResourceAlgebra.T ::
            Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.frame(a^15,
            b^11)) ==> Library.CancellativeResourceAlgebra.valid(a^15) &&
            Library.CancellativeResourceAlgebra.valid(b^11)
          
          
          lemma fpuReflexive()
            ensures forall a^16: Library.CancellativeResourceAlgebra.T ::
            Library.CancellativeResourceAlgebra.valid(a^16) ==>
            Library.CancellativeResourceAlgebra.fpuAllowed(a^16, a^16)
          
          
          lemma fpuValid()
            ensures forall a^17: Library.CancellativeResourceAlgebra.T, b^12:
            Library.CancellativeResourceAlgebra.T, c^2:
            Library.CancellativeResourceAlgebra.T ::
            Library.CancellativeResourceAlgebra.fpuAllowed(a^17, b^12) &&
            Library.CancellativeResourceAlgebra.valid(a^17) &&
            Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.comp(a^17,
            c^2)) ==>
            Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.comp(b^12,
            c^2))
          
          
          lemma compFrameInv()
            ensures forall a^18: Library.CancellativeResourceAlgebra.T, b^13:
            Library.CancellativeResourceAlgebra.T ::
            Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.frame(a^18,
            b^13)) ==>
            Library.CancellativeResourceAlgebra.comp(Library.CancellativeResourceAlgebra.frame(a^18,
            b^13), b^13) == a^18
          
          
          lemma frameId()
            ensures forall a^19: Library.CancellativeResourceAlgebra.T ::
            Library.CancellativeResourceAlgebra.frame(a^19,
            Library.CancellativeResourceAlgebra.id) == a^19
          
          
          lemma compValid()
            ensures forall a^20: Library.CancellativeResourceAlgebra.T, b^14:
            Library.CancellativeResourceAlgebra.T ::
            Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.comp(a^20,
            b^14)) ==> Library.CancellativeResourceAlgebra.valid(a^20) &&
            Library.CancellativeResourceAlgebra.valid(b^14)
          
          
          lemma compId()
            ensures forall a^21: Library.CancellativeResourceAlgebra.T ::
            Library.CancellativeResourceAlgebra.comp(a^21,
            Library.CancellativeResourceAlgebra.id) == a^21
          
          
          lemma compCommute()
            ensures forall a^22: Library.CancellativeResourceAlgebra.T, b^15:
            Library.CancellativeResourceAlgebra.T ::
            Library.CancellativeResourceAlgebra.comp(a^22, b^15) ==
            Library.CancellativeResourceAlgebra.comp(b^15, a^22)
          
          
          lemma compAssoc()
            ensures forall a^23: Library.CancellativeResourceAlgebra.T, b^16:
            Library.CancellativeResourceAlgebra.T, c^3:
            Library.CancellativeResourceAlgebra.T ::
            Library.CancellativeResourceAlgebra.comp(Library.CancellativeResourceAlgebra.comp(a^23,
            b^16), c^3) == Library.CancellativeResourceAlgebra.comp(a^23,
            Library.CancellativeResourceAlgebra.comp(b^16, c^3))
          
          
          lemma idValid()
            ensures Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.id)
          
          
          func fpuAllowed(a^24: Library.CancellativeResourceAlgebra.T, b^17:
                          Library.CancellativeResourceAlgebra.T)
            returns (ret^4: Bool)
          
          
          func valid(a^25: Library.CancellativeResourceAlgebra.T)
            returns (ret^5: Bool)
          
          
          func frame(a^26: Library.CancellativeResourceAlgebra.T, b^18:
                     Library.CancellativeResourceAlgebra.T)
            returns (ret^6: Library.CancellativeResourceAlgebra.T)
          
          
          func comp(a^27: Library.CancellativeResourceAlgebra.T, b^19:
                    Library.CancellativeResourceAlgebra.T)
            returns (ret^7: Library.CancellativeResourceAlgebra.T)
          
          
          val id : Library.CancellativeResourceAlgebra.T
          
          rep type T
          
          lemma frameCompInv()
            ensures forall a^28: Library.CancellativeResourceAlgebra.T, b^20:
            Library.CancellativeResourceAlgebra.T ::
            Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.comp(a^28,
            b^20)) ==>
            Library.CancellativeResourceAlgebra.frame(Library.CancellativeResourceAlgebra.comp(a^28,
            b^20), b^20) == a^28
          
          
          lemma frameReflexive()
            ensures forall a^29: Library.CancellativeResourceAlgebra.T ::
            Library.CancellativeResourceAlgebra.valid(a^29) ==>
            Library.CancellativeResourceAlgebra.frame(a^29, a^29) ==
            Library.CancellativeResourceAlgebra.id
          
        }
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuValid
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compFrameInv
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compValid
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compId
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compCommute
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compAssoc
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.idValid
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameReflexive
[Debug] Typing.process_module: Nat: checking return type interface CancellativeResourceAlgebra : Library.ResourceAlgebra
{
  lemma weak_frameCompInv()
    ensures forall a^14: Library.Nat.T,
b^10:
Library.Nat.T
::
Library.Nat.valid(Library.Nat.comp(a^14,
b^10)) ==>
Library.Nat.valid(Library.Nat.frame(Library.Nat.comp(a^14,
b^10),
b^10))


lemma frameValid()
  ensures forall a^15: Library.Nat.T,
b^11:
Library.Nat.T
::
Library.Nat.valid(Library.Nat.frame(a^15,
b^11)) ==>
Library.Nat.valid(a^15) &&
Library.Nat.valid(b^11)


lemma fpuReflexive()
  ensures forall a^16: Library.Nat.T
::
Library.Nat.valid(a^16) ==>
Library.Nat.fpuAllowed(a^16,
a^16)


lemma fpuValid()
  ensures forall a^17: Library.Nat.T,
b^12:
Library.Nat.T,
c^2:
Library.Nat.T
::
Library.Nat.fpuAllowed(a^17,
b^12) &&
Library.Nat.valid(a^17) &&
Library.Nat.valid(Library.Nat.comp(a^17,
c^2)) ==>
Library.Nat.valid(Library.Nat.comp(b^12,
c^2))


lemma compFrameInv()
  ensures forall a^18: Library.Nat.T,
b^13:
Library.Nat.T
::
Library.Nat.valid(Library.Nat.frame(a^18,
b^13)) ==>
Library.Nat.comp(Library.Nat.frame(a^18,
b^13),
b^13) ==
a^18


lemma frameId()
  ensures forall a^19: Library.Nat.T
::
Library.Nat.frame(a^19,
Library.Nat.id) ==
a^19


lemma compValid()
  ensures forall a^20: Library.Nat.T,
b^14:
Library.Nat.T
::
Library.Nat.valid(Library.Nat.comp(a^20,
b^14)) ==>
Library.Nat.valid(a^20) &&
Library.Nat.valid(b^14)


lemma compId()
  ensures forall a^21: Library.Nat.T
::
Library.Nat.comp(a^21,
Library.Nat.id) ==
a^21


lemma compCommute()
  ensures forall a^22: Library.Nat.T,
b^15:
Library.Nat.T
::
Library.Nat.comp(a^22,
b^15) ==
Library.Nat.comp(b^15,
a^22)


lemma compAssoc()
  ensures forall a^23: Library.Nat.T,
b^16:
Library.Nat.T,
c^3:
Library.Nat.T
::
Library.Nat.comp(Library.Nat.comp(a^23,
b^16),
c^3) ==
Library.Nat.comp(a^23,
Library.Nat.comp(b^16,
c^3))


lemma idValid()
  ensures Library.Nat.valid(Library.Nat.id)


func fpuAllowed(a^24: Library.Nat.T,
b^17:
Library.Nat.T)
returns (ret^4: Bool)


func valid(a^25: Library.Nat.T)
returns (ret^5: Bool)


func frame(a^26: Library.Nat.T,
b^18:
Library.Nat.T)
returns (ret^6: Library.Nat.T)


func comp(a^27: Library.Nat.T,
b^19:
Library.Nat.T)
returns (ret^7: Library.Nat.T)


val id : Library.Nat.T

rep type T

lemma frameCompInv()
  ensures forall a^28: Library.Nat.T,
b^20:
Library.Nat.T
::
Library.Nat.valid(Library.Nat.comp(a^28,
b^20)) ==>
Library.Nat.frame(Library.Nat.comp(a^28,
b^20),
b^20) ==
a^28


lemma frameReflexive()
  ensures forall a^29: Library.Nat.T
::
Library.Nat.valid(a^29) ==>
Library.Nat.frame(a^29,
a^29) ==
Library.Nat.id

}: reified; 
 qual_interface_ident: Library.CancellativeResourceAlgebra 
 mid: CancellativeResourceAlgebra
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.T
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.id
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.frame
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.fpuAllowed
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.frameCompInv
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.frameReflexive
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.idValid
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.compAssoc
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.compCommute
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.compId
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.compValid
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.frameId
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.compFrameInv
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.fpuValid
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.fpuReflexive
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.frameValid
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.weak_frameCompInv
[Debug] Library.ResourceAlgebra
[Debug] Library.CancellativeResourceAlgebra
[Debug] Library.Nat
[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.id
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 4
[Debug] old id n -> -1
[Debug] fresh id n -> 0
[Debug] Keyset: 5
[Debug] old id ret -> 11
[Debug] fresh id ret -> 12
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.valid.n
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.valid.ret^12
[Debug] SymbolTbl.resolve_and_find: n
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat.valid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: n
[Debug] SymbolTbl.resolve.go_forward: scope_entries: n, ret^12
[Debug] SymbolTbl.resolve.go_forward: ids2: n
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: n
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid.n
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: n
[Debug] Rewriter.Symbol.reify var n : Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 5
[Debug] old id a -> 47
[Debug] fresh id a -> 48
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 5
[Debug] old id b -> 34
[Debug] fresh id b -> 35
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 5
[Debug] old id ret -> 12
[Debug] fresh id ret -> 13
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.comp.a^48
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.comp.b^35
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.comp.ret^13
[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = id; qual_ident = Library.Nat.id
[Debug] Rewriter.is_local: qual_ident = Library.Nat.id
[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = id; qual_ident = Library.Nat.id
[Debug] Rewriter.is_local: qual_ident = Library.Nat.id
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Nat.valid
[Debug] Rewriter.is_local: qual_ident = Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Nat.valid
[Debug] Rewriter.is_local: qual_ident = Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: a^48
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat.comp
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^48
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^35, ret^13, a^48
[Debug] SymbolTbl.resolve.go_forward: ids2: a^48
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^48
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp.a^48
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^48
[Debug] Rewriter.Symbol.reify var a^48 : Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.id
[Debug] Rewriter.Symbol.reify val id : Library.Nat.T = 0
[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^35
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat.comp
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^35
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^35, ret^13, a^48
[Debug] SymbolTbl.resolve.go_forward: ids2: b^35
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^35
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp.b^35
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^35
[Debug] Rewriter.Symbol.reify var b^35 : Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^35
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^35
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp.b^35
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^35
[Debug] Rewriter.Symbol.reify var b^35 : Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.id
[Debug] Rewriter.Symbol.reify val id : Library.Nat.T = 0
[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^48
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^48
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp.a^48
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^48
[Debug] Rewriter.Symbol.reify var a^48 : Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.valid
[Debug] Rewriter.Symbol.reify func valid(n: Library.Nat.T)
                                returns (ret^12: Bool)
        {
          n >= 0
        }
[Debug] SymbolTbl.resolve_and_find: a^48
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^48
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp.a^48
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^48
[Debug] Rewriter.Symbol.reify var a^48 : Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.valid
[Debug] Rewriter.Symbol.reify func valid(n: Library.Nat.T)
                                returns (ret^12: Bool)
        {
          n >= 0
        }
[Debug] SymbolTbl.resolve_and_find: b^35
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^35
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp.b^35
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^35
[Debug] Rewriter.Symbol.reify var b^35 : Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.valid
[Debug] Rewriter.Symbol.reify func valid(n: Library.Nat.T)
                                returns (ret^12: Bool)
        {
          n >= 0
        }
[Debug] SymbolTbl.resolve_and_find: a^48
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^48
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp.a^48
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^48
[Debug] Rewriter.Symbol.reify var a^48 : Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^48
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^48
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp.a^48
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^48
[Debug] Rewriter.Symbol.reify var a^48 : Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^35
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^35
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp.b^35
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^35
[Debug] Rewriter.Symbol.reify var b^35 : Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 5
[Debug] old id a -> 48
[Debug] fresh id a -> 49
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 5
[Debug] old id b -> 35
[Debug] fresh id b -> 36
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 5
[Debug] old id ret -> 13
[Debug] fresh id ret -> 14
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.frame.a^49
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.frame.b^36
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.frame.ret^14
[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = id; qual_ident = Library.Nat.id
[Debug] Rewriter.is_local: qual_ident = Library.Nat.id
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Nat.valid
[Debug] Rewriter.is_local: qual_ident = Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Nat.valid
[Debug] Rewriter.is_local: qual_ident = Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: b^36
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat.frame
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^36
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^36, ret^14, a^49
[Debug] SymbolTbl.resolve.go_forward: ids2: b^36
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^36
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frame.b^36
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^36
[Debug] Rewriter.Symbol.reify var b^36 : Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.id
[Debug] Rewriter.Symbol.reify val id : Library.Nat.T = 0
[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^49
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat.frame
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^49
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^36, ret^14, a^49
[Debug] SymbolTbl.resolve.go_forward: ids2: a^49
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^49
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frame.a^49
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^49
[Debug] Rewriter.Symbol.reify var a^49 : Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.valid
[Debug] Rewriter.Symbol.reify func valid(n: Library.Nat.T)
                                returns (ret^12: Bool)
        {
          n >= 0
        }
[Debug] SymbolTbl.resolve_and_find: a^49
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^49
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frame.a^49
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^49
[Debug] Rewriter.Symbol.reify var a^49 : Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.valid
[Debug] Rewriter.Symbol.reify func valid(n: Library.Nat.T)
                                returns (ret^12: Bool)
        {
          n >= 0
        }
[Debug] SymbolTbl.resolve_and_find: b^36
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^36
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frame.b^36
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^36
[Debug] Rewriter.Symbol.reify var b^36 : Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.valid
[Debug] Rewriter.Symbol.reify func valid(n: Library.Nat.T)
                                returns (ret^12: Bool)
        {
          n >= 0
        }
[Debug] SymbolTbl.resolve_and_find: a^49
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^49
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frame.a^49
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^49
[Debug] Rewriter.Symbol.reify var a^49 : Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^49
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^49
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frame.a^49
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^49
[Debug] Rewriter.Symbol.reify var a^49 : Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^36
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^36
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frame.b^36
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^36
[Debug] Rewriter.Symbol.reify var b^36 : Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 5
[Debug] old id a -> 49
[Debug] fresh id a -> 50
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 5
[Debug] old id b -> 36
[Debug] fresh id b -> 37
[Debug] Keyset: 5
[Debug] old id ret -> 14
[Debug] fresh id ret -> 15
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.fpuAllowed.a^50
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.fpuAllowed.b^37
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.fpuAllowed.ret^15
[Debug] Keyset: 5
[Debug] old id c -> 6
[Debug] fresh id c -> 7
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Nat.valid
[Debug] Rewriter.is_local: qual_ident = Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Nat.comp
[Debug] Rewriter.is_local: qual_ident = Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Nat.valid
[Debug] Rewriter.is_local: qual_ident = Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Nat.comp
[Debug] Rewriter.is_local: qual_ident = Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Nat.valid
[Debug] Rewriter.is_local: qual_ident = Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.fpuAllowed.c^7
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.valid
[Debug] Rewriter.Symbol.reify func valid(n: Library.Nat.T)
                                returns (ret^12: Bool)
        {
          n >= 0
        }
[Debug] SymbolTbl.resolve_and_find: a^50
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat.fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^50
[Debug] SymbolTbl.resolve.go_forward: scope_entries: ret^15, a^50, c^7, b^37
[Debug] SymbolTbl.resolve.go_forward: ids2: a^50
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^50
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuAllowed.a^50
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^50
[Debug] Rewriter.Symbol.reify var a^50 : Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.valid
[Debug] Rewriter.Symbol.reify func valid(n: Library.Nat.T)
                                returns (ret^12: Bool)
        {
          n >= 0
        }
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.comp
[Debug] Rewriter.Symbol.reify func comp(a^48: Library.Nat.T, b^35:
                                        Library.Nat.T)
                                returns (ret^13: Library.Nat.T)
        {
          ite(a^48 == Library.Nat.id, b^35, ite(b^35 == Library.Nat.id, a^48,
          ite(Library.Nat.valid(a^48) && Library.Nat.valid(b^35), a^48 +
          b^35, -(1))))
        }
[Debug] SymbolTbl.resolve_and_find: a^50
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^50
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuAllowed.a^50
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^50
[Debug] Rewriter.Symbol.reify var a^50 : Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^7
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat.fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: c^7
[Debug] SymbolTbl.resolve.go_forward: scope_entries: ret^15, a^50, c^7, b^37
[Debug] SymbolTbl.resolve.go_forward: ids2: c^7
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^7
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuAllowed.c^7
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^7
[Debug] Rewriter.Symbol.reify var c^7 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.valid
[Debug] Rewriter.Symbol.reify func valid(n: Library.Nat.T)
                                returns (ret^12: Bool)
        {
          n >= 0
        }
[Debug] SymbolTbl.resolve_and_find: a^50
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^50
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuAllowed.a^50
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^50
[Debug] Rewriter.Symbol.reify var a^50 : Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.valid
[Debug] Rewriter.Symbol.reify func valid(n: Library.Nat.T)
                                returns (ret^12: Bool)
        {
          n >= 0
        }
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.comp
[Debug] Rewriter.Symbol.reify func comp(a^48: Library.Nat.T, b^35:
                                        Library.Nat.T)
                                returns (ret^13: Library.Nat.T)
        {
          ite(a^48 == Library.Nat.id, b^35, ite(b^35 == Library.Nat.id, a^48,
          ite(Library.Nat.valid(a^48) && Library.Nat.valid(b^35), a^48 +
          b^35, -(1))))
        }
[Debug] SymbolTbl.resolve_and_find: b^37
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat.fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^37
[Debug] SymbolTbl.resolve.go_forward: scope_entries: ret^15, a^50, c^7, b^37
[Debug] SymbolTbl.resolve.go_forward: ids2: b^37
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^37
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuAllowed.b^37
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^37
[Debug] Rewriter.Symbol.reify var b^37 : Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^7
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^7
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuAllowed.c^7
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^7
[Debug] Rewriter.Symbol.reify var c^7 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.valid
[Debug] Rewriter.Symbol.reify func valid(n: Library.Nat.T)
                                returns (ret^12: Bool)
        {
          n >= 0
        }
[Debug] SymbolTbl.resolve_and_find: a^50
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^50
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuAllowed.a^50
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^50
[Debug] Rewriter.Symbol.reify var a^50 : Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.valid
[Debug] Rewriter.Symbol.reify func valid(n: Library.Nat.T)
                                returns (ret^12: Bool)
        {
          n >= 0
        }
[Debug] SymbolTbl.resolve_and_find: Library.Nat.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.comp
[Debug] Rewriter.Symbol.reify func comp(a^48: Library.Nat.T, b^35:
                                        Library.Nat.T)
                                returns (ret^13: Library.Nat.T)
        {
          ite(a^48 == Library.Nat.id, b^35, ite(b^35 == Library.Nat.id, a^48,
          ite(Library.Nat.valid(a^48) && Library.Nat.valid(b^35), a^48 +
          b^35, -(1))))
        }
[Debug] SymbolTbl.resolve_and_find: a^50
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^50
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuAllowed.a^50
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^50
[Debug] Rewriter.Symbol.reify var a^50 : Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^7
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^7
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuAllowed.c^7
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^7
[Debug] Rewriter.Symbol.reify var c^7 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.valid
[Debug] Rewriter.Symbol.reify func valid(n: Library.Nat.T)
                                returns (ret^12: Bool)
        {
          n >= 0
        }
[Debug] SymbolTbl.resolve_and_find: a^50
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^50
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuAllowed.a^50
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^50
[Debug] Rewriter.Symbol.reify var a^50 : Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.fpuAllowed
[Debug] Keyset: 5
[Debug] old id a -> 50
[Debug] fresh id a -> 51
[Debug] Keyset: 5
[Debug] old id b -> 37
[Debug] fresh id b -> 38
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Nat.comp
[Debug] Rewriter.is_local: qual_ident = Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Nat.valid
[Debug] Rewriter.is_local: qual_ident = Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Nat.comp
[Debug] Rewriter.is_local: qual_ident = Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.Nat.frame
[Debug] Rewriter.is_local: qual_ident = Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.frameCompInv.a^51
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.frameCompInv.b^38
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.valid
[Debug] Rewriter.Symbol.reify func valid(n: Library.Nat.T)
                                returns (ret^12: Bool)
        {
          n >= 0
        }
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.comp
[Debug] Rewriter.Symbol.reify func comp(a^48: Library.Nat.T, b^35:
                                        Library.Nat.T)
                                returns (ret^13: Library.Nat.T)
        {
          ite(a^48 == Library.Nat.id, b^35, ite(b^35 == Library.Nat.id, a^48,
          ite(Library.Nat.valid(a^48) && Library.Nat.valid(b^35), a^48 +
          b^35, -(1))))
        }
[Debug] SymbolTbl.resolve_and_find: a^51
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat.frameCompInv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^51
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^38, a^51
[Debug] SymbolTbl.resolve.go_forward: ids2: a^51
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^51
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frameCompInv.a^51
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^51
[Debug] Rewriter.Symbol.reify var a^51 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^38
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat.frameCompInv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^38
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^38, a^51
[Debug] SymbolTbl.resolve.go_forward: ids2: b^38
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^38
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frameCompInv.b^38
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^38
[Debug] Rewriter.Symbol.reify var b^38 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.frame
[Debug] Rewriter.Symbol.reify func frame(a^49: Library.Nat.T, b^36:
                                         Library.Nat.T)
                                returns (ret^14: Library.Nat.T)
        {
          ite(b^36 == Library.Nat.id, a^49, ite(Library.Nat.valid(a^49) &&
          Library.Nat.valid(b^36), a^49 - b^36, -(1)))
        }
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.comp
[Debug] Rewriter.Symbol.reify func comp(a^48: Library.Nat.T, b^35:
                                        Library.Nat.T)
                                returns (ret^13: Library.Nat.T)
        {
          ite(a^48 == Library.Nat.id, b^35, ite(b^35 == Library.Nat.id, a^48,
          ite(Library.Nat.valid(a^48) && Library.Nat.valid(b^35), a^48 +
          b^35, -(1))))
        }
[Debug] SymbolTbl.resolve_and_find: a^51
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^51
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frameCompInv.a^51
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^51
[Debug] Rewriter.Symbol.reify var a^51 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^38
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^38
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frameCompInv.b^38
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^38
[Debug] Rewriter.Symbol.reify var b^38 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^38
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^38
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frameCompInv.b^38
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^38
[Debug] Rewriter.Symbol.reify var b^38 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^51
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^51
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frameCompInv.a^51
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^51
[Debug] Rewriter.Symbol.reify var a^51 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.valid
[Debug] Rewriter.Symbol.reify func valid(n: Library.Nat.T)
                                returns (ret^12: Bool)
        {
          n >= 0
        }
[Debug] SymbolTbl.resolve_and_find: Library.Nat.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.comp
[Debug] Rewriter.Symbol.reify func comp(a^48: Library.Nat.T, b^35:
                                        Library.Nat.T)
                                returns (ret^13: Library.Nat.T)
        {
          ite(a^48 == Library.Nat.id, b^35, ite(b^35 == Library.Nat.id, a^48,
          ite(Library.Nat.valid(a^48) && Library.Nat.valid(b^35), a^48 +
          b^35, -(1))))
        }
[Debug] SymbolTbl.resolve_and_find: a^51
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^51
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frameCompInv.a^51
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^51
[Debug] Rewriter.Symbol.reify var a^51 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^38
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^38
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frameCompInv.b^38
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^38
[Debug] Rewriter.Symbol.reify var b^38 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameCompInv
[Debug] Keyset: 5
[Debug] old id a -> 51
[Debug] fresh id a -> 52
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Nat.valid
[Debug] Rewriter.is_local: qual_ident = Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.Nat.frame
[Debug] Rewriter.is_local: qual_ident = Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = id; qual_ident = Library.Nat.id
[Debug] Rewriter.is_local: qual_ident = Library.Nat.id
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.frameReflexive.a^52
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.valid
[Debug] Rewriter.Symbol.reify func valid(n: Library.Nat.T)
                                returns (ret^12: Bool)
        {
          n >= 0
        }
[Debug] SymbolTbl.resolve_and_find: a^52
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat.frameReflexive
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^52
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^52
[Debug] SymbolTbl.resolve.go_forward: ids2: a^52
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^52
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frameReflexive.a^52
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^52
[Debug] Rewriter.Symbol.reify var a^52 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.frame
[Debug] Rewriter.Symbol.reify func frame(a^49: Library.Nat.T, b^36:
                                         Library.Nat.T)
                                returns (ret^14: Library.Nat.T)
        {
          ite(b^36 == Library.Nat.id, a^49, ite(Library.Nat.valid(a^49) &&
          Library.Nat.valid(b^36), a^49 - b^36, -(1)))
        }
[Debug] SymbolTbl.resolve_and_find: a^52
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^52
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frameReflexive.a^52
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^52
[Debug] Rewriter.Symbol.reify var a^52 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^52
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^52
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frameReflexive.a^52
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^52
[Debug] Rewriter.Symbol.reify var a^52 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.id
[Debug] Rewriter.Symbol.reify val id : Library.Nat.T = 0
[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.valid
[Debug] Rewriter.Symbol.reify func valid(n: Library.Nat.T)
                                returns (ret^12: Bool)
        {
          n >= 0
        }
[Debug] SymbolTbl.resolve_and_find: a^52
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^52
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frameReflexive.a^52
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^52
[Debug] Rewriter.Symbol.reify var a^52 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameReflexive
[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = id; qual_ident = Library.Nat.id
[Debug] Rewriter.is_local: qual_ident = Library.Nat.id
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Nat.valid
[Debug] Rewriter.is_local: qual_ident = Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.valid
[Debug] Rewriter.Symbol.reify func valid(n: Library.Nat.T)
                                returns (ret^12: Bool)
        {
          n >= 0
        }
[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.id
[Debug] Rewriter.Symbol.reify val id : Library.Nat.T = 0
[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.idValid
[Debug] Keyset: 5
[Debug] old id a -> 52
[Debug] fresh id a -> 53
[Debug] Keyset: 5
[Debug] old id b -> 38
[Debug] fresh id b -> 39
[Debug] Keyset: 5
[Debug] old id c -> 7
[Debug] fresh id c -> 8
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Nat.comp
[Debug] Rewriter.is_local: qual_ident = Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Nat.comp
[Debug] Rewriter.is_local: qual_ident = Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Nat.comp
[Debug] Rewriter.is_local: qual_ident = Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Nat.comp
[Debug] Rewriter.is_local: qual_ident = Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.compAssoc.a^53
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.compAssoc.b^39
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.compAssoc.c^8
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.comp
[Debug] Rewriter.Symbol.reify func comp(a^48: Library.Nat.T, b^35:
                                        Library.Nat.T)
                                returns (ret^13: Library.Nat.T)
        {
          ite(a^48 == Library.Nat.id, b^35, ite(b^35 == Library.Nat.id, a^48,
          ite(Library.Nat.valid(a^48) && Library.Nat.valid(b^35), a^48 +
          b^35, -(1))))
        }
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.comp
[Debug] Rewriter.Symbol.reify func comp(a^48: Library.Nat.T, b^35:
                                        Library.Nat.T)
                                returns (ret^13: Library.Nat.T)
        {
          ite(a^48 == Library.Nat.id, b^35, ite(b^35 == Library.Nat.id, a^48,
          ite(Library.Nat.valid(a^48) && Library.Nat.valid(b^35), a^48 +
          b^35, -(1))))
        }
[Debug] SymbolTbl.resolve_and_find: a^53
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat.compAssoc
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^53
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^39, a^53, c^8
[Debug] SymbolTbl.resolve.go_forward: ids2: a^53
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^53
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.compAssoc.a^53
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^53
[Debug] Rewriter.Symbol.reify var a^53 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^39
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat.compAssoc
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^39
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^39, a^53, c^8
[Debug] SymbolTbl.resolve.go_forward: ids2: b^39
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^39
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.compAssoc.b^39
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^39
[Debug] Rewriter.Symbol.reify var b^39 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^8
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat.compAssoc
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: c^8
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^39, a^53, c^8
[Debug] SymbolTbl.resolve.go_forward: ids2: c^8
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^8
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.compAssoc.c^8
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^8
[Debug] Rewriter.Symbol.reify var c^8 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.comp
[Debug] Rewriter.Symbol.reify func comp(a^48: Library.Nat.T, b^35:
                                        Library.Nat.T)
                                returns (ret^13: Library.Nat.T)
        {
          ite(a^48 == Library.Nat.id, b^35, ite(b^35 == Library.Nat.id, a^48,
          ite(Library.Nat.valid(a^48) && Library.Nat.valid(b^35), a^48 +
          b^35, -(1))))
        }
[Debug] SymbolTbl.resolve_and_find: a^53
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^53
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.compAssoc.a^53
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^53
[Debug] Rewriter.Symbol.reify var a^53 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.comp
[Debug] Rewriter.Symbol.reify func comp(a^48: Library.Nat.T, b^35:
                                        Library.Nat.T)
                                returns (ret^13: Library.Nat.T)
        {
          ite(a^48 == Library.Nat.id, b^35, ite(b^35 == Library.Nat.id, a^48,
          ite(Library.Nat.valid(a^48) && Library.Nat.valid(b^35), a^48 +
          b^35, -(1))))
        }
[Debug] SymbolTbl.resolve_and_find: b^39
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^39
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.compAssoc.b^39
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^39
[Debug] Rewriter.Symbol.reify var b^39 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^8
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^8
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.compAssoc.c^8
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^8
[Debug] Rewriter.Symbol.reify var c^8 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compAssoc
[Debug] Keyset: 5
[Debug] old id a -> 53
[Debug] fresh id a -> 54
[Debug] Keyset: 5
[Debug] old id b -> 39
[Debug] fresh id b -> 40
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Nat.comp
[Debug] Rewriter.is_local: qual_ident = Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Nat.comp
[Debug] Rewriter.is_local: qual_ident = Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.compCommute.a^54
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.compCommute.b^40
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.comp
[Debug] Rewriter.Symbol.reify func comp(a^48: Library.Nat.T, b^35:
                                        Library.Nat.T)
                                returns (ret^13: Library.Nat.T)
        {
          ite(a^48 == Library.Nat.id, b^35, ite(b^35 == Library.Nat.id, a^48,
          ite(Library.Nat.valid(a^48) && Library.Nat.valid(b^35), a^48 +
          b^35, -(1))))
        }
[Debug] SymbolTbl.resolve_and_find: a^54
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat.compCommute
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^54
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^54, b^40
[Debug] SymbolTbl.resolve.go_forward: ids2: a^54
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^54
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.compCommute.a^54
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^54
[Debug] Rewriter.Symbol.reify var a^54 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^40
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat.compCommute
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^40
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^54, b^40
[Debug] SymbolTbl.resolve.go_forward: ids2: b^40
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^40
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.compCommute.b^40
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^40
[Debug] Rewriter.Symbol.reify var b^40 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.comp
[Debug] Rewriter.Symbol.reify func comp(a^48: Library.Nat.T, b^35:
                                        Library.Nat.T)
                                returns (ret^13: Library.Nat.T)
        {
          ite(a^48 == Library.Nat.id, b^35, ite(b^35 == Library.Nat.id, a^48,
          ite(Library.Nat.valid(a^48) && Library.Nat.valid(b^35), a^48 +
          b^35, -(1))))
        }
[Debug] SymbolTbl.resolve_and_find: b^40
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^40
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.compCommute.b^40
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^40
[Debug] Rewriter.Symbol.reify var b^40 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^54
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^54
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.compCommute.a^54
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^54
[Debug] Rewriter.Symbol.reify var a^54 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compCommute
[Debug] Keyset: 5
[Debug] old id a -> 54
[Debug] fresh id a -> 55
[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = id; qual_ident = Library.Nat.id
[Debug] Rewriter.is_local: qual_ident = Library.Nat.id
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Nat.comp
[Debug] Rewriter.is_local: qual_ident = Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.compId.a^55
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.comp
[Debug] Rewriter.Symbol.reify func comp(a^48: Library.Nat.T, b^35:
                                        Library.Nat.T)
                                returns (ret^13: Library.Nat.T)
        {
          ite(a^48 == Library.Nat.id, b^35, ite(b^35 == Library.Nat.id, a^48,
          ite(Library.Nat.valid(a^48) && Library.Nat.valid(b^35), a^48 +
          b^35, -(1))))
        }
[Debug] SymbolTbl.resolve_and_find: a^55
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat.compId
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^55
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^55
[Debug] SymbolTbl.resolve.go_forward: ids2: a^55
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^55
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.compId.a^55
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^55
[Debug] Rewriter.Symbol.reify var a^55 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.id
[Debug] Rewriter.Symbol.reify val id : Library.Nat.T = 0
[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^55
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^55
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.compId.a^55
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^55
[Debug] Rewriter.Symbol.reify var a^55 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compId
[Debug] Keyset: 5
[Debug] old id a -> 55
[Debug] fresh id a -> 56
[Debug] Keyset: 5
[Debug] old id b -> 40
[Debug] fresh id b -> 41
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Nat.comp
[Debug] Rewriter.is_local: qual_ident = Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Nat.valid
[Debug] Rewriter.is_local: qual_ident = Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Nat.valid
[Debug] Rewriter.is_local: qual_ident = Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Nat.valid
[Debug] Rewriter.is_local: qual_ident = Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.compValid.a^56
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.compValid.b^41
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.valid
[Debug] Rewriter.Symbol.reify func valid(n: Library.Nat.T)
                                returns (ret^12: Bool)
        {
          n >= 0
        }
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.comp
[Debug] Rewriter.Symbol.reify func comp(a^48: Library.Nat.T, b^35:
                                        Library.Nat.T)
                                returns (ret^13: Library.Nat.T)
        {
          ite(a^48 == Library.Nat.id, b^35, ite(b^35 == Library.Nat.id, a^48,
          ite(Library.Nat.valid(a^48) && Library.Nat.valid(b^35), a^48 +
          b^35, -(1))))
        }
[Debug] SymbolTbl.resolve_and_find: a^56
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat.compValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^56
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^56, b^41
[Debug] SymbolTbl.resolve.go_forward: ids2: a^56
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^56
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.compValid.a^56
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^56
[Debug] Rewriter.Symbol.reify var a^56 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^41
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat.compValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^41
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^56, b^41
[Debug] SymbolTbl.resolve.go_forward: ids2: b^41
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^41
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.compValid.b^41
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^41
[Debug] Rewriter.Symbol.reify var b^41 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.valid
[Debug] Rewriter.Symbol.reify func valid(n: Library.Nat.T)
                                returns (ret^12: Bool)
        {
          n >= 0
        }
[Debug] SymbolTbl.resolve_and_find: a^56
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^56
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.compValid.a^56
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^56
[Debug] Rewriter.Symbol.reify var a^56 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.valid
[Debug] Rewriter.Symbol.reify func valid(n: Library.Nat.T)
                                returns (ret^12: Bool)
        {
          n >= 0
        }
[Debug] SymbolTbl.resolve_and_find: b^41
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^41
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.compValid.b^41
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^41
[Debug] Rewriter.Symbol.reify var b^41 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.valid
[Debug] Rewriter.Symbol.reify func valid(n: Library.Nat.T)
                                returns (ret^12: Bool)
        {
          n >= 0
        }
[Debug] SymbolTbl.resolve_and_find: a^56
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^56
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.compValid.a^56
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^56
[Debug] Rewriter.Symbol.reify var a^56 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.valid
[Debug] Rewriter.Symbol.reify func valid(n: Library.Nat.T)
                                returns (ret^12: Bool)
        {
          n >= 0
        }
[Debug] SymbolTbl.resolve_and_find: Library.Nat.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.comp
[Debug] Rewriter.Symbol.reify func comp(a^48: Library.Nat.T, b^35:
                                        Library.Nat.T)
                                returns (ret^13: Library.Nat.T)
        {
          ite(a^48 == Library.Nat.id, b^35, ite(b^35 == Library.Nat.id, a^48,
          ite(Library.Nat.valid(a^48) && Library.Nat.valid(b^35), a^48 +
          b^35, -(1))))
        }
[Debug] SymbolTbl.resolve_and_find: a^56
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^56
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.compValid.a^56
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^56
[Debug] Rewriter.Symbol.reify var a^56 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^41
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^41
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.compValid.b^41
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^41
[Debug] Rewriter.Symbol.reify var b^41 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compValid
[Debug] Keyset: 5
[Debug] old id a -> 56
[Debug] fresh id a -> 57
[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = id; qual_ident = Library.Nat.id
[Debug] Rewriter.is_local: qual_ident = Library.Nat.id
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.Nat.frame
[Debug] Rewriter.is_local: qual_ident = Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.frameId.a^57
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.frame
[Debug] Rewriter.Symbol.reify func frame(a^49: Library.Nat.T, b^36:
                                         Library.Nat.T)
                                returns (ret^14: Library.Nat.T)
        {
          ite(b^36 == Library.Nat.id, a^49, ite(Library.Nat.valid(a^49) &&
          Library.Nat.valid(b^36), a^49 - b^36, -(1)))
        }
[Debug] SymbolTbl.resolve_and_find: a^57
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat.frameId
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^57
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^57
[Debug] SymbolTbl.resolve.go_forward: ids2: a^57
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^57
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frameId.a^57
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^57
[Debug] Rewriter.Symbol.reify var a^57 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.id
[Debug] Rewriter.Symbol.reify val id : Library.Nat.T = 0
[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^57
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^57
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frameId.a^57
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^57
[Debug] Rewriter.Symbol.reify var a^57 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameId
[Debug] Keyset: 5
[Debug] old id a -> 57
[Debug] fresh id a -> 58
[Debug] Keyset: 5
[Debug] old id b -> 41
[Debug] fresh id b -> 42
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.Nat.frame
[Debug] Rewriter.is_local: qual_ident = Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Nat.valid
[Debug] Rewriter.is_local: qual_ident = Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.Nat.frame
[Debug] Rewriter.is_local: qual_ident = Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Nat.comp
[Debug] Rewriter.is_local: qual_ident = Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.compFrameInv.a^58
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.compFrameInv.b^42
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.valid
[Debug] Rewriter.Symbol.reify func valid(n: Library.Nat.T)
                                returns (ret^12: Bool)
        {
          n >= 0
        }
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.frame
[Debug] Rewriter.Symbol.reify func frame(a^49: Library.Nat.T, b^36:
                                         Library.Nat.T)
                                returns (ret^14: Library.Nat.T)
        {
          ite(b^36 == Library.Nat.id, a^49, ite(Library.Nat.valid(a^49) &&
          Library.Nat.valid(b^36), a^49 - b^36, -(1)))
        }
[Debug] SymbolTbl.resolve_and_find: a^58
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat.compFrameInv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^58
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^42, a^58
[Debug] SymbolTbl.resolve.go_forward: ids2: a^58
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^58
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.compFrameInv.a^58
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^58
[Debug] Rewriter.Symbol.reify var a^58 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^42
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat.compFrameInv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^42
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^42, a^58
[Debug] SymbolTbl.resolve.go_forward: ids2: b^42
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^42
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.compFrameInv.b^42
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^42
[Debug] Rewriter.Symbol.reify var b^42 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.comp
[Debug] Rewriter.Symbol.reify func comp(a^48: Library.Nat.T, b^35:
                                        Library.Nat.T)
                                returns (ret^13: Library.Nat.T)
        {
          ite(a^48 == Library.Nat.id, b^35, ite(b^35 == Library.Nat.id, a^48,
          ite(Library.Nat.valid(a^48) && Library.Nat.valid(b^35), a^48 +
          b^35, -(1))))
        }
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.frame
[Debug] Rewriter.Symbol.reify func frame(a^49: Library.Nat.T, b^36:
                                         Library.Nat.T)
                                returns (ret^14: Library.Nat.T)
        {
          ite(b^36 == Library.Nat.id, a^49, ite(Library.Nat.valid(a^49) &&
          Library.Nat.valid(b^36), a^49 - b^36, -(1)))
        }
[Debug] SymbolTbl.resolve_and_find: a^58
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^58
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.compFrameInv.a^58
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^58
[Debug] Rewriter.Symbol.reify var a^58 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^42
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^42
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.compFrameInv.b^42
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^42
[Debug] Rewriter.Symbol.reify var b^42 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^42
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^42
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.compFrameInv.b^42
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^42
[Debug] Rewriter.Symbol.reify var b^42 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^58
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^58
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.compFrameInv.a^58
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^58
[Debug] Rewriter.Symbol.reify var a^58 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.valid
[Debug] Rewriter.Symbol.reify func valid(n: Library.Nat.T)
                                returns (ret^12: Bool)
        {
          n >= 0
        }
[Debug] SymbolTbl.resolve_and_find: Library.Nat.frame
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.frame
[Debug] Rewriter.Symbol.reify func frame(a^49: Library.Nat.T, b^36:
                                         Library.Nat.T)
                                returns (ret^14: Library.Nat.T)
        {
          ite(b^36 == Library.Nat.id, a^49, ite(Library.Nat.valid(a^49) &&
          Library.Nat.valid(b^36), a^49 - b^36, -(1)))
        }
[Debug] SymbolTbl.resolve_and_find: a^58
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^58
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.compFrameInv.a^58
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^58
[Debug] Rewriter.Symbol.reify var a^58 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^42
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^42
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.compFrameInv.b^42
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^42
[Debug] Rewriter.Symbol.reify var b^42 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compFrameInv
[Debug] Keyset: 5
[Debug] old id a -> 58
[Debug] fresh id a -> 59
[Debug] Keyset: 5
[Debug] old id b -> 42
[Debug] fresh id b -> 43
[Debug] Keyset: 5
[Debug] old id c -> 8
[Debug] fresh id c -> 9
[Debug] SymbolTbl.resolve_and_find: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = fpuAllowed; qual_ident = Library.Nat.fpuAllowed
[Debug] Rewriter.is_local: qual_ident = Library.Nat.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Nat.valid
[Debug] Rewriter.is_local: qual_ident = Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Nat.comp
[Debug] Rewriter.is_local: qual_ident = Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Nat.valid
[Debug] Rewriter.is_local: qual_ident = Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Nat.comp
[Debug] Rewriter.is_local: qual_ident = Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Nat.valid
[Debug] Rewriter.is_local: qual_ident = Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.fpuValid.a^59
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.fpuValid.b^43
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.fpuValid.c^9
[Debug] SymbolTbl.resolve_and_find: fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^50: Library.Nat.T, b^37:
                                              Library.Nat.T)
                                returns (ret^15: Bool)
        {
          forall c^7: Library.Nat.T :: Library.Nat.valid(a^50) &&
          Library.Nat.valid(Library.Nat.comp(a^50, c^7)) ==>
          Library.Nat.valid(Library.Nat.comp(b^37, c^7))
        }
[Debug] SymbolTbl.resolve_and_find: a^59
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat.fpuValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^59
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^43, c^9, a^59
[Debug] SymbolTbl.resolve.go_forward: ids2: a^59
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^59
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuValid.a^59
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^59
[Debug] Rewriter.Symbol.reify var a^59 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^43
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat.fpuValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^43
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^43, c^9, a^59
[Debug] SymbolTbl.resolve.go_forward: ids2: b^43
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^43
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuValid.b^43
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^43
[Debug] Rewriter.Symbol.reify var b^43 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.valid
[Debug] Rewriter.Symbol.reify func valid(n: Library.Nat.T)
                                returns (ret^12: Bool)
        {
          n >= 0
        }
[Debug] SymbolTbl.resolve_and_find: a^59
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^59
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuValid.a^59
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^59
[Debug] Rewriter.Symbol.reify var a^59 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^50: Library.Nat.T, b^37:
                                              Library.Nat.T)
                                returns (ret^15: Bool)
        {
          forall c^7: Library.Nat.T :: Library.Nat.valid(a^50) &&
          Library.Nat.valid(Library.Nat.comp(a^50, c^7)) ==>
          Library.Nat.valid(Library.Nat.comp(b^37, c^7))
        }
[Debug] SymbolTbl.resolve_and_find: a^59
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^59
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuValid.a^59
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^59
[Debug] Rewriter.Symbol.reify var a^59 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^43
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^43
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuValid.b^43
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^43
[Debug] Rewriter.Symbol.reify var b^43 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.valid
[Debug] Rewriter.Symbol.reify func valid(n: Library.Nat.T)
                                returns (ret^12: Bool)
        {
          n >= 0
        }
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.comp
[Debug] Rewriter.Symbol.reify func comp(a^48: Library.Nat.T, b^35:
                                        Library.Nat.T)
                                returns (ret^13: Library.Nat.T)
        {
          ite(a^48 == Library.Nat.id, b^35, ite(b^35 == Library.Nat.id, a^48,
          ite(Library.Nat.valid(a^48) && Library.Nat.valid(b^35), a^48 +
          b^35, -(1))))
        }
[Debug] SymbolTbl.resolve_and_find: a^59
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^59
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuValid.a^59
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^59
[Debug] Rewriter.Symbol.reify var a^59 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^9
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat.fpuValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: c^9
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^43, c^9, a^59
[Debug] SymbolTbl.resolve.go_forward: ids2: c^9
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^9
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuValid.c^9
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^9
[Debug] Rewriter.Symbol.reify var c^9 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^50: Library.Nat.T, b^37:
                                              Library.Nat.T)
                                returns (ret^15: Bool)
        {
          forall c^7: Library.Nat.T :: Library.Nat.valid(a^50) &&
          Library.Nat.valid(Library.Nat.comp(a^50, c^7)) ==>
          Library.Nat.valid(Library.Nat.comp(b^37, c^7))
        }
[Debug] SymbolTbl.resolve_and_find: a^59
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^59
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuValid.a^59
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^59
[Debug] Rewriter.Symbol.reify var a^59 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^43
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^43
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuValid.b^43
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^43
[Debug] Rewriter.Symbol.reify var b^43 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.valid
[Debug] Rewriter.Symbol.reify func valid(n: Library.Nat.T)
                                returns (ret^12: Bool)
        {
          n >= 0
        }
[Debug] SymbolTbl.resolve_and_find: a^59
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^59
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuValid.a^59
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^59
[Debug] Rewriter.Symbol.reify var a^59 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^50: Library.Nat.T, b^37:
                                              Library.Nat.T)
                                returns (ret^15: Bool)
        {
          forall c^7: Library.Nat.T :: Library.Nat.valid(a^50) &&
          Library.Nat.valid(Library.Nat.comp(a^50, c^7)) ==>
          Library.Nat.valid(Library.Nat.comp(b^37, c^7))
        }
[Debug] SymbolTbl.resolve_and_find: a^59
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^59
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuValid.a^59
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^59
[Debug] Rewriter.Symbol.reify var a^59 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^43
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^43
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuValid.b^43
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^43
[Debug] Rewriter.Symbol.reify var b^43 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.valid
[Debug] Rewriter.Symbol.reify func valid(n: Library.Nat.T)
                                returns (ret^12: Bool)
        {
          n >= 0
        }
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.comp
[Debug] Rewriter.Symbol.reify func comp(a^48: Library.Nat.T, b^35:
                                        Library.Nat.T)
                                returns (ret^13: Library.Nat.T)
        {
          ite(a^48 == Library.Nat.id, b^35, ite(b^35 == Library.Nat.id, a^48,
          ite(Library.Nat.valid(a^48) && Library.Nat.valid(b^35), a^48 +
          b^35, -(1))))
        }
[Debug] SymbolTbl.resolve_and_find: b^43
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^43
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuValid.b^43
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^43
[Debug] Rewriter.Symbol.reify var b^43 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^9
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^9
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuValid.c^9
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^9
[Debug] Rewriter.Symbol.reify var c^9 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^50: Library.Nat.T, b^37:
                                              Library.Nat.T)
                                returns (ret^15: Bool)
        {
          forall c^7: Library.Nat.T :: Library.Nat.valid(a^50) &&
          Library.Nat.valid(Library.Nat.comp(a^50, c^7)) ==>
          Library.Nat.valid(Library.Nat.comp(b^37, c^7))
        }
[Debug] SymbolTbl.resolve_and_find: a^59
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^59
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuValid.a^59
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^59
[Debug] Rewriter.Symbol.reify var a^59 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^43
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^43
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuValid.b^43
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^43
[Debug] Rewriter.Symbol.reify var b^43 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.valid
[Debug] Rewriter.Symbol.reify func valid(n: Library.Nat.T)
                                returns (ret^12: Bool)
        {
          n >= 0
        }
[Debug] SymbolTbl.resolve_and_find: a^59
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^59
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuValid.a^59
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^59
[Debug] Rewriter.Symbol.reify var a^59 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^50: Library.Nat.T, b^37:
                                              Library.Nat.T)
                                returns (ret^15: Bool)
        {
          forall c^7: Library.Nat.T :: Library.Nat.valid(a^50) &&
          Library.Nat.valid(Library.Nat.comp(a^50, c^7)) ==>
          Library.Nat.valid(Library.Nat.comp(b^37, c^7))
        }
[Debug] SymbolTbl.resolve_and_find: a^59
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^59
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuValid.a^59
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^59
[Debug] Rewriter.Symbol.reify var a^59 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^43
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^43
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuValid.b^43
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^43
[Debug] Rewriter.Symbol.reify var b^43 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.valid
[Debug] Rewriter.Symbol.reify func valid(n: Library.Nat.T)
                                returns (ret^12: Bool)
        {
          n >= 0
        }
[Debug] SymbolTbl.resolve_and_find: Library.Nat.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.comp
[Debug] Rewriter.Symbol.reify func comp(a^48: Library.Nat.T, b^35:
                                        Library.Nat.T)
                                returns (ret^13: Library.Nat.T)
        {
          ite(a^48 == Library.Nat.id, b^35, ite(b^35 == Library.Nat.id, a^48,
          ite(Library.Nat.valid(a^48) && Library.Nat.valid(b^35), a^48 +
          b^35, -(1))))
        }
[Debug] SymbolTbl.resolve_and_find: a^59
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^59
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuValid.a^59
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^59
[Debug] Rewriter.Symbol.reify var a^59 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^9
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^9
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuValid.c^9
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^9
[Debug] Rewriter.Symbol.reify var c^9 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^50: Library.Nat.T, b^37:
                                              Library.Nat.T)
                                returns (ret^15: Bool)
        {
          forall c^7: Library.Nat.T :: Library.Nat.valid(a^50) &&
          Library.Nat.valid(Library.Nat.comp(a^50, c^7)) ==>
          Library.Nat.valid(Library.Nat.comp(b^37, c^7))
        }
[Debug] SymbolTbl.resolve_and_find: a^59
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^59
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuValid.a^59
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^59
[Debug] Rewriter.Symbol.reify var a^59 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^43
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^43
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuValid.b^43
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^43
[Debug] Rewriter.Symbol.reify var b^43 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.valid
[Debug] Rewriter.Symbol.reify func valid(n: Library.Nat.T)
                                returns (ret^12: Bool)
        {
          n >= 0
        }
[Debug] SymbolTbl.resolve_and_find: a^59
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^59
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuValid.a^59
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^59
[Debug] Rewriter.Symbol.reify var a^59 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^50: Library.Nat.T, b^37:
                                              Library.Nat.T)
                                returns (ret^15: Bool)
        {
          forall c^7: Library.Nat.T :: Library.Nat.valid(a^50) &&
          Library.Nat.valid(Library.Nat.comp(a^50, c^7)) ==>
          Library.Nat.valid(Library.Nat.comp(b^37, c^7))
        }
[Debug] SymbolTbl.resolve_and_find: a^59
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^59
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuValid.a^59
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^59
[Debug] Rewriter.Symbol.reify var a^59 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^43
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^43
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuValid.b^43
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^43
[Debug] Rewriter.Symbol.reify var b^43 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.fpuValid
[Debug] Keyset: 5
[Debug] old id a -> 59
[Debug] fresh id a -> 60
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Nat.valid
[Debug] Rewriter.is_local: qual_ident = Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = fpuAllowed; qual_ident = Library.Nat.fpuAllowed
[Debug] Rewriter.is_local: qual_ident = Library.Nat.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.fpuReflexive.a^60
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.valid
[Debug] Rewriter.Symbol.reify func valid(n: Library.Nat.T)
                                returns (ret^12: Bool)
        {
          n >= 0
        }
[Debug] SymbolTbl.resolve_and_find: a^60
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat.fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^60
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^60
[Debug] SymbolTbl.resolve.go_forward: ids2: a^60
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^60
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuReflexive.a^60
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^60
[Debug] Rewriter.Symbol.reify var a^60 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^50: Library.Nat.T, b^37:
                                              Library.Nat.T)
                                returns (ret^15: Bool)
        {
          forall c^7: Library.Nat.T :: Library.Nat.valid(a^50) &&
          Library.Nat.valid(Library.Nat.comp(a^50, c^7)) ==>
          Library.Nat.valid(Library.Nat.comp(b^37, c^7))
        }
[Debug] SymbolTbl.resolve_and_find: a^60
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^60
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuReflexive.a^60
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^60
[Debug] Rewriter.Symbol.reify var a^60 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^60
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^60
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuReflexive.a^60
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^60
[Debug] Rewriter.Symbol.reify var a^60 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.valid
[Debug] Rewriter.Symbol.reify func valid(n: Library.Nat.T)
                                returns (ret^12: Bool)
        {
          n >= 0
        }
[Debug] SymbolTbl.resolve_and_find: a^60
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^60
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuReflexive.a^60
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^60
[Debug] Rewriter.Symbol.reify var a^60 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.fpuReflexive
[Debug] Keyset: 5
[Debug] old id a -> 60
[Debug] fresh id a -> 61
[Debug] Keyset: 5
[Debug] old id b -> 43
[Debug] fresh id b -> 44
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.Nat.frame
[Debug] Rewriter.is_local: qual_ident = Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Nat.valid
[Debug] Rewriter.is_local: qual_ident = Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Nat.valid
[Debug] Rewriter.is_local: qual_ident = Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Nat.valid
[Debug] Rewriter.is_local: qual_ident = Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.frameValid.a^61
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.frameValid.b^44
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.valid
[Debug] Rewriter.Symbol.reify func valid(n: Library.Nat.T)
                                returns (ret^12: Bool)
        {
          n >= 0
        }
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.frame
[Debug] Rewriter.Symbol.reify func frame(a^49: Library.Nat.T, b^36:
                                         Library.Nat.T)
                                returns (ret^14: Library.Nat.T)
        {
          ite(b^36 == Library.Nat.id, a^49, ite(Library.Nat.valid(a^49) &&
          Library.Nat.valid(b^36), a^49 - b^36, -(1)))
        }
[Debug] SymbolTbl.resolve_and_find: a^61
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat.frameValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^61
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^61, b^44
[Debug] SymbolTbl.resolve.go_forward: ids2: a^61
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^61
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frameValid.a^61
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^61
[Debug] Rewriter.Symbol.reify var a^61 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^44
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat.frameValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^44
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^61, b^44
[Debug] SymbolTbl.resolve.go_forward: ids2: b^44
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^44
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frameValid.b^44
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^44
[Debug] Rewriter.Symbol.reify var b^44 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.valid
[Debug] Rewriter.Symbol.reify func valid(n: Library.Nat.T)
                                returns (ret^12: Bool)
        {
          n >= 0
        }
[Debug] SymbolTbl.resolve_and_find: a^61
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^61
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frameValid.a^61
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^61
[Debug] Rewriter.Symbol.reify var a^61 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.valid
[Debug] Rewriter.Symbol.reify func valid(n: Library.Nat.T)
                                returns (ret^12: Bool)
        {
          n >= 0
        }
[Debug] SymbolTbl.resolve_and_find: b^44
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^44
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frameValid.b^44
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^44
[Debug] Rewriter.Symbol.reify var b^44 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.valid
[Debug] Rewriter.Symbol.reify func valid(n: Library.Nat.T)
                                returns (ret^12: Bool)
        {
          n >= 0
        }
[Debug] SymbolTbl.resolve_and_find: a^61
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^61
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frameValid.a^61
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^61
[Debug] Rewriter.Symbol.reify var a^61 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.valid
[Debug] Rewriter.Symbol.reify func valid(n: Library.Nat.T)
                                returns (ret^12: Bool)
        {
          n >= 0
        }
[Debug] SymbolTbl.resolve_and_find: Library.Nat.frame
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.frame
[Debug] Rewriter.Symbol.reify func frame(a^49: Library.Nat.T, b^36:
                                         Library.Nat.T)
                                returns (ret^14: Library.Nat.T)
        {
          ite(b^36 == Library.Nat.id, a^49, ite(Library.Nat.valid(a^49) &&
          Library.Nat.valid(b^36), a^49 - b^36, -(1)))
        }
[Debug] SymbolTbl.resolve_and_find: a^61
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^61
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frameValid.a^61
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^61
[Debug] Rewriter.Symbol.reify var a^61 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^44
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^44
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frameValid.b^44
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^44
[Debug] Rewriter.Symbol.reify var b^44 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameValid
[Debug] Keyset: 5
[Debug] old id a -> 61
[Debug] fresh id a -> 62
[Debug] Keyset: 5
[Debug] old id b -> 44
[Debug] fresh id b -> 45
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Nat.comp
[Debug] Rewriter.is_local: qual_ident = Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Nat.valid
[Debug] Rewriter.is_local: qual_ident = Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Nat.comp
[Debug] Rewriter.is_local: qual_ident = Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.Nat.frame
[Debug] Rewriter.is_local: qual_ident = Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Nat.valid
[Debug] Rewriter.is_local: qual_ident = Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.weak_frameCompInv.a^62
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Nat.weak_frameCompInv.b^45
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.valid
[Debug] Rewriter.Symbol.reify func valid(n: Library.Nat.T)
                                returns (ret^12: Bool)
        {
          n >= 0
        }
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.comp
[Debug] Rewriter.Symbol.reify func comp(a^48: Library.Nat.T, b^35:
                                        Library.Nat.T)
                                returns (ret^13: Library.Nat.T)
        {
          ite(a^48 == Library.Nat.id, b^35, ite(b^35 == Library.Nat.id, a^48,
          ite(Library.Nat.valid(a^48) && Library.Nat.valid(b^35), a^48 +
          b^35, -(1))))
        }
[Debug] SymbolTbl.resolve_and_find: a^62
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat.weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^62
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^45, a^62
[Debug] SymbolTbl.resolve.go_forward: ids2: a^62
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^62
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.weak_frameCompInv.a^62
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^62
[Debug] Rewriter.Symbol.reify var a^62 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^45
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat.weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^45
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^45, a^62
[Debug] SymbolTbl.resolve.go_forward: ids2: b^45
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^45
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.weak_frameCompInv.b^45
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^45
[Debug] Rewriter.Symbol.reify var b^45 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.valid
[Debug] Rewriter.Symbol.reify func valid(n: Library.Nat.T)
                                returns (ret^12: Bool)
        {
          n >= 0
        }
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.frame
[Debug] Rewriter.Symbol.reify func frame(a^49: Library.Nat.T, b^36:
                                         Library.Nat.T)
                                returns (ret^14: Library.Nat.T)
        {
          ite(b^36 == Library.Nat.id, a^49, ite(Library.Nat.valid(a^49) &&
          Library.Nat.valid(b^36), a^49 - b^36, -(1)))
        }
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.comp
[Debug] Rewriter.Symbol.reify func comp(a^48: Library.Nat.T, b^35:
                                        Library.Nat.T)
                                returns (ret^13: Library.Nat.T)
        {
          ite(a^48 == Library.Nat.id, b^35, ite(b^35 == Library.Nat.id, a^48,
          ite(Library.Nat.valid(a^48) && Library.Nat.valid(b^35), a^48 +
          b^35, -(1))))
        }
[Debug] SymbolTbl.resolve_and_find: a^62
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^62
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.weak_frameCompInv.a^62
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^62
[Debug] Rewriter.Symbol.reify var a^62 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^45
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^45
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.weak_frameCompInv.b^45
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^45
[Debug] Rewriter.Symbol.reify var b^45 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^45
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^45
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.weak_frameCompInv.b^45
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^45
[Debug] Rewriter.Symbol.reify var b^45 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.valid
[Debug] Rewriter.Symbol.reify func valid(n: Library.Nat.T)
                                returns (ret^12: Bool)
        {
          n >= 0
        }
[Debug] SymbolTbl.resolve_and_find: Library.Nat.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Nat, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Nat.comp
[Debug] Rewriter.Symbol.reify func comp(a^48: Library.Nat.T, b^35:
                                        Library.Nat.T)
                                returns (ret^13: Library.Nat.T)
        {
          ite(a^48 == Library.Nat.id, b^35, ite(b^35 == Library.Nat.id, a^48,
          ite(Library.Nat.valid(a^48) && Library.Nat.valid(b^35), a^48 +
          b^35, -(1))))
        }
[Debug] SymbolTbl.resolve_and_find: a^62
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^62
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.weak_frameCompInv.a^62
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^62
[Debug] Rewriter.Symbol.reify var a^62 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^45
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^45
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.weak_frameCompInv.b^45
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^45
[Debug] Rewriter.Symbol.reify var b^45 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.weak_frameCompInv
[Debug] Done with processing module Nat
[Debug] Rewriter.set_symbol: symbol = Nat
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat
[Debug] Processing module Auth
[Debug] Processing module Auth: scope_children: 
[Debug] Typing.process_module: computing mod_qual_ident: Auth
[Debug] SymbolTbl.resolve_and_find: Auth
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = Auth; qual_ident = Library.Auth
[Debug] Typing.process_module: module Auth: checking return type ResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify interface ResourceAlgebra
        {
          rep type T
          
          val id : Library.ResourceAlgebra.T
          
          func comp(a: Library.ResourceAlgebra.T, b:
                    Library.ResourceAlgebra.T)
            returns (ret: Library.ResourceAlgebra.T)
          
          
          func frame(a^1: Library.ResourceAlgebra.T, b^1:
                     Library.ResourceAlgebra.T)
            returns (ret^1: Library.ResourceAlgebra.T)
          
          
          func valid(a^2: Library.ResourceAlgebra.T)
            returns (ret^2: Bool)
          
          
          func fpuAllowed(a^3: Library.ResourceAlgebra.T, b^2:
                          Library.ResourceAlgebra.T)
            returns (ret^3: Bool)
          
          
          lemma idValid()
            ensures Library.ResourceAlgebra.valid(Library.ResourceAlgebra.id)
          
          
          lemma compAssoc()
            ensures forall a^4: Library.ResourceAlgebra.T, b^3:
            Library.ResourceAlgebra.T, c: Library.ResourceAlgebra.T ::
            Library.ResourceAlgebra.comp(Library.ResourceAlgebra.comp(a^4,
            b^3), c) == Library.ResourceAlgebra.comp(a^4,
            Library.ResourceAlgebra.comp(b^3, c))
          
          
          lemma compCommute()
            ensures forall a^5: Library.ResourceAlgebra.T, b^4:
            Library.ResourceAlgebra.T :: Library.ResourceAlgebra.comp(a^5,
            b^4) == Library.ResourceAlgebra.comp(b^4, a^5)
          
          
          lemma compId()
            ensures forall a^6: Library.ResourceAlgebra.T ::
            Library.ResourceAlgebra.comp(a^6, Library.ResourceAlgebra.id) ==
            a^6
          
          
          lemma compValid()
            ensures forall a^7: Library.ResourceAlgebra.T, b^5:
            Library.ResourceAlgebra.T ::
            Library.ResourceAlgebra.valid(Library.ResourceAlgebra.comp(a^7,
            b^5)) ==> Library.ResourceAlgebra.valid(a^7) &&
            Library.ResourceAlgebra.valid(b^5)
          
          
          lemma frameId()
            ensures forall a^8: Library.ResourceAlgebra.T ::
            Library.ResourceAlgebra.frame(a^8, Library.ResourceAlgebra.id) ==
            a^8
          
          
          lemma compFrameInv()
            ensures forall a^9: Library.ResourceAlgebra.T, b^6:
            Library.ResourceAlgebra.T ::
            Library.ResourceAlgebra.valid(Library.ResourceAlgebra.frame(a^9,
            b^6)) ==>
            Library.ResourceAlgebra.comp(Library.ResourceAlgebra.frame(a^9,
            b^6), b^6) == a^9
          
          
          lemma fpuValid()
            ensures forall a^10: Library.ResourceAlgebra.T, b^7:
            Library.ResourceAlgebra.T, c^1: Library.ResourceAlgebra.T ::
            Library.ResourceAlgebra.fpuAllowed(a^10, b^7) &&
            Library.ResourceAlgebra.valid(a^10) &&
            Library.ResourceAlgebra.valid(Library.ResourceAlgebra.comp(a^10,
            c^1)) ==>
            Library.ResourceAlgebra.valid(Library.ResourceAlgebra.comp(b^7,
            c^1))
          
          
          lemma fpuReflexive()
            ensures forall a^11: Library.ResourceAlgebra.T ::
            Library.ResourceAlgebra.valid(a^11) ==>
            Library.ResourceAlgebra.fpuAllowed(a^11, a^11)
          
          
          lemma frameValid()
            ensures forall a^12: Library.ResourceAlgebra.T, b^8:
            Library.ResourceAlgebra.T ::
            Library.ResourceAlgebra.valid(Library.ResourceAlgebra.frame(a^12,
            b^8)) ==> Library.ResourceAlgebra.valid(a^12) &&
            Library.ResourceAlgebra.valid(b^8)
          
          
          lemma weak_frameCompInv()
            ensures forall a^13: Library.ResourceAlgebra.T, b^9:
            Library.ResourceAlgebra.T ::
            Library.ResourceAlgebra.valid(Library.ResourceAlgebra.comp(a^13,
            b^9)) ==>
            Library.ResourceAlgebra.valid(Library.ResourceAlgebra.frame(Library.ResourceAlgebra.comp(a^13,
            b^9), b^9))
          
        }
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frame
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.valid
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.weak_frameCompInv
[Debug] Typing.process_module: Auth: checking return type interface ResourceAlgebra
{
  rep type T
  
  val id : Library.Auth.T

func comp(a: Library.Auth.T,
b:
Library.Auth.T)
returns (ret: Library.Auth.T)


func frame(a^1: Library.Auth.T,
b^1:
Library.Auth.T)
returns (ret^1: Library.Auth.T)


func valid(a^2: Library.Auth.T)
returns (ret^2: Bool)


func fpuAllowed(a^3: Library.Auth.T,
b^2:
Library.Auth.T)
returns (ret^3: Bool)


lemma idValid()
  ensures Library.Auth.valid(Library.Auth.id)


lemma compAssoc()
  ensures forall a^4: Library.Auth.T,
b^3:
Library.Auth.T,
c:
Library.Auth.T
::
Library.Auth.comp(Library.Auth.comp(a^4,
b^3),
c) ==
Library.Auth.comp(a^4,
Library.Auth.comp(b^3,
c))


lemma compCommute()
  ensures forall a^5: Library.Auth.T,
b^4:
Library.Auth.T
::
Library.Auth.comp(a^5,
b^4) ==
Library.Auth.comp(b^4,
a^5)


lemma compId()
  ensures forall a^6: Library.Auth.T
::
Library.Auth.comp(a^6,
Library.Auth.id) ==
a^6


lemma compValid()
  ensures forall a^7: Library.Auth.T,
b^5:
Library.Auth.T
::
Library.Auth.valid(Library.Auth.comp(a^7,
b^5)) ==>
Library.Auth.valid(a^7) &&
Library.Auth.valid(b^5)


lemma frameId()
  ensures forall a^8: Library.Auth.T
::
Library.Auth.frame(a^8,
Library.Auth.id) ==
a^8


lemma compFrameInv()
  ensures forall a^9: Library.Auth.T,
b^6:
Library.Auth.T
::
Library.Auth.valid(Library.Auth.frame(a^9,
b^6)) ==>
Library.Auth.comp(Library.Auth.frame(a^9,
b^6),
b^6) ==
a^9


lemma fpuValid()
  ensures forall a^10: Library.Auth.T,
b^7:
Library.Auth.T,
c^1:
Library.Auth.T
::
Library.Auth.fpuAllowed(a^10,
b^7) &&
Library.Auth.valid(a^10) &&
Library.Auth.valid(Library.Auth.comp(a^10,
c^1)) ==>
Library.Auth.valid(Library.Auth.comp(b^7,
c^1))


lemma fpuReflexive()
  ensures forall a^11: Library.Auth.T
::
Library.Auth.valid(a^11) ==>
Library.Auth.fpuAllowed(a^11,
a^11)


lemma frameValid()
  ensures forall a^12: Library.Auth.T,
b^8:
Library.Auth.T
::
Library.Auth.valid(Library.Auth.frame(a^12,
b^8)) ==>
Library.Auth.valid(a^12) &&
Library.Auth.valid(b^8)


lemma weak_frameCompInv()
  ensures forall a^13: Library.Auth.T,
b^9:
Library.Auth.T
::
Library.Auth.valid(Library.Auth.comp(a^13,
b^9)) ==>
Library.Auth.valid(Library.Auth.frame(Library.Auth.comp(a^13,
b^9),
b^9))

}: reified; 
 qual_interface_ident: Library.ResourceAlgebra 
 mid: ResourceAlgebra
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.M
[Debug] SymbolTbl.resolve_and_find: CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.T
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.id
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.frame
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.fpuAllowed
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.idValid
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.compAssoc
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.compCommute
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.compId
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.compValid
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.frameId
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.compFrameInv
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.fpuValid
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.fpuReflexive
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.frameValid
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.weak_frameCompInv
[Debug] Library.ResourceAlgebra
[Debug] Library.Auth
[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = CancellativeResourceAlgebra; qual_ident = Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, M, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = T; qual_ident = Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: M
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: M
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, M, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: M
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: found Alias: <Library.CancellativeResourceAlgebra,  >
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: M
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: M
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = T; qual_ident = Library.Auth.T
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.top
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frag
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frag
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frag
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.frag
[Debug] Rewriter.Symbol.reify /* constr frag(Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.frag
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, frag
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, frag
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, frag
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, frag
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frag
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frag
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr frag(Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: M.id
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: M, id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: M, id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: found Alias: <Library.CancellativeResourceAlgebra,  >
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, id
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra, id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra, id
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] ident: Library.Auth.M.id
[Debug] Rewriter.Symbol.reify val id : Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, M, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, M, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, M, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, M, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: M, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: M, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: found Alias: <Library.CancellativeResourceAlgebra,  >
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.id
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 5
[Debug] old id n -> 0
[Debug] fresh id n -> 1
[Debug] Keyset: 5
[Debug] old id ret -> 15
[Debug] fresh id ret -> 16
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.valid.n^1
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.valid.ret^16
[Debug] SymbolTbl.resolve_and_find: f_proj1
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: f_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: f_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = f_proj1; qual_ident = Library.Auth.f_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: frag
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frag
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frag
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frag; qual_ident = Library.Auth.frag
[Debug] Rewriter.is_local: qual_ident = Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = f_proj1; qual_ident = Library.Auth.f_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: af_proj1
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: af_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: af_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = af_proj1; qual_ident = Library.Auth.af_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: af_proj2
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: af_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: af_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = af_proj2; qual_ident = Library.Auth.af_proj2
[Debug] Rewriter.is_local: qual_ident = Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: auth_frag
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: auth_frag
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: auth_frag
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = auth_frag; qual_ident = Library.Auth.auth_frag
[Debug] Rewriter.is_local: qual_ident = Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = af_proj1; qual_ident = Library.Auth.af_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = af_proj2; qual_ident = Library.Auth.af_proj2
[Debug] Rewriter.is_local: qual_ident = Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = af_proj1; qual_ident = Library.Auth.af_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = af_proj2; qual_ident = Library.Auth.af_proj2
[Debug] Rewriter.is_local: qual_ident = Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: n^1
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth.valid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: n^1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: ret^16, n^1
[Debug] SymbolTbl.resolve.go_forward: ids2: n^1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: n^1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid.n^1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: n^1
[Debug] Rewriter.Symbol.reify var n^1 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.frag
[Debug] Rewriter.Symbol.reify /* constr frag(Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.frag
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, frag
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, frag
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, frag
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, frag
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frag
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frag
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr frag(Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr f_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, f_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, f_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, f_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, f_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: f_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: f_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr f_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: n^1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: n^1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid.n^1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: n^1
[Debug] Rewriter.Symbol.reify var n^1 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, M, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, M, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, M, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, M, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: M, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: M, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: found Alias: <Library.CancellativeResourceAlgebra,  >
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: M.valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: M, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: M, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: found Alias: <Library.CancellativeResourceAlgebra,  >
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] ident: Library.Auth.M.valid
[Debug] Rewriter.Symbol.reify func valid(a^25:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^5: Bool)
        
[Debug] SymbolTbl.resolve_and_find: f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr f_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr f_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: n^1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: n^1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid.n^1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: n^1
[Debug] Rewriter.Symbol.reify var n^1 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: n^1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: n^1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid.n^1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: n^1
[Debug] Rewriter.Symbol.reify var n^1 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: auth_frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.auth_frag
[Debug] Rewriter.Symbol.reify /* constr auth_frag(Library.Auth.M.T,
        Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, auth_frag
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, auth_frag
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, auth_frag
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, auth_frag
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: auth_frag
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: auth_frag
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr auth_frag(Library.Auth.M.T,
        Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, af_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, af_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, af_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, af_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: af_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: af_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: n^1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: n^1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid.n^1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: n^1
[Debug] Rewriter.Symbol.reify var n^1 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, af_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, af_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, af_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, af_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: af_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: af_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: n^1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: n^1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid.n^1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: n^1
[Debug] Rewriter.Symbol.reify var n^1 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: M.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] ident: Library.Auth.M.valid
[Debug] Rewriter.Symbol.reify func valid(a^25:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^5: Bool)
        
[Debug] SymbolTbl.resolve_and_find: af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: n^1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: n^1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid.n^1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: n^1
[Debug] Rewriter.Symbol.reify var n^1 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: M.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] ident: Library.Auth.M.valid
[Debug] Rewriter.Symbol.reify func valid(a^25:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^5: Bool)
        
[Debug] SymbolTbl.resolve_and_find: af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: n^1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: n^1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid.n^1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: n^1
[Debug] Rewriter.Symbol.reify var n^1 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, M, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, M, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, M, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, M, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: M, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: M, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: found Alias: <Library.CancellativeResourceAlgebra,  >
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] ident: Library.Auth.M.valid
[Debug] Rewriter.Symbol.reify func valid(a^25:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^5: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: n^1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: n^1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid.n^1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: n^1
[Debug] Rewriter.Symbol.reify var n^1 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: M.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] ident: Library.Auth.M.valid
[Debug] Rewriter.Symbol.reify func valid(a^25:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^5: Bool)
        
[Debug] SymbolTbl.resolve_and_find: M.frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: M, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: M, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: found Alias: <Library.CancellativeResourceAlgebra,  >
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, frame
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra,
        frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra,
        frame
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] ident: Library.Auth.M.frame
[Debug] Rewriter.Symbol.reify func frame(a^26:
                                         Library.CancellativeResourceAlgebra.T,
                                         b^18:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^6:
                                         Library.CancellativeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: n^1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: n^1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid.n^1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: n^1
[Debug] Rewriter.Symbol.reify var n^1 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: n^1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: n^1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid.n^1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: n^1
[Debug] Rewriter.Symbol.reify var n^1 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] ident: Library.Auth.M.valid
[Debug] Rewriter.Symbol.reify func valid(a^25:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^5: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: n^1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: n^1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid.n^1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: n^1
[Debug] Rewriter.Symbol.reify var n^1 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] ident: Library.Auth.M.valid
[Debug] Rewriter.Symbol.reify func valid(a^25:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^5: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: n^1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: n^1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid.n^1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: n^1
[Debug] Rewriter.Symbol.reify var n^1 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] ident: Library.Auth.M.valid
[Debug] Rewriter.Symbol.reify func valid(a^25:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^5: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: n^1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: n^1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid.n^1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: n^1
[Debug] Rewriter.Symbol.reify var n^1 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 5
[Debug] old id a -> 62
[Debug] fresh id a -> 63
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 5
[Debug] old id b -> 45
[Debug] fresh id b -> 46
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 5
[Debug] old id ret -> 16
[Debug] fresh id ret -> 17
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.comp.a^63
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.comp.b^46
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.comp.ret^17
[Debug] SymbolTbl.resolve_and_find: f_proj1
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: f_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: f_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = f_proj1; qual_ident = Library.Auth.f_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: frag
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frag
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frag
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frag; qual_ident = Library.Auth.frag
[Debug] Rewriter.is_local: qual_ident = Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = f_proj1; qual_ident = Library.Auth.f_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frag; qual_ident = Library.Auth.frag
[Debug] Rewriter.is_local: qual_ident = Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = f_proj1; qual_ident = Library.Auth.f_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = f_proj1; qual_ident = Library.Auth.f_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frag; qual_ident = Library.Auth.frag
[Debug] Rewriter.is_local: qual_ident = Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = f_proj1; qual_ident = Library.Auth.f_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frag; qual_ident = Library.Auth.frag
[Debug] Rewriter.is_local: qual_ident = Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: af_proj1
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: af_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: af_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = af_proj1; qual_ident = Library.Auth.af_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: af_proj2
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: af_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: af_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = af_proj2; qual_ident = Library.Auth.af_proj2
[Debug] Rewriter.is_local: qual_ident = Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: auth_frag
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: auth_frag
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: auth_frag
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = auth_frag; qual_ident = Library.Auth.auth_frag
[Debug] Rewriter.is_local: qual_ident = Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = af_proj1; qual_ident = Library.Auth.af_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = f_proj1; qual_ident = Library.Auth.f_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = af_proj2; qual_ident = Library.Auth.af_proj2
[Debug] Rewriter.is_local: qual_ident = Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: auth_frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = auth_frag; qual_ident = Library.Auth.auth_frag
[Debug] Rewriter.is_local: qual_ident = Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = af_proj1; qual_ident = Library.Auth.af_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = af_proj2; qual_ident = Library.Auth.af_proj2
[Debug] Rewriter.is_local: qual_ident = Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: auth_frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = auth_frag; qual_ident = Library.Auth.auth_frag
[Debug] Rewriter.is_local: qual_ident = Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = f_proj1; qual_ident = Library.Auth.f_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frag; qual_ident = Library.Auth.frag
[Debug] Rewriter.is_local: qual_ident = Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = af_proj1; qual_ident = Library.Auth.af_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = f_proj1; qual_ident = Library.Auth.f_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = af_proj2; qual_ident = Library.Auth.af_proj2
[Debug] Rewriter.is_local: qual_ident = Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: auth_frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = auth_frag; qual_ident = Library.Auth.auth_frag
[Debug] Rewriter.is_local: qual_ident = Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: top
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: top
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: top
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.top
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.top
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = top; qual_ident = Library.Auth.top
[Debug] Rewriter.is_local: qual_ident = Library.Auth.top
[Debug] SymbolTbl.resolve_and_find: a^63
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth.comp
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^63
[Debug] SymbolTbl.resolve.go_forward: scope_entries: ret^17, a^63, b^46
[Debug] SymbolTbl.resolve.go_forward: ids2: a^63
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^63
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp.a^63
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^63
[Debug] Rewriter.Symbol.reify var a^63 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.frag
[Debug] Rewriter.Symbol.reify /* constr frag(Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.frag
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, frag
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, frag
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, frag
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, frag
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frag
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frag
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr frag(Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr f_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, f_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, f_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, f_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, f_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: f_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: f_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr f_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^63
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^63
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp.a^63
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^63
[Debug] Rewriter.Symbol.reify var a^63 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, M, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, M, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, M, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, M, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: M, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: M, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: found Alias: <Library.CancellativeResourceAlgebra,  >
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^46
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth.comp
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^46
[Debug] SymbolTbl.resolve.go_forward: scope_entries: ret^17, a^63, b^46
[Debug] SymbolTbl.resolve.go_forward: ids2: b^46
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^46
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp.b^46
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^46
[Debug] Rewriter.Symbol.reify var b^46 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.frag
[Debug] Rewriter.Symbol.reify /* constr frag(Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr frag(Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr f_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr f_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: b^46
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^46
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp.b^46
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^46
[Debug] Rewriter.Symbol.reify var b^46 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^63
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^63
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp.a^63
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^63
[Debug] Rewriter.Symbol.reify var a^63 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr frag(Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr f_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^63
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^63
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp.a^63
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^63
[Debug] Rewriter.Symbol.reify var a^63 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.frag
[Debug] Rewriter.Symbol.reify /* constr frag(Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr frag(Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: M.comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: M, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: M, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: found Alias: <Library.CancellativeResourceAlgebra,  >
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] ident: Library.Auth.M.comp
[Debug] Rewriter.Symbol.reify func comp(a^27:
                                        Library.CancellativeResourceAlgebra.T,
                                        b^19:
                                        Library.CancellativeResourceAlgebra.T)
                                returns (ret^7:
                                         Library.CancellativeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr f_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr f_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^63
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^63
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp.a^63
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^63
[Debug] Rewriter.Symbol.reify var a^63 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr f_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr f_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: b^46
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^46
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp.b^46
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^46
[Debug] Rewriter.Symbol.reify var b^46 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^63
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^63
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp.a^63
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^63
[Debug] Rewriter.Symbol.reify var a^63 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.frag
[Debug] Rewriter.Symbol.reify /* constr frag(Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr frag(Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr f_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr f_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^63
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^63
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp.a^63
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^63
[Debug] Rewriter.Symbol.reify var a^63 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^46
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^46
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp.b^46
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^46
[Debug] Rewriter.Symbol.reify var b^46 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: auth_frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.auth_frag
[Debug] Rewriter.Symbol.reify /* constr auth_frag(Library.Auth.M.T,
        Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, auth_frag
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, auth_frag
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, auth_frag
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, auth_frag
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: auth_frag
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: auth_frag
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr auth_frag(Library.Auth.M.T,
        Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, af_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, af_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, af_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, af_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: af_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: af_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: b^46
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^46
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp.b^46
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^46
[Debug] Rewriter.Symbol.reify var b^46 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, af_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, af_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, af_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, af_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: af_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: af_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: b^46
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^46
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp.b^46
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^46
[Debug] Rewriter.Symbol.reify var b^46 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^63
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^63
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp.a^63
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^63
[Debug] Rewriter.Symbol.reify var a^63 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr frag(Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr f_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^63
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^63
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp.a^63
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^63
[Debug] Rewriter.Symbol.reify var a^63 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: auth_frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.auth_frag
[Debug] Rewriter.Symbol.reify /* constr auth_frag(Library.Auth.M.T,
        Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr auth_frag(Library.Auth.M.T,
        Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: b^46
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^46
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp.b^46
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^46
[Debug] Rewriter.Symbol.reify var b^46 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: M.comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] ident: Library.Auth.M.comp
[Debug] Rewriter.Symbol.reify func comp(a^27:
                                        Library.CancellativeResourceAlgebra.T,
                                        b^19:
                                        Library.CancellativeResourceAlgebra.T)
                                returns (ret^7:
                                         Library.CancellativeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr f_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr f_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^63
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^63
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp.a^63
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^63
[Debug] Rewriter.Symbol.reify var a^63 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: b^46
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^46
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp.b^46
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^46
[Debug] Rewriter.Symbol.reify var b^46 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^63
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^63
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp.a^63
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^63
[Debug] Rewriter.Symbol.reify var a^63 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: auth_frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.auth_frag
[Debug] Rewriter.Symbol.reify /* constr auth_frag(Library.Auth.M.T,
        Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr auth_frag(Library.Auth.M.T,
        Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^63
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^63
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp.a^63
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^63
[Debug] Rewriter.Symbol.reify var a^63 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^63
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^63
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp.a^63
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^63
[Debug] Rewriter.Symbol.reify var a^63 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^46
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^46
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp.b^46
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^46
[Debug] Rewriter.Symbol.reify var b^46 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.frag
[Debug] Rewriter.Symbol.reify /* constr frag(Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr frag(Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr f_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr f_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: b^46
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^46
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp.b^46
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^46
[Debug] Rewriter.Symbol.reify var b^46 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^63
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^63
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp.a^63
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^63
[Debug] Rewriter.Symbol.reify var a^63 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr auth_frag(Library.Auth.M.T,
        Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^63
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^63
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp.a^63
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^63
[Debug] Rewriter.Symbol.reify var a^63 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^63
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^63
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp.a^63
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^63
[Debug] Rewriter.Symbol.reify var a^63 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: auth_frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.auth_frag
[Debug] Rewriter.Symbol.reify /* constr auth_frag(Library.Auth.M.T,
        Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr auth_frag(Library.Auth.M.T,
        Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^63
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^63
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp.a^63
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^63
[Debug] Rewriter.Symbol.reify var a^63 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: M.comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] ident: Library.Auth.M.comp
[Debug] Rewriter.Symbol.reify func comp(a^27:
                                        Library.CancellativeResourceAlgebra.T,
                                        b^19:
                                        Library.CancellativeResourceAlgebra.T)
                                returns (ret^7:
                                         Library.CancellativeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr f_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr f_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: b^46
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^46
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp.b^46
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^46
[Debug] Rewriter.Symbol.reify var b^46 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^63
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^63
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp.a^63
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^63
[Debug] Rewriter.Symbol.reify var a^63 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: top
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.top
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.top
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.top
[Debug] Rewriter.Symbol.reify /* constr top(): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.top
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, top
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, top
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, top
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, top
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: top
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: top
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.top
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.top
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr top(): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 5
[Debug] old id a -> 63
[Debug] fresh id a -> 64
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 5
[Debug] old id b -> 46
[Debug] fresh id b -> 47
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 5
[Debug] old id ret -> 17
[Debug] fresh id ret -> 18
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.frame.a^64
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.frame.b^47
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.frame.ret^18
[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = id; qual_ident = Library.Auth.id
[Debug] Rewriter.is_local: qual_ident = Library.Auth.id
[Debug] SymbolTbl.resolve_and_find: f_proj1
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: f_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: f_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = f_proj1; qual_ident = Library.Auth.f_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: frag
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frag
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frag
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frag; qual_ident = Library.Auth.frag
[Debug] Rewriter.is_local: qual_ident = Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = f_proj1; qual_ident = Library.Auth.f_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frag; qual_ident = Library.Auth.frag
[Debug] Rewriter.is_local: qual_ident = Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = f_proj1; qual_ident = Library.Auth.f_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = f_proj1; qual_ident = Library.Auth.f_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frag; qual_ident = Library.Auth.frag
[Debug] Rewriter.is_local: qual_ident = Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = f_proj1; qual_ident = Library.Auth.f_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frag; qual_ident = Library.Auth.frag
[Debug] Rewriter.is_local: qual_ident = Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: af_proj1
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: af_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: af_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = af_proj1; qual_ident = Library.Auth.af_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: af_proj2
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: af_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: af_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = af_proj2; qual_ident = Library.Auth.af_proj2
[Debug] Rewriter.is_local: qual_ident = Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: auth_frag
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: auth_frag
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: auth_frag
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = auth_frag; qual_ident = Library.Auth.auth_frag
[Debug] Rewriter.is_local: qual_ident = Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: top
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: top
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: top
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.top
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.top
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = top; qual_ident = Library.Auth.top
[Debug] Rewriter.is_local: qual_ident = Library.Auth.top
[Debug] SymbolTbl.resolve_and_find: af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = af_proj1; qual_ident = Library.Auth.af_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = af_proj2; qual_ident = Library.Auth.af_proj2
[Debug] Rewriter.is_local: qual_ident = Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: auth_frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = auth_frag; qual_ident = Library.Auth.auth_frag
[Debug] Rewriter.is_local: qual_ident = Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Auth.valid
[Debug] Rewriter.is_local: qual_ident = Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = f_proj1; qual_ident = Library.Auth.f_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frag; qual_ident = Library.Auth.frag
[Debug] Rewriter.is_local: qual_ident = Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = af_proj1; qual_ident = Library.Auth.af_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = af_proj2; qual_ident = Library.Auth.af_proj2
[Debug] Rewriter.is_local: qual_ident = Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = f_proj1; qual_ident = Library.Auth.f_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: auth_frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = auth_frag; qual_ident = Library.Auth.auth_frag
[Debug] Rewriter.is_local: qual_ident = Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = af_proj1; qual_ident = Library.Auth.af_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = af_proj2; qual_ident = Library.Auth.af_proj2
[Debug] Rewriter.is_local: qual_ident = Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: auth_frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = auth_frag; qual_ident = Library.Auth.auth_frag
[Debug] Rewriter.is_local: qual_ident = Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Auth.valid
[Debug] Rewriter.is_local: qual_ident = Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = af_proj1; qual_ident = Library.Auth.af_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = af_proj2; qual_ident = Library.Auth.af_proj2
[Debug] Rewriter.is_local: qual_ident = Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: auth_frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = auth_frag; qual_ident = Library.Auth.auth_frag
[Debug] Rewriter.is_local: qual_ident = Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = af_proj1; qual_ident = Library.Auth.af_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = af_proj1; qual_ident = Library.Auth.af_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = af_proj2; qual_ident = Library.Auth.af_proj2
[Debug] Rewriter.is_local: qual_ident = Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = af_proj2; qual_ident = Library.Auth.af_proj2
[Debug] Rewriter.is_local: qual_ident = Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frag; qual_ident = Library.Auth.frag
[Debug] Rewriter.is_local: qual_ident = Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: top
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.top
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.top
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = top; qual_ident = Library.Auth.top
[Debug] Rewriter.is_local: qual_ident = Library.Auth.top
[Debug] SymbolTbl.resolve_and_find: top
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.top
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.top
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = top; qual_ident = Library.Auth.top
[Debug] Rewriter.is_local: qual_ident = Library.Auth.top
[Debug] SymbolTbl.resolve_and_find: b^47
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth.frame
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^47
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^47, ret^18, a^64
[Debug] SymbolTbl.resolve.go_forward: ids2: b^47
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^47
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.b^47
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^47
[Debug] Rewriter.Symbol.reify var b^47 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.id
[Debug] Rewriter.Symbol.reify val id : Library.Auth.T =
                                    Library.Auth.frag(Library.Auth.M.id)
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^64
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth.frame
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^64
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^47, ret^18, a^64
[Debug] SymbolTbl.resolve.go_forward: ids2: a^64
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.a^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^64
[Debug] Rewriter.Symbol.reify var a^64 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.a^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^64
[Debug] Rewriter.Symbol.reify var a^64 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.frag
[Debug] Rewriter.Symbol.reify /* constr frag(Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.frag
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, frag
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, frag
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, frag
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, frag
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frag
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frag
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr frag(Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr f_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, f_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, f_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, f_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, f_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: f_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: f_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr f_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.a^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^64
[Debug] Rewriter.Symbol.reify var a^64 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, M, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, M, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, M, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, M, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: M, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: M, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: found Alias: <Library.CancellativeResourceAlgebra,  >
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^47
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^47
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.b^47
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^47
[Debug] Rewriter.Symbol.reify var b^47 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.frag
[Debug] Rewriter.Symbol.reify /* constr frag(Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr frag(Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr f_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr f_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: b^47
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^47
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.b^47
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^47
[Debug] Rewriter.Symbol.reify var b^47 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.a^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^64
[Debug] Rewriter.Symbol.reify var a^64 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr frag(Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr f_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.a^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^64
[Debug] Rewriter.Symbol.reify var a^64 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.frag
[Debug] Rewriter.Symbol.reify /* constr frag(Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr frag(Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: M.frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: M, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: M, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: found Alias: <Library.CancellativeResourceAlgebra,  >
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, frame
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra,
        frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra,
        frame
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] ident: Library.Auth.M.frame
[Debug] Rewriter.Symbol.reify func frame(a^26:
                                         Library.CancellativeResourceAlgebra.T,
                                         b^18:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^6:
                                         Library.CancellativeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr f_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr f_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.a^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^64
[Debug] Rewriter.Symbol.reify var a^64 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr f_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr f_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: b^47
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^47
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.b^47
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^47
[Debug] Rewriter.Symbol.reify var b^47 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.a^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^64
[Debug] Rewriter.Symbol.reify var a^64 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.frag
[Debug] Rewriter.Symbol.reify /* constr frag(Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr frag(Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr f_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr f_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.a^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^64
[Debug] Rewriter.Symbol.reify var a^64 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^47
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^47
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.b^47
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^47
[Debug] Rewriter.Symbol.reify var b^47 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: auth_frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.auth_frag
[Debug] Rewriter.Symbol.reify /* constr auth_frag(Library.Auth.M.T,
        Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, auth_frag
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, auth_frag
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, auth_frag
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, auth_frag
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: auth_frag
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: auth_frag
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr auth_frag(Library.Auth.M.T,
        Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, af_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, af_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, af_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, af_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: af_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: af_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: b^47
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^47
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.b^47
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^47
[Debug] Rewriter.Symbol.reify var b^47 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, af_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, af_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, af_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, af_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: af_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: af_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: b^47
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^47
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.b^47
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^47
[Debug] Rewriter.Symbol.reify var b^47 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.a^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^64
[Debug] Rewriter.Symbol.reify var a^64 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr frag(Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr f_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.a^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^64
[Debug] Rewriter.Symbol.reify var a^64 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: top
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.top
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.top
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.top
[Debug] Rewriter.Symbol.reify /* constr top(): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.top
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, top
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, top
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, top
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, top
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: top
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: top
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.top
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.top
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr top(): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.a^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^64
[Debug] Rewriter.Symbol.reify var a^64 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: auth_frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.auth_frag
[Debug] Rewriter.Symbol.reify /* constr auth_frag(Library.Auth.M.T,
        Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr auth_frag(Library.Auth.M.T,
        Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.a^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^64
[Debug] Rewriter.Symbol.reify var a^64 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.a^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^64
[Debug] Rewriter.Symbol.reify var a^64 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.valid
[Debug] Rewriter.Symbol.reify func valid(n^1: Library.Auth.T)
                                returns (ret^16: Bool)
        {
          ite(n^1 == Library.Auth.frag(Library.Auth.f_proj1(n^1)),
          Library.Auth.M.valid(Library.Auth.f_proj1(n^1)), ite(n^1 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1)),
          Library.Auth.M.valid(Library.Auth.af_proj1(n^1)) &&
          Library.Auth.M.valid(Library.Auth.af_proj2(n^1)) &&
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1))), false))
        }
[Debug] SymbolTbl.resolve_and_find: a^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.a^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^64
[Debug] Rewriter.Symbol.reify var a^64 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.a^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^64
[Debug] Rewriter.Symbol.reify var a^64 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr auth_frag(Library.Auth.M.T,
        Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.a^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^64
[Debug] Rewriter.Symbol.reify var a^64 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.a^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^64
[Debug] Rewriter.Symbol.reify var a^64 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^47
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^47
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.b^47
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^47
[Debug] Rewriter.Symbol.reify var b^47 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.frag
[Debug] Rewriter.Symbol.reify /* constr frag(Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr frag(Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr f_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr f_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: b^47
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^47
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.b^47
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^47
[Debug] Rewriter.Symbol.reify var b^47 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.a^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^64
[Debug] Rewriter.Symbol.reify var a^64 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr auth_frag(Library.Auth.M.T,
        Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.a^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^64
[Debug] Rewriter.Symbol.reify var a^64 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.a^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^64
[Debug] Rewriter.Symbol.reify var a^64 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.valid
[Debug] Rewriter.Symbol.reify func valid(n^1: Library.Auth.T)
                                returns (ret^16: Bool)
        {
          ite(n^1 == Library.Auth.frag(Library.Auth.f_proj1(n^1)),
          Library.Auth.M.valid(Library.Auth.f_proj1(n^1)), ite(n^1 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1)),
          Library.Auth.M.valid(Library.Auth.af_proj1(n^1)) &&
          Library.Auth.M.valid(Library.Auth.af_proj2(n^1)) &&
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1))), false))
        }
[Debug] SymbolTbl.resolve_and_find: a^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.a^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^64
[Debug] Rewriter.Symbol.reify var a^64 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.a^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^64
[Debug] Rewriter.Symbol.reify var a^64 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr auth_frag(Library.Auth.M.T,
        Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.a^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^64
[Debug] Rewriter.Symbol.reify var a^64 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.a^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^64
[Debug] Rewriter.Symbol.reify var a^64 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: auth_frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.auth_frag
[Debug] Rewriter.Symbol.reify /* constr auth_frag(Library.Auth.M.T,
        Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr auth_frag(Library.Auth.M.T,
        Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.a^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^64
[Debug] Rewriter.Symbol.reify var a^64 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: M.frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] ident: Library.Auth.M.frame
[Debug] Rewriter.Symbol.reify func frame(a^26:
                                         Library.CancellativeResourceAlgebra.T,
                                         b^18:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^6:
                                         Library.CancellativeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.a^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^64
[Debug] Rewriter.Symbol.reify var a^64 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr f_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.f_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr f_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: b^47
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^47
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.b^47
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^47
[Debug] Rewriter.Symbol.reify var b^47 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.a^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^64
[Debug] Rewriter.Symbol.reify var a^64 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: auth_frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.auth_frag
[Debug] Rewriter.Symbol.reify /* constr auth_frag(Library.Auth.M.T,
        Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr auth_frag(Library.Auth.M.T,
        Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.a^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^64
[Debug] Rewriter.Symbol.reify var a^64 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.a^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^64
[Debug] Rewriter.Symbol.reify var a^64 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.valid
[Debug] Rewriter.Symbol.reify func valid(n^1: Library.Auth.T)
                                returns (ret^16: Bool)
        {
          ite(n^1 == Library.Auth.frag(Library.Auth.f_proj1(n^1)),
          Library.Auth.M.valid(Library.Auth.f_proj1(n^1)), ite(n^1 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1)),
          Library.Auth.M.valid(Library.Auth.af_proj1(n^1)) &&
          Library.Auth.M.valid(Library.Auth.af_proj2(n^1)) &&
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1))), false))
        }
[Debug] SymbolTbl.resolve_and_find: a^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.a^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^64
[Debug] Rewriter.Symbol.reify var a^64 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.a^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^64
[Debug] Rewriter.Symbol.reify var a^64 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr auth_frag(Library.Auth.M.T,
        Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.a^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^64
[Debug] Rewriter.Symbol.reify var a^64 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.a^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^64
[Debug] Rewriter.Symbol.reify var a^64 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^47
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^47
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.b^47
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^47
[Debug] Rewriter.Symbol.reify var b^47 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: auth_frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.auth_frag
[Debug] Rewriter.Symbol.reify /* constr auth_frag(Library.Auth.M.T,
        Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr auth_frag(Library.Auth.M.T,
        Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: b^47
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^47
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.b^47
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^47
[Debug] Rewriter.Symbol.reify var b^47 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: b^47
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^47
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.b^47
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^47
[Debug] Rewriter.Symbol.reify var b^47 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.a^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^64
[Debug] Rewriter.Symbol.reify var a^64 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr auth_frag(Library.Auth.M.T,
        Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.a^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^64
[Debug] Rewriter.Symbol.reify var a^64 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.a^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^64
[Debug] Rewriter.Symbol.reify var a^64 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.valid
[Debug] Rewriter.Symbol.reify func valid(n^1: Library.Auth.T)
                                returns (ret^16: Bool)
        {
          ite(n^1 == Library.Auth.frag(Library.Auth.f_proj1(n^1)),
          Library.Auth.M.valid(Library.Auth.f_proj1(n^1)), ite(n^1 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1)),
          Library.Auth.M.valid(Library.Auth.af_proj1(n^1)) &&
          Library.Auth.M.valid(Library.Auth.af_proj2(n^1)) &&
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1))), false))
        }
[Debug] SymbolTbl.resolve_and_find: a^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.a^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^64
[Debug] Rewriter.Symbol.reify var a^64 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.a^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^64
[Debug] Rewriter.Symbol.reify var a^64 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr auth_frag(Library.Auth.M.T,
        Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.a^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^64
[Debug] Rewriter.Symbol.reify var a^64 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.a^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^64
[Debug] Rewriter.Symbol.reify var a^64 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.a^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^64
[Debug] Rewriter.Symbol.reify var a^64 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: b^47
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^47
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.b^47
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^47
[Debug] Rewriter.Symbol.reify var b^47 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.frag
[Debug] Rewriter.Symbol.reify /* constr frag(Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr frag(Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: M.frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] ident: Library.Auth.M.frame
[Debug] Rewriter.Symbol.reify func frame(a^26:
                                         Library.CancellativeResourceAlgebra.T,
                                         b^18:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^6:
                                         Library.CancellativeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.a^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^64
[Debug] Rewriter.Symbol.reify var a^64 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: b^47
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^47
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame.b^47
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^47
[Debug] Rewriter.Symbol.reify var b^47 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: top
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.top
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.top
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.top
[Debug] Rewriter.Symbol.reify /* constr top(): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.top
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.top
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.top
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr top(): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: top
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.top
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.top
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.top
[Debug] Rewriter.Symbol.reify /* constr top(): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.top
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.top
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.top
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr top(): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frame
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 5
[Debug] old id a -> 64
[Debug] fresh id a -> 65
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 5
[Debug] old id b -> 47
[Debug] fresh id b -> 48
[Debug] Keyset: 5
[Debug] old id ret -> 18
[Debug] fresh id ret -> 19
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.fpuAllowed.a^65
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.fpuAllowed.b^48
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.fpuAllowed.ret^19
[Debug] SymbolTbl.resolve_and_find: af_proj1
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: af_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: af_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = af_proj1; qual_ident = Library.Auth.af_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: af_proj2
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: af_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: af_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = af_proj2; qual_ident = Library.Auth.af_proj2
[Debug] Rewriter.is_local: qual_ident = Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: auth_frag
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: auth_frag
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: auth_frag
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = auth_frag; qual_ident = Library.Auth.auth_frag
[Debug] Rewriter.is_local: qual_ident = Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = af_proj1; qual_ident = Library.Auth.af_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = af_proj2; qual_ident = Library.Auth.af_proj2
[Debug] Rewriter.is_local: qual_ident = Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: auth_frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = auth_frag; qual_ident = Library.Auth.auth_frag
[Debug] Rewriter.is_local: qual_ident = Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = af_proj1; qual_ident = Library.Auth.af_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = af_proj1; qual_ident = Library.Auth.af_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = af_proj1; qual_ident = Library.Auth.af_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = af_proj2; qual_ident = Library.Auth.af_proj2
[Debug] Rewriter.is_local: qual_ident = Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = af_proj1; qual_ident = Library.Auth.af_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = af_proj2; qual_ident = Library.Auth.af_proj2
[Debug] Rewriter.is_local: qual_ident = Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: a^65
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth.fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^65
[Debug] SymbolTbl.resolve.go_forward: scope_entries: ret^19, b^48, a^65
[Debug] SymbolTbl.resolve.go_forward: ids2: a^65
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^65
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuAllowed.a^65
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^65
[Debug] Rewriter.Symbol.reify var a^65 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^48
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth.fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^48
[Debug] SymbolTbl.resolve.go_forward: scope_entries: ret^19, b^48, a^65
[Debug] SymbolTbl.resolve.go_forward: ids2: b^48
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^48
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuAllowed.b^48
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^48
[Debug] Rewriter.Symbol.reify var b^48 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^65
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^65
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuAllowed.a^65
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^65
[Debug] Rewriter.Symbol.reify var a^65 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: auth_frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.auth_frag
[Debug] Rewriter.Symbol.reify /* constr auth_frag(Library.Auth.M.T,
        Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, auth_frag
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, auth_frag
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, auth_frag
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, auth_frag
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: auth_frag
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: auth_frag
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr auth_frag(Library.Auth.M.T,
        Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, af_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, af_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, af_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, af_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: af_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: af_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^65
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^65
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuAllowed.a^65
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^65
[Debug] Rewriter.Symbol.reify var a^65 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, M, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, M, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, M, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, M, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: M, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: M, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: found Alias: <Library.CancellativeResourceAlgebra,  >
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, af_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, af_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, af_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, af_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: af_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: af_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^65
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^65
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuAllowed.a^65
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^65
[Debug] Rewriter.Symbol.reify var a^65 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^48
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^48
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuAllowed.b^48
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^48
[Debug] Rewriter.Symbol.reify var b^48 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: auth_frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.auth_frag
[Debug] Rewriter.Symbol.reify /* constr auth_frag(Library.Auth.M.T,
        Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr auth_frag(Library.Auth.M.T,
        Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: b^48
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^48
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuAllowed.b^48
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^48
[Debug] Rewriter.Symbol.reify var b^48 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: b^48
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^48
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuAllowed.b^48
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^48
[Debug] Rewriter.Symbol.reify var b^48 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^65
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^65
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuAllowed.a^65
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^65
[Debug] Rewriter.Symbol.reify var a^65 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.auth_frag
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr auth_frag(Library.Auth.M.T,
        Library.Auth.M.T): Library.Auth.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^65
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^65
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuAllowed.a^65
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^65
[Debug] Rewriter.Symbol.reify var a^65 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^65
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^65
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuAllowed.a^65
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^65
[Debug] Rewriter.Symbol.reify var a^65 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: M.valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: M, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: M, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: found Alias: <Library.CancellativeResourceAlgebra,  >
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] ident: Library.Auth.M.valid
[Debug] Rewriter.Symbol.reify func valid(a^25:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^5: Bool)
        
[Debug] SymbolTbl.resolve_and_find: M.frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: M, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: M, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: found Alias: <Library.CancellativeResourceAlgebra,  >
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, frame
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra,
        frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra,
        frame
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] ident: Library.Auth.M.frame
[Debug] Rewriter.Symbol.reify func frame(a^26:
                                         Library.CancellativeResourceAlgebra.T,
                                         b^18:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^6:
                                         Library.CancellativeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: b^48
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^48
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuAllowed.b^48
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^48
[Debug] Rewriter.Symbol.reify var b^48 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^65
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^65
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuAllowed.a^65
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^65
[Debug] Rewriter.Symbol.reify var a^65 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: M.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] ident: Library.Auth.M.valid
[Debug] Rewriter.Symbol.reify func valid(a^25:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^5: Bool)
        
[Debug] SymbolTbl.resolve_and_find: M.frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] ident: Library.Auth.M.frame
[Debug] Rewriter.Symbol.reify func frame(a^26:
                                         Library.CancellativeResourceAlgebra.T,
                                         b^18:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^6:
                                         Library.CancellativeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: M.frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] ident: Library.Auth.M.frame
[Debug] Rewriter.Symbol.reify func frame(a^26:
                                         Library.CancellativeResourceAlgebra.T,
                                         b^18:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^6:
                                         Library.CancellativeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: b^48
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^48
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuAllowed.b^48
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^48
[Debug] Rewriter.Symbol.reify var b^48 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: b^48
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^48
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuAllowed.b^48
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^48
[Debug] Rewriter.Symbol.reify var b^48 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: M.frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] ident: Library.Auth.M.frame
[Debug] Rewriter.Symbol.reify func frame(a^26:
                                         Library.CancellativeResourceAlgebra.T,
                                         b^18:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^6:
                                         Library.CancellativeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^65
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^65
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuAllowed.a^65
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^65
[Debug] Rewriter.Symbol.reify var a^65 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^65
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^65
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuAllowed.a^65
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^65
[Debug] Rewriter.Symbol.reify var a^65 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, M, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, M, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, M, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, M, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: M, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: M, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: found Alias: <Library.CancellativeResourceAlgebra,  >
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] ident: Library.Auth.M.valid
[Debug] Rewriter.Symbol.reify func valid(a^25:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^5: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.frame
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, M, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, M, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, M, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, M, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: M, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: M, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: found Alias: <Library.CancellativeResourceAlgebra,  >
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, frame
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra,
        frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra,
        frame
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] ident: Library.Auth.M.frame
[Debug] Rewriter.Symbol.reify func frame(a^26:
                                         Library.CancellativeResourceAlgebra.T,
                                         b^18:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^6:
                                         Library.CancellativeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: b^48
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^48
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuAllowed.b^48
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^48
[Debug] Rewriter.Symbol.reify var b^48 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.af_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
[Debug] SymbolTbl.resolve_and_find: a^65
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^65
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuAllowed.a^65
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^65
[Debug] Rewriter.Symbol.reify var a^65 : Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = id; qual_ident = Library.Auth.id
[Debug] Rewriter.is_local: qual_ident = Library.Auth.id
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Auth.valid
[Debug] Rewriter.is_local: qual_ident = Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.valid
[Debug] Rewriter.Symbol.reify func valid(n^1: Library.Auth.T)
                                returns (ret^16: Bool)
        {
          ite(n^1 == Library.Auth.frag(Library.Auth.f_proj1(n^1)),
          Library.Auth.M.valid(Library.Auth.f_proj1(n^1)), ite(n^1 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1)),
          Library.Auth.M.valid(Library.Auth.af_proj1(n^1)) &&
          Library.Auth.M.valid(Library.Auth.af_proj2(n^1)) &&
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1))), false))
        }
[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.id
[Debug] Rewriter.Symbol.reify val id : Library.Auth.T =
                                    Library.Auth.frag(Library.Auth.M.id)
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.idValid
[Debug] Keyset: 5
[Debug] old id a -> 65
[Debug] fresh id a -> 66
[Debug] Keyset: 5
[Debug] old id b -> 48
[Debug] fresh id b -> 49
[Debug] Keyset: 5
[Debug] old id c -> 9
[Debug] fresh id c -> 10
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Auth.comp
[Debug] Rewriter.is_local: qual_ident = Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Auth.comp
[Debug] Rewriter.is_local: qual_ident = Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Auth.comp
[Debug] Rewriter.is_local: qual_ident = Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Auth.comp
[Debug] Rewriter.is_local: qual_ident = Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.compAssoc.a^66
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.compAssoc.b^49
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.compAssoc.c^10
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.comp
[Debug] Rewriter.Symbol.reify func comp(a^63: Library.Auth.T, b^46:
                                        Library.Auth.T)
                                returns (ret^17: Library.Auth.T)
        {
          ite(a^63 == Library.Auth.frag(Library.Auth.f_proj1(a^63)) &&
          b^46 == Library.Auth.frag(Library.Auth.f_proj1(b^46)),
          Library.Auth.frag(Library.Auth.M.comp(Library.Auth.f_proj1(a^63),
          Library.Auth.f_proj1(b^46))), ite(a^63 ==
          Library.Auth.frag(Library.Auth.f_proj1(a^63)) && b^46 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^46),
          Library.Auth.af_proj2(b^46)),
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^46),
          Library.Auth.M.comp(Library.Auth.f_proj1(a^63),
          Library.Auth.af_proj2(b^46))), ite(a^63 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^63),
          Library.Auth.af_proj2(a^63)) && b^46 ==
          Library.Auth.frag(Library.Auth.f_proj1(b^46)),
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^63),
          Library.Auth.M.comp(Library.Auth.f_proj1(b^46),
          Library.Auth.af_proj2(a^63))), Library.Auth.top)))
        }
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.comp
[Debug] Rewriter.Symbol.reify func comp(a^63: Library.Auth.T, b^46:
                                        Library.Auth.T)
                                returns (ret^17: Library.Auth.T)
        {
          ite(a^63 == Library.Auth.frag(Library.Auth.f_proj1(a^63)) &&
          b^46 == Library.Auth.frag(Library.Auth.f_proj1(b^46)),
          Library.Auth.frag(Library.Auth.M.comp(Library.Auth.f_proj1(a^63),
          Library.Auth.f_proj1(b^46))), ite(a^63 ==
          Library.Auth.frag(Library.Auth.f_proj1(a^63)) && b^46 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^46),
          Library.Auth.af_proj2(b^46)),
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^46),
          Library.Auth.M.comp(Library.Auth.f_proj1(a^63),
          Library.Auth.af_proj2(b^46))), ite(a^63 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^63),
          Library.Auth.af_proj2(a^63)) && b^46 ==
          Library.Auth.frag(Library.Auth.f_proj1(b^46)),
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^63),
          Library.Auth.M.comp(Library.Auth.f_proj1(b^46),
          Library.Auth.af_proj2(a^63))), Library.Auth.top)))
        }
[Debug] SymbolTbl.resolve_and_find: a^66
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth.compAssoc
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^66
[Debug] SymbolTbl.resolve.go_forward: scope_entries: c^10, b^49, a^66
[Debug] SymbolTbl.resolve.go_forward: ids2: a^66
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^66
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.compAssoc.a^66
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^66
[Debug] Rewriter.Symbol.reify var a^66 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^49
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth.compAssoc
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^49
[Debug] SymbolTbl.resolve.go_forward: scope_entries: c^10, b^49, a^66
[Debug] SymbolTbl.resolve.go_forward: ids2: b^49
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^49
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.compAssoc.b^49
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^49
[Debug] Rewriter.Symbol.reify var b^49 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^10
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth.compAssoc
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: c^10
[Debug] SymbolTbl.resolve.go_forward: scope_entries: c^10, b^49, a^66
[Debug] SymbolTbl.resolve.go_forward: ids2: c^10
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^10
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.compAssoc.c^10
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^10
[Debug] Rewriter.Symbol.reify var c^10 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.comp
[Debug] Rewriter.Symbol.reify func comp(a^63: Library.Auth.T, b^46:
                                        Library.Auth.T)
                                returns (ret^17: Library.Auth.T)
        {
          ite(a^63 == Library.Auth.frag(Library.Auth.f_proj1(a^63)) &&
          b^46 == Library.Auth.frag(Library.Auth.f_proj1(b^46)),
          Library.Auth.frag(Library.Auth.M.comp(Library.Auth.f_proj1(a^63),
          Library.Auth.f_proj1(b^46))), ite(a^63 ==
          Library.Auth.frag(Library.Auth.f_proj1(a^63)) && b^46 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^46),
          Library.Auth.af_proj2(b^46)),
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^46),
          Library.Auth.M.comp(Library.Auth.f_proj1(a^63),
          Library.Auth.af_proj2(b^46))), ite(a^63 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^63),
          Library.Auth.af_proj2(a^63)) && b^46 ==
          Library.Auth.frag(Library.Auth.f_proj1(b^46)),
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^63),
          Library.Auth.M.comp(Library.Auth.f_proj1(b^46),
          Library.Auth.af_proj2(a^63))), Library.Auth.top)))
        }
[Debug] SymbolTbl.resolve_and_find: a^66
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^66
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.compAssoc.a^66
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^66
[Debug] Rewriter.Symbol.reify var a^66 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.comp
[Debug] Rewriter.Symbol.reify func comp(a^63: Library.Auth.T, b^46:
                                        Library.Auth.T)
                                returns (ret^17: Library.Auth.T)
        {
          ite(a^63 == Library.Auth.frag(Library.Auth.f_proj1(a^63)) &&
          b^46 == Library.Auth.frag(Library.Auth.f_proj1(b^46)),
          Library.Auth.frag(Library.Auth.M.comp(Library.Auth.f_proj1(a^63),
          Library.Auth.f_proj1(b^46))), ite(a^63 ==
          Library.Auth.frag(Library.Auth.f_proj1(a^63)) && b^46 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^46),
          Library.Auth.af_proj2(b^46)),
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^46),
          Library.Auth.M.comp(Library.Auth.f_proj1(a^63),
          Library.Auth.af_proj2(b^46))), ite(a^63 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^63),
          Library.Auth.af_proj2(a^63)) && b^46 ==
          Library.Auth.frag(Library.Auth.f_proj1(b^46)),
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^63),
          Library.Auth.M.comp(Library.Auth.f_proj1(b^46),
          Library.Auth.af_proj2(a^63))), Library.Auth.top)))
        }
[Debug] SymbolTbl.resolve_and_find: b^49
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^49
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.compAssoc.b^49
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^49
[Debug] Rewriter.Symbol.reify var b^49 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^10
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^10
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.compAssoc.c^10
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^10
[Debug] Rewriter.Symbol.reify var c^10 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compAssoc
[Debug] Keyset: 5
[Debug] old id a -> 66
[Debug] fresh id a -> 67
[Debug] Keyset: 5
[Debug] old id b -> 49
[Debug] fresh id b -> 50
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Auth.comp
[Debug] Rewriter.is_local: qual_ident = Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Auth.comp
[Debug] Rewriter.is_local: qual_ident = Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.compCommute.a^67
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.compCommute.b^50
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.comp
[Debug] Rewriter.Symbol.reify func comp(a^63: Library.Auth.T, b^46:
                                        Library.Auth.T)
                                returns (ret^17: Library.Auth.T)
        {
          ite(a^63 == Library.Auth.frag(Library.Auth.f_proj1(a^63)) &&
          b^46 == Library.Auth.frag(Library.Auth.f_proj1(b^46)),
          Library.Auth.frag(Library.Auth.M.comp(Library.Auth.f_proj1(a^63),
          Library.Auth.f_proj1(b^46))), ite(a^63 ==
          Library.Auth.frag(Library.Auth.f_proj1(a^63)) && b^46 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^46),
          Library.Auth.af_proj2(b^46)),
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^46),
          Library.Auth.M.comp(Library.Auth.f_proj1(a^63),
          Library.Auth.af_proj2(b^46))), ite(a^63 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^63),
          Library.Auth.af_proj2(a^63)) && b^46 ==
          Library.Auth.frag(Library.Auth.f_proj1(b^46)),
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^63),
          Library.Auth.M.comp(Library.Auth.f_proj1(b^46),
          Library.Auth.af_proj2(a^63))), Library.Auth.top)))
        }
[Debug] SymbolTbl.resolve_and_find: a^67
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth.compCommute
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^67
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^50, a^67
[Debug] SymbolTbl.resolve.go_forward: ids2: a^67
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^67
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.compCommute.a^67
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^67
[Debug] Rewriter.Symbol.reify var a^67 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^50
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth.compCommute
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^50
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^50, a^67
[Debug] SymbolTbl.resolve.go_forward: ids2: b^50
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^50
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.compCommute.b^50
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^50
[Debug] Rewriter.Symbol.reify var b^50 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.comp
[Debug] Rewriter.Symbol.reify func comp(a^63: Library.Auth.T, b^46:
                                        Library.Auth.T)
                                returns (ret^17: Library.Auth.T)
        {
          ite(a^63 == Library.Auth.frag(Library.Auth.f_proj1(a^63)) &&
          b^46 == Library.Auth.frag(Library.Auth.f_proj1(b^46)),
          Library.Auth.frag(Library.Auth.M.comp(Library.Auth.f_proj1(a^63),
          Library.Auth.f_proj1(b^46))), ite(a^63 ==
          Library.Auth.frag(Library.Auth.f_proj1(a^63)) && b^46 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^46),
          Library.Auth.af_proj2(b^46)),
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^46),
          Library.Auth.M.comp(Library.Auth.f_proj1(a^63),
          Library.Auth.af_proj2(b^46))), ite(a^63 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^63),
          Library.Auth.af_proj2(a^63)) && b^46 ==
          Library.Auth.frag(Library.Auth.f_proj1(b^46)),
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^63),
          Library.Auth.M.comp(Library.Auth.f_proj1(b^46),
          Library.Auth.af_proj2(a^63))), Library.Auth.top)))
        }
[Debug] SymbolTbl.resolve_and_find: b^50
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^50
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.compCommute.b^50
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^50
[Debug] Rewriter.Symbol.reify var b^50 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^67
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^67
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.compCommute.a^67
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^67
[Debug] Rewriter.Symbol.reify var a^67 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compCommute
[Debug] Keyset: 5
[Debug] old id a -> 67
[Debug] fresh id a -> 68
[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = id; qual_ident = Library.Auth.id
[Debug] Rewriter.is_local: qual_ident = Library.Auth.id
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Auth.comp
[Debug] Rewriter.is_local: qual_ident = Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.compId.a^68
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.comp
[Debug] Rewriter.Symbol.reify func comp(a^63: Library.Auth.T, b^46:
                                        Library.Auth.T)
                                returns (ret^17: Library.Auth.T)
        {
          ite(a^63 == Library.Auth.frag(Library.Auth.f_proj1(a^63)) &&
          b^46 == Library.Auth.frag(Library.Auth.f_proj1(b^46)),
          Library.Auth.frag(Library.Auth.M.comp(Library.Auth.f_proj1(a^63),
          Library.Auth.f_proj1(b^46))), ite(a^63 ==
          Library.Auth.frag(Library.Auth.f_proj1(a^63)) && b^46 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^46),
          Library.Auth.af_proj2(b^46)),
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^46),
          Library.Auth.M.comp(Library.Auth.f_proj1(a^63),
          Library.Auth.af_proj2(b^46))), ite(a^63 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^63),
          Library.Auth.af_proj2(a^63)) && b^46 ==
          Library.Auth.frag(Library.Auth.f_proj1(b^46)),
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^63),
          Library.Auth.M.comp(Library.Auth.f_proj1(b^46),
          Library.Auth.af_proj2(a^63))), Library.Auth.top)))
        }
[Debug] SymbolTbl.resolve_and_find: a^68
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth.compId
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^68
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^68
[Debug] SymbolTbl.resolve.go_forward: ids2: a^68
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^68
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.compId.a^68
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^68
[Debug] Rewriter.Symbol.reify var a^68 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.id
[Debug] Rewriter.Symbol.reify val id : Library.Auth.T =
                                    Library.Auth.frag(Library.Auth.M.id)
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^68
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^68
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.compId.a^68
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^68
[Debug] Rewriter.Symbol.reify var a^68 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compId
[Debug] Keyset: 5
[Debug] old id a -> 68
[Debug] fresh id a -> 69
[Debug] Keyset: 5
[Debug] old id b -> 50
[Debug] fresh id b -> 51
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Auth.comp
[Debug] Rewriter.is_local: qual_ident = Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Auth.valid
[Debug] Rewriter.is_local: qual_ident = Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Auth.valid
[Debug] Rewriter.is_local: qual_ident = Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Auth.valid
[Debug] Rewriter.is_local: qual_ident = Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.compValid.a^69
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.compValid.b^51
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.valid
[Debug] Rewriter.Symbol.reify func valid(n^1: Library.Auth.T)
                                returns (ret^16: Bool)
        {
          ite(n^1 == Library.Auth.frag(Library.Auth.f_proj1(n^1)),
          Library.Auth.M.valid(Library.Auth.f_proj1(n^1)), ite(n^1 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1)),
          Library.Auth.M.valid(Library.Auth.af_proj1(n^1)) &&
          Library.Auth.M.valid(Library.Auth.af_proj2(n^1)) &&
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1))), false))
        }
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.comp
[Debug] Rewriter.Symbol.reify func comp(a^63: Library.Auth.T, b^46:
                                        Library.Auth.T)
                                returns (ret^17: Library.Auth.T)
        {
          ite(a^63 == Library.Auth.frag(Library.Auth.f_proj1(a^63)) &&
          b^46 == Library.Auth.frag(Library.Auth.f_proj1(b^46)),
          Library.Auth.frag(Library.Auth.M.comp(Library.Auth.f_proj1(a^63),
          Library.Auth.f_proj1(b^46))), ite(a^63 ==
          Library.Auth.frag(Library.Auth.f_proj1(a^63)) && b^46 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^46),
          Library.Auth.af_proj2(b^46)),
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^46),
          Library.Auth.M.comp(Library.Auth.f_proj1(a^63),
          Library.Auth.af_proj2(b^46))), ite(a^63 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^63),
          Library.Auth.af_proj2(a^63)) && b^46 ==
          Library.Auth.frag(Library.Auth.f_proj1(b^46)),
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^63),
          Library.Auth.M.comp(Library.Auth.f_proj1(b^46),
          Library.Auth.af_proj2(a^63))), Library.Auth.top)))
        }
[Debug] SymbolTbl.resolve_and_find: a^69
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth.compValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^69
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^51, a^69
[Debug] SymbolTbl.resolve.go_forward: ids2: a^69
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^69
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.compValid.a^69
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^69
[Debug] Rewriter.Symbol.reify var a^69 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^51
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth.compValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^51
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^51, a^69
[Debug] SymbolTbl.resolve.go_forward: ids2: b^51
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^51
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.compValid.b^51
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^51
[Debug] Rewriter.Symbol.reify var b^51 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.valid
[Debug] Rewriter.Symbol.reify func valid(n^1: Library.Auth.T)
                                returns (ret^16: Bool)
        {
          ite(n^1 == Library.Auth.frag(Library.Auth.f_proj1(n^1)),
          Library.Auth.M.valid(Library.Auth.f_proj1(n^1)), ite(n^1 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1)),
          Library.Auth.M.valid(Library.Auth.af_proj1(n^1)) &&
          Library.Auth.M.valid(Library.Auth.af_proj2(n^1)) &&
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1))), false))
        }
[Debug] SymbolTbl.resolve_and_find: a^69
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^69
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.compValid.a^69
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^69
[Debug] Rewriter.Symbol.reify var a^69 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.valid
[Debug] Rewriter.Symbol.reify func valid(n^1: Library.Auth.T)
                                returns (ret^16: Bool)
        {
          ite(n^1 == Library.Auth.frag(Library.Auth.f_proj1(n^1)),
          Library.Auth.M.valid(Library.Auth.f_proj1(n^1)), ite(n^1 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1)),
          Library.Auth.M.valid(Library.Auth.af_proj1(n^1)) &&
          Library.Auth.M.valid(Library.Auth.af_proj2(n^1)) &&
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1))), false))
        }
[Debug] SymbolTbl.resolve_and_find: b^51
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^51
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.compValid.b^51
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^51
[Debug] Rewriter.Symbol.reify var b^51 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.valid
[Debug] Rewriter.Symbol.reify func valid(n^1: Library.Auth.T)
                                returns (ret^16: Bool)
        {
          ite(n^1 == Library.Auth.frag(Library.Auth.f_proj1(n^1)),
          Library.Auth.M.valid(Library.Auth.f_proj1(n^1)), ite(n^1 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1)),
          Library.Auth.M.valid(Library.Auth.af_proj1(n^1)) &&
          Library.Auth.M.valid(Library.Auth.af_proj2(n^1)) &&
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1))), false))
        }
[Debug] SymbolTbl.resolve_and_find: a^69
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^69
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.compValid.a^69
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^69
[Debug] Rewriter.Symbol.reify var a^69 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.valid
[Debug] Rewriter.Symbol.reify func valid(n^1: Library.Auth.T)
                                returns (ret^16: Bool)
        {
          ite(n^1 == Library.Auth.frag(Library.Auth.f_proj1(n^1)),
          Library.Auth.M.valid(Library.Auth.f_proj1(n^1)), ite(n^1 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1)),
          Library.Auth.M.valid(Library.Auth.af_proj1(n^1)) &&
          Library.Auth.M.valid(Library.Auth.af_proj2(n^1)) &&
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1))), false))
        }
[Debug] SymbolTbl.resolve_and_find: Library.Auth.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.comp
[Debug] Rewriter.Symbol.reify func comp(a^63: Library.Auth.T, b^46:
                                        Library.Auth.T)
                                returns (ret^17: Library.Auth.T)
        {
          ite(a^63 == Library.Auth.frag(Library.Auth.f_proj1(a^63)) &&
          b^46 == Library.Auth.frag(Library.Auth.f_proj1(b^46)),
          Library.Auth.frag(Library.Auth.M.comp(Library.Auth.f_proj1(a^63),
          Library.Auth.f_proj1(b^46))), ite(a^63 ==
          Library.Auth.frag(Library.Auth.f_proj1(a^63)) && b^46 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^46),
          Library.Auth.af_proj2(b^46)),
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^46),
          Library.Auth.M.comp(Library.Auth.f_proj1(a^63),
          Library.Auth.af_proj2(b^46))), ite(a^63 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^63),
          Library.Auth.af_proj2(a^63)) && b^46 ==
          Library.Auth.frag(Library.Auth.f_proj1(b^46)),
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^63),
          Library.Auth.M.comp(Library.Auth.f_proj1(b^46),
          Library.Auth.af_proj2(a^63))), Library.Auth.top)))
        }
[Debug] SymbolTbl.resolve_and_find: a^69
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^69
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.compValid.a^69
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^69
[Debug] Rewriter.Symbol.reify var a^69 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^51
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^51
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.compValid.b^51
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^51
[Debug] Rewriter.Symbol.reify var b^51 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compValid
[Debug] Keyset: 5
[Debug] old id a -> 69
[Debug] fresh id a -> 70
[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = id; qual_ident = Library.Auth.id
[Debug] Rewriter.is_local: qual_ident = Library.Auth.id
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.Auth.frame
[Debug] Rewriter.is_local: qual_ident = Library.Auth.frame
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.frameId.a^70
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.frame
[Debug] Rewriter.Symbol.reify func frame(a^64: Library.Auth.T, b^47:
                                         Library.Auth.T)
                                returns (ret^18: Library.Auth.T)
        {
          ite(b^47 == Library.Auth.id, a^64, ite(a^64 ==
          Library.Auth.frag(Library.Auth.f_proj1(a^64)) && b^47 ==
          Library.Auth.frag(Library.Auth.f_proj1(b^47)),
          Library.Auth.frag(Library.Auth.M.frame(Library.Auth.f_proj1(a^64),
          Library.Auth.f_proj1(b^47))), ite(a^64 ==
          Library.Auth.frag(Library.Auth.f_proj1(a^64)) && b^47 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^47),
          Library.Auth.af_proj2(b^47)), Library.Auth.top, ite(a^64 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^64),
          Library.Auth.af_proj2(a^64)) && Library.Auth.valid(a^64) && b^47 ==
          Library.Auth.frag(Library.Auth.f_proj1(b^47)),
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^64),
          Library.Auth.M.frame(Library.Auth.af_proj2(a^64),
          Library.Auth.f_proj1(b^47))), ite(a^64 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^64),
          Library.Auth.af_proj2(a^64)) && Library.Auth.valid(a^64) && b^47 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^47),
          Library.Auth.af_proj2(b^47)), ite(Library.Auth.af_proj1(a^64) ==
          Library.Auth.af_proj1(b^47),
          Library.Auth.frag(Library.Auth.M.frame(Library.Auth.af_proj2(a^64),
          Library.Auth.af_proj2(b^47))), Library.Auth.top),
          Library.Auth.top)))))
        }
[Debug] SymbolTbl.resolve_and_find: a^70
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth.frameId
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^70
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^70
[Debug] SymbolTbl.resolve.go_forward: ids2: a^70
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^70
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frameId.a^70
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^70
[Debug] Rewriter.Symbol.reify var a^70 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.id
[Debug] Rewriter.Symbol.reify val id : Library.Auth.T =
                                    Library.Auth.frag(Library.Auth.M.id)
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^70
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^70
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frameId.a^70
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^70
[Debug] Rewriter.Symbol.reify var a^70 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frameId
[Debug] Keyset: 5
[Debug] old id a -> 70
[Debug] fresh id a -> 71
[Debug] Keyset: 5
[Debug] old id b -> 51
[Debug] fresh id b -> 52
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.Auth.frame
[Debug] Rewriter.is_local: qual_ident = Library.Auth.frame
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Auth.valid
[Debug] Rewriter.is_local: qual_ident = Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.Auth.frame
[Debug] Rewriter.is_local: qual_ident = Library.Auth.frame
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Auth.comp
[Debug] Rewriter.is_local: qual_ident = Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.compFrameInv.a^71
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.compFrameInv.b^52
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.valid
[Debug] Rewriter.Symbol.reify func valid(n^1: Library.Auth.T)
                                returns (ret^16: Bool)
        {
          ite(n^1 == Library.Auth.frag(Library.Auth.f_proj1(n^1)),
          Library.Auth.M.valid(Library.Auth.f_proj1(n^1)), ite(n^1 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1)),
          Library.Auth.M.valid(Library.Auth.af_proj1(n^1)) &&
          Library.Auth.M.valid(Library.Auth.af_proj2(n^1)) &&
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1))), false))
        }
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.frame
[Debug] Rewriter.Symbol.reify func frame(a^64: Library.Auth.T, b^47:
                                         Library.Auth.T)
                                returns (ret^18: Library.Auth.T)
        {
          ite(b^47 == Library.Auth.id, a^64, ite(a^64 ==
          Library.Auth.frag(Library.Auth.f_proj1(a^64)) && b^47 ==
          Library.Auth.frag(Library.Auth.f_proj1(b^47)),
          Library.Auth.frag(Library.Auth.M.frame(Library.Auth.f_proj1(a^64),
          Library.Auth.f_proj1(b^47))), ite(a^64 ==
          Library.Auth.frag(Library.Auth.f_proj1(a^64)) && b^47 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^47),
          Library.Auth.af_proj2(b^47)), Library.Auth.top, ite(a^64 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^64),
          Library.Auth.af_proj2(a^64)) && Library.Auth.valid(a^64) && b^47 ==
          Library.Auth.frag(Library.Auth.f_proj1(b^47)),
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^64),
          Library.Auth.M.frame(Library.Auth.af_proj2(a^64),
          Library.Auth.f_proj1(b^47))), ite(a^64 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^64),
          Library.Auth.af_proj2(a^64)) && Library.Auth.valid(a^64) && b^47 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^47),
          Library.Auth.af_proj2(b^47)), ite(Library.Auth.af_proj1(a^64) ==
          Library.Auth.af_proj1(b^47),
          Library.Auth.frag(Library.Auth.M.frame(Library.Auth.af_proj2(a^64),
          Library.Auth.af_proj2(b^47))), Library.Auth.top),
          Library.Auth.top)))))
        }
[Debug] SymbolTbl.resolve_and_find: a^71
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth.compFrameInv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^71
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^52, a^71
[Debug] SymbolTbl.resolve.go_forward: ids2: a^71
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^71
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.compFrameInv.a^71
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^71
[Debug] Rewriter.Symbol.reify var a^71 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^52
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth.compFrameInv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^52
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^52, a^71
[Debug] SymbolTbl.resolve.go_forward: ids2: b^52
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^52
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.compFrameInv.b^52
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^52
[Debug] Rewriter.Symbol.reify var b^52 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.comp
[Debug] Rewriter.Symbol.reify func comp(a^63: Library.Auth.T, b^46:
                                        Library.Auth.T)
                                returns (ret^17: Library.Auth.T)
        {
          ite(a^63 == Library.Auth.frag(Library.Auth.f_proj1(a^63)) &&
          b^46 == Library.Auth.frag(Library.Auth.f_proj1(b^46)),
          Library.Auth.frag(Library.Auth.M.comp(Library.Auth.f_proj1(a^63),
          Library.Auth.f_proj1(b^46))), ite(a^63 ==
          Library.Auth.frag(Library.Auth.f_proj1(a^63)) && b^46 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^46),
          Library.Auth.af_proj2(b^46)),
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^46),
          Library.Auth.M.comp(Library.Auth.f_proj1(a^63),
          Library.Auth.af_proj2(b^46))), ite(a^63 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^63),
          Library.Auth.af_proj2(a^63)) && b^46 ==
          Library.Auth.frag(Library.Auth.f_proj1(b^46)),
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^63),
          Library.Auth.M.comp(Library.Auth.f_proj1(b^46),
          Library.Auth.af_proj2(a^63))), Library.Auth.top)))
        }
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.frame
[Debug] Rewriter.Symbol.reify func frame(a^64: Library.Auth.T, b^47:
                                         Library.Auth.T)
                                returns (ret^18: Library.Auth.T)
        {
          ite(b^47 == Library.Auth.id, a^64, ite(a^64 ==
          Library.Auth.frag(Library.Auth.f_proj1(a^64)) && b^47 ==
          Library.Auth.frag(Library.Auth.f_proj1(b^47)),
          Library.Auth.frag(Library.Auth.M.frame(Library.Auth.f_proj1(a^64),
          Library.Auth.f_proj1(b^47))), ite(a^64 ==
          Library.Auth.frag(Library.Auth.f_proj1(a^64)) && b^47 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^47),
          Library.Auth.af_proj2(b^47)), Library.Auth.top, ite(a^64 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^64),
          Library.Auth.af_proj2(a^64)) && Library.Auth.valid(a^64) && b^47 ==
          Library.Auth.frag(Library.Auth.f_proj1(b^47)),
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^64),
          Library.Auth.M.frame(Library.Auth.af_proj2(a^64),
          Library.Auth.f_proj1(b^47))), ite(a^64 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^64),
          Library.Auth.af_proj2(a^64)) && Library.Auth.valid(a^64) && b^47 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^47),
          Library.Auth.af_proj2(b^47)), ite(Library.Auth.af_proj1(a^64) ==
          Library.Auth.af_proj1(b^47),
          Library.Auth.frag(Library.Auth.M.frame(Library.Auth.af_proj2(a^64),
          Library.Auth.af_proj2(b^47))), Library.Auth.top),
          Library.Auth.top)))))
        }
[Debug] SymbolTbl.resolve_and_find: a^71
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^71
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.compFrameInv.a^71
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^71
[Debug] Rewriter.Symbol.reify var a^71 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^52
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^52
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.compFrameInv.b^52
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^52
[Debug] Rewriter.Symbol.reify var b^52 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^52
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^52
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.compFrameInv.b^52
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^52
[Debug] Rewriter.Symbol.reify var b^52 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^71
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^71
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.compFrameInv.a^71
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^71
[Debug] Rewriter.Symbol.reify var a^71 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.valid
[Debug] Rewriter.Symbol.reify func valid(n^1: Library.Auth.T)
                                returns (ret^16: Bool)
        {
          ite(n^1 == Library.Auth.frag(Library.Auth.f_proj1(n^1)),
          Library.Auth.M.valid(Library.Auth.f_proj1(n^1)), ite(n^1 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1)),
          Library.Auth.M.valid(Library.Auth.af_proj1(n^1)) &&
          Library.Auth.M.valid(Library.Auth.af_proj2(n^1)) &&
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1))), false))
        }
[Debug] SymbolTbl.resolve_and_find: Library.Auth.frame
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.frame
[Debug] Rewriter.Symbol.reify func frame(a^64: Library.Auth.T, b^47:
                                         Library.Auth.T)
                                returns (ret^18: Library.Auth.T)
        {
          ite(b^47 == Library.Auth.id, a^64, ite(a^64 ==
          Library.Auth.frag(Library.Auth.f_proj1(a^64)) && b^47 ==
          Library.Auth.frag(Library.Auth.f_proj1(b^47)),
          Library.Auth.frag(Library.Auth.M.frame(Library.Auth.f_proj1(a^64),
          Library.Auth.f_proj1(b^47))), ite(a^64 ==
          Library.Auth.frag(Library.Auth.f_proj1(a^64)) && b^47 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^47),
          Library.Auth.af_proj2(b^47)), Library.Auth.top, ite(a^64 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^64),
          Library.Auth.af_proj2(a^64)) && Library.Auth.valid(a^64) && b^47 ==
          Library.Auth.frag(Library.Auth.f_proj1(b^47)),
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^64),
          Library.Auth.M.frame(Library.Auth.af_proj2(a^64),
          Library.Auth.f_proj1(b^47))), ite(a^64 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^64),
          Library.Auth.af_proj2(a^64)) && Library.Auth.valid(a^64) && b^47 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^47),
          Library.Auth.af_proj2(b^47)), ite(Library.Auth.af_proj1(a^64) ==
          Library.Auth.af_proj1(b^47),
          Library.Auth.frag(Library.Auth.M.frame(Library.Auth.af_proj2(a^64),
          Library.Auth.af_proj2(b^47))), Library.Auth.top),
          Library.Auth.top)))))
        }
[Debug] SymbolTbl.resolve_and_find: a^71
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^71
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.compFrameInv.a^71
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^71
[Debug] Rewriter.Symbol.reify var a^71 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^52
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^52
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.compFrameInv.b^52
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^52
[Debug] Rewriter.Symbol.reify var b^52 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compFrameInv
[Debug] Keyset: 5
[Debug] old id a -> 71
[Debug] fresh id a -> 72
[Debug] Keyset: 5
[Debug] old id b -> 52
[Debug] fresh id b -> 53
[Debug] Keyset: 5
[Debug] old id c -> 10
[Debug] fresh id c -> 11
[Debug] SymbolTbl.resolve_and_find: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = fpuAllowed; qual_ident = Library.Auth.fpuAllowed
[Debug] Rewriter.is_local: qual_ident = Library.Auth.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Auth.valid
[Debug] Rewriter.is_local: qual_ident = Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Auth.comp
[Debug] Rewriter.is_local: qual_ident = Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Auth.valid
[Debug] Rewriter.is_local: qual_ident = Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Auth.comp
[Debug] Rewriter.is_local: qual_ident = Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Auth.valid
[Debug] Rewriter.is_local: qual_ident = Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.fpuValid.a^72
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.fpuValid.b^53
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.fpuValid.c^11
[Debug] SymbolTbl.resolve_and_find: fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^65: Library.Auth.T, b^48:
                                              Library.Auth.T)
                                returns (ret^19: Bool)
        {
          ite(a^65 == b^48, true, ite(a^65 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^65),
          Library.Auth.af_proj2(a^65)) && b^48 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^48),
          Library.Auth.af_proj2(b^48)),
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.af_proj1(b^48),
          Library.Auth.af_proj1(a^65))) &&
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.M.frame(Library.Auth.af_proj1(b^48),
          Library.Auth.af_proj2(b^48)),
          Library.Auth.M.frame(Library.Auth.af_proj1(a^65),
          Library.Auth.af_proj2(a^65)))), false))
        }
[Debug] SymbolTbl.resolve_and_find: a^72
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth.fpuValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^72
[Debug] SymbolTbl.resolve.go_forward: scope_entries: c^11, b^53, a^72
[Debug] SymbolTbl.resolve.go_forward: ids2: a^72
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^72
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuValid.a^72
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^72
[Debug] Rewriter.Symbol.reify var a^72 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^53
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth.fpuValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^53
[Debug] SymbolTbl.resolve.go_forward: scope_entries: c^11, b^53, a^72
[Debug] SymbolTbl.resolve.go_forward: ids2: b^53
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^53
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuValid.b^53
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^53
[Debug] Rewriter.Symbol.reify var b^53 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.valid
[Debug] Rewriter.Symbol.reify func valid(n^1: Library.Auth.T)
                                returns (ret^16: Bool)
        {
          ite(n^1 == Library.Auth.frag(Library.Auth.f_proj1(n^1)),
          Library.Auth.M.valid(Library.Auth.f_proj1(n^1)), ite(n^1 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1)),
          Library.Auth.M.valid(Library.Auth.af_proj1(n^1)) &&
          Library.Auth.M.valid(Library.Auth.af_proj2(n^1)) &&
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1))), false))
        }
[Debug] SymbolTbl.resolve_and_find: a^72
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^72
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuValid.a^72
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^72
[Debug] Rewriter.Symbol.reify var a^72 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^65: Library.Auth.T, b^48:
                                              Library.Auth.T)
                                returns (ret^19: Bool)
        {
          ite(a^65 == b^48, true, ite(a^65 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^65),
          Library.Auth.af_proj2(a^65)) && b^48 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^48),
          Library.Auth.af_proj2(b^48)),
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.af_proj1(b^48),
          Library.Auth.af_proj1(a^65))) &&
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.M.frame(Library.Auth.af_proj1(b^48),
          Library.Auth.af_proj2(b^48)),
          Library.Auth.M.frame(Library.Auth.af_proj1(a^65),
          Library.Auth.af_proj2(a^65)))), false))
        }
[Debug] SymbolTbl.resolve_and_find: a^72
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^72
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuValid.a^72
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^72
[Debug] Rewriter.Symbol.reify var a^72 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^53
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^53
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuValid.b^53
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^53
[Debug] Rewriter.Symbol.reify var b^53 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.valid
[Debug] Rewriter.Symbol.reify func valid(n^1: Library.Auth.T)
                                returns (ret^16: Bool)
        {
          ite(n^1 == Library.Auth.frag(Library.Auth.f_proj1(n^1)),
          Library.Auth.M.valid(Library.Auth.f_proj1(n^1)), ite(n^1 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1)),
          Library.Auth.M.valid(Library.Auth.af_proj1(n^1)) &&
          Library.Auth.M.valid(Library.Auth.af_proj2(n^1)) &&
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1))), false))
        }
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.comp
[Debug] Rewriter.Symbol.reify func comp(a^63: Library.Auth.T, b^46:
                                        Library.Auth.T)
                                returns (ret^17: Library.Auth.T)
        {
          ite(a^63 == Library.Auth.frag(Library.Auth.f_proj1(a^63)) &&
          b^46 == Library.Auth.frag(Library.Auth.f_proj1(b^46)),
          Library.Auth.frag(Library.Auth.M.comp(Library.Auth.f_proj1(a^63),
          Library.Auth.f_proj1(b^46))), ite(a^63 ==
          Library.Auth.frag(Library.Auth.f_proj1(a^63)) && b^46 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^46),
          Library.Auth.af_proj2(b^46)),
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^46),
          Library.Auth.M.comp(Library.Auth.f_proj1(a^63),
          Library.Auth.af_proj2(b^46))), ite(a^63 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^63),
          Library.Auth.af_proj2(a^63)) && b^46 ==
          Library.Auth.frag(Library.Auth.f_proj1(b^46)),
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^63),
          Library.Auth.M.comp(Library.Auth.f_proj1(b^46),
          Library.Auth.af_proj2(a^63))), Library.Auth.top)))
        }
[Debug] SymbolTbl.resolve_and_find: a^72
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^72
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuValid.a^72
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^72
[Debug] Rewriter.Symbol.reify var a^72 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^11
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth.fpuValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: c^11
[Debug] SymbolTbl.resolve.go_forward: scope_entries: c^11, b^53, a^72
[Debug] SymbolTbl.resolve.go_forward: ids2: c^11
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^11
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuValid.c^11
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^11
[Debug] Rewriter.Symbol.reify var c^11 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^65: Library.Auth.T, b^48:
                                              Library.Auth.T)
                                returns (ret^19: Bool)
        {
          ite(a^65 == b^48, true, ite(a^65 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^65),
          Library.Auth.af_proj2(a^65)) && b^48 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^48),
          Library.Auth.af_proj2(b^48)),
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.af_proj1(b^48),
          Library.Auth.af_proj1(a^65))) &&
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.M.frame(Library.Auth.af_proj1(b^48),
          Library.Auth.af_proj2(b^48)),
          Library.Auth.M.frame(Library.Auth.af_proj1(a^65),
          Library.Auth.af_proj2(a^65)))), false))
        }
[Debug] SymbolTbl.resolve_and_find: a^72
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^72
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuValid.a^72
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^72
[Debug] Rewriter.Symbol.reify var a^72 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^53
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^53
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuValid.b^53
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^53
[Debug] Rewriter.Symbol.reify var b^53 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.valid
[Debug] Rewriter.Symbol.reify func valid(n^1: Library.Auth.T)
                                returns (ret^16: Bool)
        {
          ite(n^1 == Library.Auth.frag(Library.Auth.f_proj1(n^1)),
          Library.Auth.M.valid(Library.Auth.f_proj1(n^1)), ite(n^1 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1)),
          Library.Auth.M.valid(Library.Auth.af_proj1(n^1)) &&
          Library.Auth.M.valid(Library.Auth.af_proj2(n^1)) &&
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1))), false))
        }
[Debug] SymbolTbl.resolve_and_find: a^72
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^72
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuValid.a^72
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^72
[Debug] Rewriter.Symbol.reify var a^72 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^65: Library.Auth.T, b^48:
                                              Library.Auth.T)
                                returns (ret^19: Bool)
        {
          ite(a^65 == b^48, true, ite(a^65 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^65),
          Library.Auth.af_proj2(a^65)) && b^48 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^48),
          Library.Auth.af_proj2(b^48)),
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.af_proj1(b^48),
          Library.Auth.af_proj1(a^65))) &&
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.M.frame(Library.Auth.af_proj1(b^48),
          Library.Auth.af_proj2(b^48)),
          Library.Auth.M.frame(Library.Auth.af_proj1(a^65),
          Library.Auth.af_proj2(a^65)))), false))
        }
[Debug] SymbolTbl.resolve_and_find: a^72
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^72
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuValid.a^72
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^72
[Debug] Rewriter.Symbol.reify var a^72 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^53
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^53
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuValid.b^53
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^53
[Debug] Rewriter.Symbol.reify var b^53 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.valid
[Debug] Rewriter.Symbol.reify func valid(n^1: Library.Auth.T)
                                returns (ret^16: Bool)
        {
          ite(n^1 == Library.Auth.frag(Library.Auth.f_proj1(n^1)),
          Library.Auth.M.valid(Library.Auth.f_proj1(n^1)), ite(n^1 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1)),
          Library.Auth.M.valid(Library.Auth.af_proj1(n^1)) &&
          Library.Auth.M.valid(Library.Auth.af_proj2(n^1)) &&
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1))), false))
        }
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.comp
[Debug] Rewriter.Symbol.reify func comp(a^63: Library.Auth.T, b^46:
                                        Library.Auth.T)
                                returns (ret^17: Library.Auth.T)
        {
          ite(a^63 == Library.Auth.frag(Library.Auth.f_proj1(a^63)) &&
          b^46 == Library.Auth.frag(Library.Auth.f_proj1(b^46)),
          Library.Auth.frag(Library.Auth.M.comp(Library.Auth.f_proj1(a^63),
          Library.Auth.f_proj1(b^46))), ite(a^63 ==
          Library.Auth.frag(Library.Auth.f_proj1(a^63)) && b^46 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^46),
          Library.Auth.af_proj2(b^46)),
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^46),
          Library.Auth.M.comp(Library.Auth.f_proj1(a^63),
          Library.Auth.af_proj2(b^46))), ite(a^63 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^63),
          Library.Auth.af_proj2(a^63)) && b^46 ==
          Library.Auth.frag(Library.Auth.f_proj1(b^46)),
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^63),
          Library.Auth.M.comp(Library.Auth.f_proj1(b^46),
          Library.Auth.af_proj2(a^63))), Library.Auth.top)))
        }
[Debug] SymbolTbl.resolve_and_find: b^53
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^53
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuValid.b^53
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^53
[Debug] Rewriter.Symbol.reify var b^53 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^11
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^11
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuValid.c^11
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^11
[Debug] Rewriter.Symbol.reify var c^11 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^65: Library.Auth.T, b^48:
                                              Library.Auth.T)
                                returns (ret^19: Bool)
        {
          ite(a^65 == b^48, true, ite(a^65 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^65),
          Library.Auth.af_proj2(a^65)) && b^48 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^48),
          Library.Auth.af_proj2(b^48)),
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.af_proj1(b^48),
          Library.Auth.af_proj1(a^65))) &&
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.M.frame(Library.Auth.af_proj1(b^48),
          Library.Auth.af_proj2(b^48)),
          Library.Auth.M.frame(Library.Auth.af_proj1(a^65),
          Library.Auth.af_proj2(a^65)))), false))
        }
[Debug] SymbolTbl.resolve_and_find: a^72
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^72
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuValid.a^72
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^72
[Debug] Rewriter.Symbol.reify var a^72 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^53
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^53
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuValid.b^53
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^53
[Debug] Rewriter.Symbol.reify var b^53 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.valid
[Debug] Rewriter.Symbol.reify func valid(n^1: Library.Auth.T)
                                returns (ret^16: Bool)
        {
          ite(n^1 == Library.Auth.frag(Library.Auth.f_proj1(n^1)),
          Library.Auth.M.valid(Library.Auth.f_proj1(n^1)), ite(n^1 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1)),
          Library.Auth.M.valid(Library.Auth.af_proj1(n^1)) &&
          Library.Auth.M.valid(Library.Auth.af_proj2(n^1)) &&
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1))), false))
        }
[Debug] SymbolTbl.resolve_and_find: a^72
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^72
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuValid.a^72
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^72
[Debug] Rewriter.Symbol.reify var a^72 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^65: Library.Auth.T, b^48:
                                              Library.Auth.T)
                                returns (ret^19: Bool)
        {
          ite(a^65 == b^48, true, ite(a^65 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^65),
          Library.Auth.af_proj2(a^65)) && b^48 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^48),
          Library.Auth.af_proj2(b^48)),
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.af_proj1(b^48),
          Library.Auth.af_proj1(a^65))) &&
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.M.frame(Library.Auth.af_proj1(b^48),
          Library.Auth.af_proj2(b^48)),
          Library.Auth.M.frame(Library.Auth.af_proj1(a^65),
          Library.Auth.af_proj2(a^65)))), false))
        }
[Debug] SymbolTbl.resolve_and_find: a^72
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^72
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuValid.a^72
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^72
[Debug] Rewriter.Symbol.reify var a^72 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^53
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^53
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuValid.b^53
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^53
[Debug] Rewriter.Symbol.reify var b^53 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.valid
[Debug] Rewriter.Symbol.reify func valid(n^1: Library.Auth.T)
                                returns (ret^16: Bool)
        {
          ite(n^1 == Library.Auth.frag(Library.Auth.f_proj1(n^1)),
          Library.Auth.M.valid(Library.Auth.f_proj1(n^1)), ite(n^1 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1)),
          Library.Auth.M.valid(Library.Auth.af_proj1(n^1)) &&
          Library.Auth.M.valid(Library.Auth.af_proj2(n^1)) &&
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1))), false))
        }
[Debug] SymbolTbl.resolve_and_find: Library.Auth.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.comp
[Debug] Rewriter.Symbol.reify func comp(a^63: Library.Auth.T, b^46:
                                        Library.Auth.T)
                                returns (ret^17: Library.Auth.T)
        {
          ite(a^63 == Library.Auth.frag(Library.Auth.f_proj1(a^63)) &&
          b^46 == Library.Auth.frag(Library.Auth.f_proj1(b^46)),
          Library.Auth.frag(Library.Auth.M.comp(Library.Auth.f_proj1(a^63),
          Library.Auth.f_proj1(b^46))), ite(a^63 ==
          Library.Auth.frag(Library.Auth.f_proj1(a^63)) && b^46 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^46),
          Library.Auth.af_proj2(b^46)),
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^46),
          Library.Auth.M.comp(Library.Auth.f_proj1(a^63),
          Library.Auth.af_proj2(b^46))), ite(a^63 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^63),
          Library.Auth.af_proj2(a^63)) && b^46 ==
          Library.Auth.frag(Library.Auth.f_proj1(b^46)),
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^63),
          Library.Auth.M.comp(Library.Auth.f_proj1(b^46),
          Library.Auth.af_proj2(a^63))), Library.Auth.top)))
        }
[Debug] SymbolTbl.resolve_and_find: a^72
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^72
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuValid.a^72
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^72
[Debug] Rewriter.Symbol.reify var a^72 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^11
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^11
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuValid.c^11
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^11
[Debug] Rewriter.Symbol.reify var c^11 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^65: Library.Auth.T, b^48:
                                              Library.Auth.T)
                                returns (ret^19: Bool)
        {
          ite(a^65 == b^48, true, ite(a^65 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^65),
          Library.Auth.af_proj2(a^65)) && b^48 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^48),
          Library.Auth.af_proj2(b^48)),
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.af_proj1(b^48),
          Library.Auth.af_proj1(a^65))) &&
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.M.frame(Library.Auth.af_proj1(b^48),
          Library.Auth.af_proj2(b^48)),
          Library.Auth.M.frame(Library.Auth.af_proj1(a^65),
          Library.Auth.af_proj2(a^65)))), false))
        }
[Debug] SymbolTbl.resolve_and_find: a^72
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^72
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuValid.a^72
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^72
[Debug] Rewriter.Symbol.reify var a^72 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^53
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^53
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuValid.b^53
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^53
[Debug] Rewriter.Symbol.reify var b^53 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.valid
[Debug] Rewriter.Symbol.reify func valid(n^1: Library.Auth.T)
                                returns (ret^16: Bool)
        {
          ite(n^1 == Library.Auth.frag(Library.Auth.f_proj1(n^1)),
          Library.Auth.M.valid(Library.Auth.f_proj1(n^1)), ite(n^1 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1)),
          Library.Auth.M.valid(Library.Auth.af_proj1(n^1)) &&
          Library.Auth.M.valid(Library.Auth.af_proj2(n^1)) &&
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1))), false))
        }
[Debug] SymbolTbl.resolve_and_find: a^72
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^72
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuValid.a^72
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^72
[Debug] Rewriter.Symbol.reify var a^72 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^65: Library.Auth.T, b^48:
                                              Library.Auth.T)
                                returns (ret^19: Bool)
        {
          ite(a^65 == b^48, true, ite(a^65 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^65),
          Library.Auth.af_proj2(a^65)) && b^48 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^48),
          Library.Auth.af_proj2(b^48)),
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.af_proj1(b^48),
          Library.Auth.af_proj1(a^65))) &&
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.M.frame(Library.Auth.af_proj1(b^48),
          Library.Auth.af_proj2(b^48)),
          Library.Auth.M.frame(Library.Auth.af_proj1(a^65),
          Library.Auth.af_proj2(a^65)))), false))
        }
[Debug] SymbolTbl.resolve_and_find: a^72
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^72
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuValid.a^72
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^72
[Debug] Rewriter.Symbol.reify var a^72 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^53
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^53
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuValid.b^53
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^53
[Debug] Rewriter.Symbol.reify var b^53 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.fpuValid
[Debug] Keyset: 5
[Debug] old id a -> 72
[Debug] fresh id a -> 73
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Auth.valid
[Debug] Rewriter.is_local: qual_ident = Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = fpuAllowed; qual_ident = Library.Auth.fpuAllowed
[Debug] Rewriter.is_local: qual_ident = Library.Auth.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.fpuReflexive.a^73
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.valid
[Debug] Rewriter.Symbol.reify func valid(n^1: Library.Auth.T)
                                returns (ret^16: Bool)
        {
          ite(n^1 == Library.Auth.frag(Library.Auth.f_proj1(n^1)),
          Library.Auth.M.valid(Library.Auth.f_proj1(n^1)), ite(n^1 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1)),
          Library.Auth.M.valid(Library.Auth.af_proj1(n^1)) &&
          Library.Auth.M.valid(Library.Auth.af_proj2(n^1)) &&
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1))), false))
        }
[Debug] SymbolTbl.resolve_and_find: a^73
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth.fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^73
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^73
[Debug] SymbolTbl.resolve.go_forward: ids2: a^73
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^73
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuReflexive.a^73
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^73
[Debug] Rewriter.Symbol.reify var a^73 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^65: Library.Auth.T, b^48:
                                              Library.Auth.T)
                                returns (ret^19: Bool)
        {
          ite(a^65 == b^48, true, ite(a^65 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^65),
          Library.Auth.af_proj2(a^65)) && b^48 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^48),
          Library.Auth.af_proj2(b^48)),
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.af_proj1(b^48),
          Library.Auth.af_proj1(a^65))) &&
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.M.frame(Library.Auth.af_proj1(b^48),
          Library.Auth.af_proj2(b^48)),
          Library.Auth.M.frame(Library.Auth.af_proj1(a^65),
          Library.Auth.af_proj2(a^65)))), false))
        }
[Debug] SymbolTbl.resolve_and_find: a^73
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^73
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuReflexive.a^73
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^73
[Debug] Rewriter.Symbol.reify var a^73 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^73
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^73
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuReflexive.a^73
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^73
[Debug] Rewriter.Symbol.reify var a^73 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.valid
[Debug] Rewriter.Symbol.reify func valid(n^1: Library.Auth.T)
                                returns (ret^16: Bool)
        {
          ite(n^1 == Library.Auth.frag(Library.Auth.f_proj1(n^1)),
          Library.Auth.M.valid(Library.Auth.f_proj1(n^1)), ite(n^1 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1)),
          Library.Auth.M.valid(Library.Auth.af_proj1(n^1)) &&
          Library.Auth.M.valid(Library.Auth.af_proj2(n^1)) &&
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1))), false))
        }
[Debug] SymbolTbl.resolve_and_find: a^73
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^73
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuReflexive.a^73
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^73
[Debug] Rewriter.Symbol.reify var a^73 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.fpuReflexive
[Debug] Keyset: 5
[Debug] old id a -> 73
[Debug] fresh id a -> 74
[Debug] Keyset: 5
[Debug] old id b -> 53
[Debug] fresh id b -> 54
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.Auth.frame
[Debug] Rewriter.is_local: qual_ident = Library.Auth.frame
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Auth.valid
[Debug] Rewriter.is_local: qual_ident = Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Auth.valid
[Debug] Rewriter.is_local: qual_ident = Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Auth.valid
[Debug] Rewriter.is_local: qual_ident = Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.frameValid.a^74
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.frameValid.b^54
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.valid
[Debug] Rewriter.Symbol.reify func valid(n^1: Library.Auth.T)
                                returns (ret^16: Bool)
        {
          ite(n^1 == Library.Auth.frag(Library.Auth.f_proj1(n^1)),
          Library.Auth.M.valid(Library.Auth.f_proj1(n^1)), ite(n^1 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1)),
          Library.Auth.M.valid(Library.Auth.af_proj1(n^1)) &&
          Library.Auth.M.valid(Library.Auth.af_proj2(n^1)) &&
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1))), false))
        }
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.frame
[Debug] Rewriter.Symbol.reify func frame(a^64: Library.Auth.T, b^47:
                                         Library.Auth.T)
                                returns (ret^18: Library.Auth.T)
        {
          ite(b^47 == Library.Auth.id, a^64, ite(a^64 ==
          Library.Auth.frag(Library.Auth.f_proj1(a^64)) && b^47 ==
          Library.Auth.frag(Library.Auth.f_proj1(b^47)),
          Library.Auth.frag(Library.Auth.M.frame(Library.Auth.f_proj1(a^64),
          Library.Auth.f_proj1(b^47))), ite(a^64 ==
          Library.Auth.frag(Library.Auth.f_proj1(a^64)) && b^47 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^47),
          Library.Auth.af_proj2(b^47)), Library.Auth.top, ite(a^64 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^64),
          Library.Auth.af_proj2(a^64)) && Library.Auth.valid(a^64) && b^47 ==
          Library.Auth.frag(Library.Auth.f_proj1(b^47)),
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^64),
          Library.Auth.M.frame(Library.Auth.af_proj2(a^64),
          Library.Auth.f_proj1(b^47))), ite(a^64 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^64),
          Library.Auth.af_proj2(a^64)) && Library.Auth.valid(a^64) && b^47 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^47),
          Library.Auth.af_proj2(b^47)), ite(Library.Auth.af_proj1(a^64) ==
          Library.Auth.af_proj1(b^47),
          Library.Auth.frag(Library.Auth.M.frame(Library.Auth.af_proj2(a^64),
          Library.Auth.af_proj2(b^47))), Library.Auth.top),
          Library.Auth.top)))))
        }
[Debug] SymbolTbl.resolve_and_find: a^74
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth.frameValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^74
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^54, a^74
[Debug] SymbolTbl.resolve.go_forward: ids2: a^74
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^74
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frameValid.a^74
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^74
[Debug] Rewriter.Symbol.reify var a^74 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^54
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth.frameValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^54
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^54, a^74
[Debug] SymbolTbl.resolve.go_forward: ids2: b^54
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^54
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frameValid.b^54
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^54
[Debug] Rewriter.Symbol.reify var b^54 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.valid
[Debug] Rewriter.Symbol.reify func valid(n^1: Library.Auth.T)
                                returns (ret^16: Bool)
        {
          ite(n^1 == Library.Auth.frag(Library.Auth.f_proj1(n^1)),
          Library.Auth.M.valid(Library.Auth.f_proj1(n^1)), ite(n^1 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1)),
          Library.Auth.M.valid(Library.Auth.af_proj1(n^1)) &&
          Library.Auth.M.valid(Library.Auth.af_proj2(n^1)) &&
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1))), false))
        }
[Debug] SymbolTbl.resolve_and_find: a^74
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^74
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frameValid.a^74
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^74
[Debug] Rewriter.Symbol.reify var a^74 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.valid
[Debug] Rewriter.Symbol.reify func valid(n^1: Library.Auth.T)
                                returns (ret^16: Bool)
        {
          ite(n^1 == Library.Auth.frag(Library.Auth.f_proj1(n^1)),
          Library.Auth.M.valid(Library.Auth.f_proj1(n^1)), ite(n^1 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1)),
          Library.Auth.M.valid(Library.Auth.af_proj1(n^1)) &&
          Library.Auth.M.valid(Library.Auth.af_proj2(n^1)) &&
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1))), false))
        }
[Debug] SymbolTbl.resolve_and_find: b^54
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^54
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frameValid.b^54
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^54
[Debug] Rewriter.Symbol.reify var b^54 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.valid
[Debug] Rewriter.Symbol.reify func valid(n^1: Library.Auth.T)
                                returns (ret^16: Bool)
        {
          ite(n^1 == Library.Auth.frag(Library.Auth.f_proj1(n^1)),
          Library.Auth.M.valid(Library.Auth.f_proj1(n^1)), ite(n^1 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1)),
          Library.Auth.M.valid(Library.Auth.af_proj1(n^1)) &&
          Library.Auth.M.valid(Library.Auth.af_proj2(n^1)) &&
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1))), false))
        }
[Debug] SymbolTbl.resolve_and_find: a^74
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^74
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frameValid.a^74
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^74
[Debug] Rewriter.Symbol.reify var a^74 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.valid
[Debug] Rewriter.Symbol.reify func valid(n^1: Library.Auth.T)
                                returns (ret^16: Bool)
        {
          ite(n^1 == Library.Auth.frag(Library.Auth.f_proj1(n^1)),
          Library.Auth.M.valid(Library.Auth.f_proj1(n^1)), ite(n^1 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1)),
          Library.Auth.M.valid(Library.Auth.af_proj1(n^1)) &&
          Library.Auth.M.valid(Library.Auth.af_proj2(n^1)) &&
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1))), false))
        }
[Debug] SymbolTbl.resolve_and_find: Library.Auth.frame
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.frame
[Debug] Rewriter.Symbol.reify func frame(a^64: Library.Auth.T, b^47:
                                         Library.Auth.T)
                                returns (ret^18: Library.Auth.T)
        {
          ite(b^47 == Library.Auth.id, a^64, ite(a^64 ==
          Library.Auth.frag(Library.Auth.f_proj1(a^64)) && b^47 ==
          Library.Auth.frag(Library.Auth.f_proj1(b^47)),
          Library.Auth.frag(Library.Auth.M.frame(Library.Auth.f_proj1(a^64),
          Library.Auth.f_proj1(b^47))), ite(a^64 ==
          Library.Auth.frag(Library.Auth.f_proj1(a^64)) && b^47 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^47),
          Library.Auth.af_proj2(b^47)), Library.Auth.top, ite(a^64 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^64),
          Library.Auth.af_proj2(a^64)) && Library.Auth.valid(a^64) && b^47 ==
          Library.Auth.frag(Library.Auth.f_proj1(b^47)),
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^64),
          Library.Auth.M.frame(Library.Auth.af_proj2(a^64),
          Library.Auth.f_proj1(b^47))), ite(a^64 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^64),
          Library.Auth.af_proj2(a^64)) && Library.Auth.valid(a^64) && b^47 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^47),
          Library.Auth.af_proj2(b^47)), ite(Library.Auth.af_proj1(a^64) ==
          Library.Auth.af_proj1(b^47),
          Library.Auth.frag(Library.Auth.M.frame(Library.Auth.af_proj2(a^64),
          Library.Auth.af_proj2(b^47))), Library.Auth.top),
          Library.Auth.top)))))
        }
[Debug] SymbolTbl.resolve_and_find: a^74
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^74
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frameValid.a^74
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^74
[Debug] Rewriter.Symbol.reify var a^74 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^54
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^54
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frameValid.b^54
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^54
[Debug] Rewriter.Symbol.reify var b^54 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frameValid
[Debug] Keyset: 5
[Debug] old id a -> 74
[Debug] fresh id a -> 75
[Debug] Keyset: 5
[Debug] old id b -> 54
[Debug] fresh id b -> 55
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Auth.comp
[Debug] Rewriter.is_local: qual_ident = Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Auth.valid
[Debug] Rewriter.is_local: qual_ident = Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Auth.comp
[Debug] Rewriter.is_local: qual_ident = Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.Auth.frame
[Debug] Rewriter.is_local: qual_ident = Library.Auth.frame
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Auth.valid
[Debug] Rewriter.is_local: qual_ident = Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.weak_frameCompInv.a^75
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Auth.weak_frameCompInv.b^55
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.valid
[Debug] Rewriter.Symbol.reify func valid(n^1: Library.Auth.T)
                                returns (ret^16: Bool)
        {
          ite(n^1 == Library.Auth.frag(Library.Auth.f_proj1(n^1)),
          Library.Auth.M.valid(Library.Auth.f_proj1(n^1)), ite(n^1 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1)),
          Library.Auth.M.valid(Library.Auth.af_proj1(n^1)) &&
          Library.Auth.M.valid(Library.Auth.af_proj2(n^1)) &&
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1))), false))
        }
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.comp
[Debug] Rewriter.Symbol.reify func comp(a^63: Library.Auth.T, b^46:
                                        Library.Auth.T)
                                returns (ret^17: Library.Auth.T)
        {
          ite(a^63 == Library.Auth.frag(Library.Auth.f_proj1(a^63)) &&
          b^46 == Library.Auth.frag(Library.Auth.f_proj1(b^46)),
          Library.Auth.frag(Library.Auth.M.comp(Library.Auth.f_proj1(a^63),
          Library.Auth.f_proj1(b^46))), ite(a^63 ==
          Library.Auth.frag(Library.Auth.f_proj1(a^63)) && b^46 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^46),
          Library.Auth.af_proj2(b^46)),
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^46),
          Library.Auth.M.comp(Library.Auth.f_proj1(a^63),
          Library.Auth.af_proj2(b^46))), ite(a^63 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^63),
          Library.Auth.af_proj2(a^63)) && b^46 ==
          Library.Auth.frag(Library.Auth.f_proj1(b^46)),
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^63),
          Library.Auth.M.comp(Library.Auth.f_proj1(b^46),
          Library.Auth.af_proj2(a^63))), Library.Auth.top)))
        }
[Debug] SymbolTbl.resolve_and_find: a^75
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth.weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^75
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^55, a^75
[Debug] SymbolTbl.resolve.go_forward: ids2: a^75
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^75
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.weak_frameCompInv.a^75
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^75
[Debug] Rewriter.Symbol.reify var a^75 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^55
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth.weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^55
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^55, a^75
[Debug] SymbolTbl.resolve.go_forward: ids2: b^55
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^55
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.weak_frameCompInv.b^55
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^55
[Debug] Rewriter.Symbol.reify var b^55 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.valid
[Debug] Rewriter.Symbol.reify func valid(n^1: Library.Auth.T)
                                returns (ret^16: Bool)
        {
          ite(n^1 == Library.Auth.frag(Library.Auth.f_proj1(n^1)),
          Library.Auth.M.valid(Library.Auth.f_proj1(n^1)), ite(n^1 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1)),
          Library.Auth.M.valid(Library.Auth.af_proj1(n^1)) &&
          Library.Auth.M.valid(Library.Auth.af_proj2(n^1)) &&
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1))), false))
        }
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.frame
[Debug] Rewriter.Symbol.reify func frame(a^64: Library.Auth.T, b^47:
                                         Library.Auth.T)
                                returns (ret^18: Library.Auth.T)
        {
          ite(b^47 == Library.Auth.id, a^64, ite(a^64 ==
          Library.Auth.frag(Library.Auth.f_proj1(a^64)) && b^47 ==
          Library.Auth.frag(Library.Auth.f_proj1(b^47)),
          Library.Auth.frag(Library.Auth.M.frame(Library.Auth.f_proj1(a^64),
          Library.Auth.f_proj1(b^47))), ite(a^64 ==
          Library.Auth.frag(Library.Auth.f_proj1(a^64)) && b^47 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^47),
          Library.Auth.af_proj2(b^47)), Library.Auth.top, ite(a^64 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^64),
          Library.Auth.af_proj2(a^64)) && Library.Auth.valid(a^64) && b^47 ==
          Library.Auth.frag(Library.Auth.f_proj1(b^47)),
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^64),
          Library.Auth.M.frame(Library.Auth.af_proj2(a^64),
          Library.Auth.f_proj1(b^47))), ite(a^64 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^64),
          Library.Auth.af_proj2(a^64)) && Library.Auth.valid(a^64) && b^47 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^47),
          Library.Auth.af_proj2(b^47)), ite(Library.Auth.af_proj1(a^64) ==
          Library.Auth.af_proj1(b^47),
          Library.Auth.frag(Library.Auth.M.frame(Library.Auth.af_proj2(a^64),
          Library.Auth.af_proj2(b^47))), Library.Auth.top),
          Library.Auth.top)))))
        }
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.comp
[Debug] Rewriter.Symbol.reify func comp(a^63: Library.Auth.T, b^46:
                                        Library.Auth.T)
                                returns (ret^17: Library.Auth.T)
        {
          ite(a^63 == Library.Auth.frag(Library.Auth.f_proj1(a^63)) &&
          b^46 == Library.Auth.frag(Library.Auth.f_proj1(b^46)),
          Library.Auth.frag(Library.Auth.M.comp(Library.Auth.f_proj1(a^63),
          Library.Auth.f_proj1(b^46))), ite(a^63 ==
          Library.Auth.frag(Library.Auth.f_proj1(a^63)) && b^46 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^46),
          Library.Auth.af_proj2(b^46)),
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^46),
          Library.Auth.M.comp(Library.Auth.f_proj1(a^63),
          Library.Auth.af_proj2(b^46))), ite(a^63 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^63),
          Library.Auth.af_proj2(a^63)) && b^46 ==
          Library.Auth.frag(Library.Auth.f_proj1(b^46)),
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^63),
          Library.Auth.M.comp(Library.Auth.f_proj1(b^46),
          Library.Auth.af_proj2(a^63))), Library.Auth.top)))
        }
[Debug] SymbolTbl.resolve_and_find: a^75
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^75
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.weak_frameCompInv.a^75
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^75
[Debug] Rewriter.Symbol.reify var a^75 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^55
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^55
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.weak_frameCompInv.b^55
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^55
[Debug] Rewriter.Symbol.reify var b^55 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^55
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^55
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.weak_frameCompInv.b^55
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^55
[Debug] Rewriter.Symbol.reify var b^55 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.valid
[Debug] Rewriter.Symbol.reify func valid(n^1: Library.Auth.T)
                                returns (ret^16: Bool)
        {
          ite(n^1 == Library.Auth.frag(Library.Auth.f_proj1(n^1)),
          Library.Auth.M.valid(Library.Auth.f_proj1(n^1)), ite(n^1 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1)),
          Library.Auth.M.valid(Library.Auth.af_proj1(n^1)) &&
          Library.Auth.M.valid(Library.Auth.af_proj2(n^1)) &&
          Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.af_proj1(n^1),
          Library.Auth.af_proj2(n^1))), false))
        }
[Debug] SymbolTbl.resolve_and_find: Library.Auth.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Auth, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Auth.comp
[Debug] Rewriter.Symbol.reify func comp(a^63: Library.Auth.T, b^46:
                                        Library.Auth.T)
                                returns (ret^17: Library.Auth.T)
        {
          ite(a^63 == Library.Auth.frag(Library.Auth.f_proj1(a^63)) &&
          b^46 == Library.Auth.frag(Library.Auth.f_proj1(b^46)),
          Library.Auth.frag(Library.Auth.M.comp(Library.Auth.f_proj1(a^63),
          Library.Auth.f_proj1(b^46))), ite(a^63 ==
          Library.Auth.frag(Library.Auth.f_proj1(a^63)) && b^46 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^46),
          Library.Auth.af_proj2(b^46)),
          Library.Auth.auth_frag(Library.Auth.af_proj1(b^46),
          Library.Auth.M.comp(Library.Auth.f_proj1(a^63),
          Library.Auth.af_proj2(b^46))), ite(a^63 ==
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^63),
          Library.Auth.af_proj2(a^63)) && b^46 ==
          Library.Auth.frag(Library.Auth.f_proj1(b^46)),
          Library.Auth.auth_frag(Library.Auth.af_proj1(a^63),
          Library.Auth.M.comp(Library.Auth.f_proj1(b^46),
          Library.Auth.af_proj2(a^63))), Library.Auth.top)))
        }
[Debug] SymbolTbl.resolve_and_find: a^75
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^75
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.weak_frameCompInv.a^75
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^75
[Debug] Rewriter.Symbol.reify var a^75 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^55
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^55
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.weak_frameCompInv.b^55
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^55
[Debug] Rewriter.Symbol.reify var b^55 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.weak_frameCompInv
[Debug] Done with processing module Auth
[Debug] Rewriter.set_symbol: symbol = Auth
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth
[Debug] Processing module Frac
[Debug] Processing module Frac: scope_children: 
[Debug] Typing.process_module: computing mod_qual_ident: Frac
[Debug] SymbolTbl.resolve_and_find: Frac
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = Frac; qual_ident = Library.Frac
[Debug] Typing.process_module: module Frac: checking return type CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify interface CancellativeResourceAlgebra
                                : Library.ResourceAlgebra
        {
          lemma weak_frameCompInv()
            ensures forall a^14: Library.CancellativeResourceAlgebra.T, b^10:
            Library.CancellativeResourceAlgebra.T ::
            Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.comp(a^14,
            b^10)) ==>
            Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.frame(Library.CancellativeResourceAlgebra.comp(a^14,
            b^10), b^10))
          
          
          lemma frameValid()
            ensures forall a^15: Library.CancellativeResourceAlgebra.T, b^11:
            Library.CancellativeResourceAlgebra.T ::
            Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.frame(a^15,
            b^11)) ==> Library.CancellativeResourceAlgebra.valid(a^15) &&
            Library.CancellativeResourceAlgebra.valid(b^11)
          
          
          lemma fpuReflexive()
            ensures forall a^16: Library.CancellativeResourceAlgebra.T ::
            Library.CancellativeResourceAlgebra.valid(a^16) ==>
            Library.CancellativeResourceAlgebra.fpuAllowed(a^16, a^16)
          
          
          lemma fpuValid()
            ensures forall a^17: Library.CancellativeResourceAlgebra.T, b^12:
            Library.CancellativeResourceAlgebra.T, c^2:
            Library.CancellativeResourceAlgebra.T ::
            Library.CancellativeResourceAlgebra.fpuAllowed(a^17, b^12) &&
            Library.CancellativeResourceAlgebra.valid(a^17) &&
            Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.comp(a^17,
            c^2)) ==>
            Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.comp(b^12,
            c^2))
          
          
          lemma compFrameInv()
            ensures forall a^18: Library.CancellativeResourceAlgebra.T, b^13:
            Library.CancellativeResourceAlgebra.T ::
            Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.frame(a^18,
            b^13)) ==>
            Library.CancellativeResourceAlgebra.comp(Library.CancellativeResourceAlgebra.frame(a^18,
            b^13), b^13) == a^18
          
          
          lemma frameId()
            ensures forall a^19: Library.CancellativeResourceAlgebra.T ::
            Library.CancellativeResourceAlgebra.frame(a^19,
            Library.CancellativeResourceAlgebra.id) == a^19
          
          
          lemma compValid()
            ensures forall a^20: Library.CancellativeResourceAlgebra.T, b^14:
            Library.CancellativeResourceAlgebra.T ::
            Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.comp(a^20,
            b^14)) ==> Library.CancellativeResourceAlgebra.valid(a^20) &&
            Library.CancellativeResourceAlgebra.valid(b^14)
          
          
          lemma compId()
            ensures forall a^21: Library.CancellativeResourceAlgebra.T ::
            Library.CancellativeResourceAlgebra.comp(a^21,
            Library.CancellativeResourceAlgebra.id) == a^21
          
          
          lemma compCommute()
            ensures forall a^22: Library.CancellativeResourceAlgebra.T, b^15:
            Library.CancellativeResourceAlgebra.T ::
            Library.CancellativeResourceAlgebra.comp(a^22, b^15) ==
            Library.CancellativeResourceAlgebra.comp(b^15, a^22)
          
          
          lemma compAssoc()
            ensures forall a^23: Library.CancellativeResourceAlgebra.T, b^16:
            Library.CancellativeResourceAlgebra.T, c^3:
            Library.CancellativeResourceAlgebra.T ::
            Library.CancellativeResourceAlgebra.comp(Library.CancellativeResourceAlgebra.comp(a^23,
            b^16), c^3) == Library.CancellativeResourceAlgebra.comp(a^23,
            Library.CancellativeResourceAlgebra.comp(b^16, c^3))
          
          
          lemma idValid()
            ensures Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.id)
          
          
          func fpuAllowed(a^24: Library.CancellativeResourceAlgebra.T, b^17:
                          Library.CancellativeResourceAlgebra.T)
            returns (ret^4: Bool)
          
          
          func valid(a^25: Library.CancellativeResourceAlgebra.T)
            returns (ret^5: Bool)
          
          
          func frame(a^26: Library.CancellativeResourceAlgebra.T, b^18:
                     Library.CancellativeResourceAlgebra.T)
            returns (ret^6: Library.CancellativeResourceAlgebra.T)
          
          
          func comp(a^27: Library.CancellativeResourceAlgebra.T, b^19:
                    Library.CancellativeResourceAlgebra.T)
            returns (ret^7: Library.CancellativeResourceAlgebra.T)
          
          
          val id : Library.CancellativeResourceAlgebra.T
          
          rep type T
          
          lemma frameCompInv()
            ensures forall a^28: Library.CancellativeResourceAlgebra.T, b^20:
            Library.CancellativeResourceAlgebra.T ::
            Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.comp(a^28,
            b^20)) ==>
            Library.CancellativeResourceAlgebra.frame(Library.CancellativeResourceAlgebra.comp(a^28,
            b^20), b^20) == a^28
          
          
          lemma frameReflexive()
            ensures forall a^29: Library.CancellativeResourceAlgebra.T ::
            Library.CancellativeResourceAlgebra.valid(a^29) ==>
            Library.CancellativeResourceAlgebra.frame(a^29, a^29) ==
            Library.CancellativeResourceAlgebra.id
          
        }
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuValid
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compFrameInv
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compValid
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compId
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compCommute
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compAssoc
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.idValid
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameReflexive
[Debug] Typing.process_module: Frac: checking return type interface CancellativeResourceAlgebra : Library.ResourceAlgebra
{
  lemma weak_frameCompInv()
    ensures forall a^14: Library.Frac.T,
b^10:
Library.Frac.T
::
Library.Frac.valid(Library.Frac.comp(a^14,
b^10)) ==>
Library.Frac.valid(Library.Frac.frame(Library.Frac.comp(a^14,
b^10),
b^10))


lemma frameValid()
  ensures forall a^15: Library.Frac.T,
b^11:
Library.Frac.T
::
Library.Frac.valid(Library.Frac.frame(a^15,
b^11)) ==>
Library.Frac.valid(a^15) &&
Library.Frac.valid(b^11)


lemma fpuReflexive()
  ensures forall a^16: Library.Frac.T
::
Library.Frac.valid(a^16) ==>
Library.Frac.fpuAllowed(a^16,
a^16)


lemma fpuValid()
  ensures forall a^17: Library.Frac.T,
b^12:
Library.Frac.T,
c^2:
Library.Frac.T
::
Library.Frac.fpuAllowed(a^17,
b^12) &&
Library.Frac.valid(a^17) &&
Library.Frac.valid(Library.Frac.comp(a^17,
c^2)) ==>
Library.Frac.valid(Library.Frac.comp(b^12,
c^2))


lemma compFrameInv()
  ensures forall a^18: Library.Frac.T,
b^13:
Library.Frac.T
::
Library.Frac.valid(Library.Frac.frame(a^18,
b^13)) ==>
Library.Frac.comp(Library.Frac.frame(a^18,
b^13),
b^13) ==
a^18


lemma frameId()
  ensures forall a^19: Library.Frac.T
::
Library.Frac.frame(a^19,
Library.Frac.id) ==
a^19


lemma compValid()
  ensures forall a^20: Library.Frac.T,
b^14:
Library.Frac.T
::
Library.Frac.valid(Library.Frac.comp(a^20,
b^14)) ==>
Library.Frac.valid(a^20) &&
Library.Frac.valid(b^14)


lemma compId()
  ensures forall a^21: Library.Frac.T
::
Library.Frac.comp(a^21,
Library.Frac.id) ==
a^21


lemma compCommute()
  ensures forall a^22: Library.Frac.T,
b^15:
Library.Frac.T
::
Library.Frac.comp(a^22,
b^15) ==
Library.Frac.comp(b^15,
a^22)


lemma compAssoc()
  ensures forall a^23: Library.Frac.T,
b^16:
Library.Frac.T,
c^3:
Library.Frac.T
::
Library.Frac.comp(Library.Frac.comp(a^23,
b^16),
c^3) ==
Library.Frac.comp(a^23,
Library.Frac.comp(b^16,
c^3))


lemma idValid()
  ensures Library.Frac.valid(Library.Frac.id)


func fpuAllowed(a^24: Library.Frac.T,
b^17:
Library.Frac.T)
returns (ret^4: Bool)


func valid(a^25: Library.Frac.T)
returns (ret^5: Bool)


func frame(a^26: Library.Frac.T,
b^18:
Library.Frac.T)
returns (ret^6: Library.Frac.T)


func comp(a^27: Library.Frac.T,
b^19:
Library.Frac.T)
returns (ret^7: Library.Frac.T)


val id : Library.Frac.T

rep type T

lemma frameCompInv()
  ensures forall a^28: Library.Frac.T,
b^20:
Library.Frac.T
::
Library.Frac.valid(Library.Frac.comp(a^28,
b^20)) ==>
Library.Frac.frame(Library.Frac.comp(a^28,
b^20),
b^20) ==
a^28


lemma frameReflexive()
  ensures forall a^29: Library.Frac.T
::
Library.Frac.valid(a^29) ==>
Library.Frac.frame(a^29,
a^29) ==
Library.Frac.id

}: reified; 
 qual_interface_ident: Library.CancellativeResourceAlgebra 
 mid: CancellativeResourceAlgebra
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.X
[Debug] SymbolTbl.resolve_and_find: Type
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Type
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Type
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Type
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.T
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.id
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.frame
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.fpuAllowed
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.frameCompInv
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.frameReflexive
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.idValid
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.compAssoc
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.compCommute
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.compId
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.compValid
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.frameId
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.compFrameInv
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.fpuValid
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.fpuReflexive
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.frameValid
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.weak_frameCompInv
[Debug] Library.ResourceAlgebra
[Debug] Library.CancellativeResourceAlgebra
[Debug] Library.Frac
[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Type
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Type
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = Type; qual_ident = Library.Type
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = T; qual_ident = Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: X
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: X
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: X
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: found Alias: <Library.Type,  >
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Type
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Type
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.Frac.X
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Type
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Type
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.Frac.X
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = T; qual_ident = Library.Frac.T
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.frac_null
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.frac_top
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frac_null
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frac_null
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frac_null
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.frac_null
[Debug] Rewriter.Symbol.reify /* constr frac_null(): Library.Frac.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_null
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, frac_null
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, frac_null
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, frac_null
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, frac_null
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frac_null
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frac_null
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr frac_null(): Library.Frac.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.id
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 5
[Debug] old id n -> 1
[Debug] fresh id n -> 2
[Debug] Keyset: 5
[Debug] old id ret -> 19
[Debug] fresh id ret -> 20
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.valid.n^2
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.valid.ret^20
[Debug] SymbolTbl.resolve_and_find: frac_proj1
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frac_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frac_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frac_proj1; qual_ident = Library.Frac.frac_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: frac_proj2
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frac_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frac_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frac_proj2; qual_ident = Library.Frac.frac_proj2
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: frac_chunk
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frac_chunk
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frac_chunk
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frac_chunk; qual_ident = Library.Frac.frac_chunk
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frac_proj2; qual_ident = Library.Frac.frac_proj2
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frac_proj2; qual_ident = Library.Frac.frac_proj2
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: frac_null
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frac_null
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frac_null
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frac_null; qual_ident = Library.Frac.frac_null
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: n^2
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac.valid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: n^2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: ret^20, n^2
[Debug] SymbolTbl.resolve.go_forward: ids2: n^2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: n^2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid.n^2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: n^2
[Debug] Rewriter.Symbol.reify var n^2 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frac_chunk
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.frac_chunk
[Debug] Rewriter.Symbol.reify /* constr frac_chunk(Library.Frac.X.T,
        Real): Library.Frac.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, frac_chunk
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, frac_chunk
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, frac_chunk
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, frac_chunk
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frac_chunk
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frac_chunk
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr frac_chunk(Library.Frac.X.T,
        Real): Library.Frac.T */
[Debug] SymbolTbl.resolve_and_find: frac_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj1(Library.Frac.T): Library.Frac.X.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, frac_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, frac_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, frac_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, frac_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frac_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frac_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj1(Library.Frac.T): Library.Frac.X.T */
[Debug] SymbolTbl.resolve_and_find: n^2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: n^2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid.n^2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: n^2
[Debug] Rewriter.Symbol.reify var n^2 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, X, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, X, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, X, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, X, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: X, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: X, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: found Alias: <Library.Type,  >
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Type, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Type, T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.Frac.X
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Type, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Type, T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.Frac.X
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Type
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: T
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.Frac.X
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, frac_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, frac_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, frac_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, frac_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frac_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frac_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: n^2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: n^2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid.n^2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: n^2
[Debug] Rewriter.Symbol.reify var n^2 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: n^2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: n^2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid.n^2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: n^2
[Debug] Rewriter.Symbol.reify var n^2 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: n^2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: n^2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid.n^2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: n^2
[Debug] Rewriter.Symbol.reify var n^2 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: n^2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: n^2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid.n^2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: n^2
[Debug] Rewriter.Symbol.reify var n^2 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: n^2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: n^2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid.n^2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: n^2
[Debug] Rewriter.Symbol.reify var n^2 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frac_null
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.frac_null
[Debug] Rewriter.Symbol.reify /* constr frac_null(): Library.Frac.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_null
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, frac_null
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, frac_null
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, frac_null
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, frac_null
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frac_null
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frac_null
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr frac_null(): Library.Frac.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 5
[Debug] old id a -> 75
[Debug] fresh id a -> 76
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 5
[Debug] old id b -> 55
[Debug] fresh id b -> 56
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 5
[Debug] old id ret -> 20
[Debug] fresh id ret -> 21
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.comp.a^76
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.comp.b^56
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.comp.ret^21
[Debug] SymbolTbl.resolve_and_find: frac_null
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frac_null
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frac_null
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frac_null; qual_ident = Library.Frac.frac_null
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: frac_null
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frac_null; qual_ident = Library.Frac.frac_null
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Frac.valid
[Debug] Rewriter.is_local: qual_ident = Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Frac.valid
[Debug] Rewriter.is_local: qual_ident = Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: frac_proj1
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frac_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frac_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frac_proj1; qual_ident = Library.Frac.frac_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: frac_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frac_proj1; qual_ident = Library.Frac.frac_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: frac_proj2
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frac_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frac_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frac_proj2; qual_ident = Library.Frac.frac_proj2
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frac_proj2; qual_ident = Library.Frac.frac_proj2
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frac_proj2; qual_ident = Library.Frac.frac_proj2
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frac_proj2; qual_ident = Library.Frac.frac_proj2
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: frac_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frac_proj1; qual_ident = Library.Frac.frac_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frac_proj2; qual_ident = Library.Frac.frac_proj2
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frac_proj2; qual_ident = Library.Frac.frac_proj2
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: frac_chunk
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frac_chunk
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frac_chunk
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frac_chunk; qual_ident = Library.Frac.frac_chunk
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: frac_top
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frac_top
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frac_top
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_top
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_top
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frac_top; qual_ident = Library.Frac.frac_top
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frac_top
[Debug] SymbolTbl.resolve_and_find: frac_top
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_top
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_top
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frac_top; qual_ident = Library.Frac.frac_top
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frac_top
[Debug] SymbolTbl.resolve_and_find: a^76
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac.comp
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^76
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^76, ret^21, b^56
[Debug] SymbolTbl.resolve.go_forward: ids2: a^76
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^76
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp.a^76
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^76
[Debug] Rewriter.Symbol.reify var a^76 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frac_null
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.frac_null
[Debug] Rewriter.Symbol.reify /* constr frac_null(): Library.Frac.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_null
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, frac_null
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, frac_null
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, frac_null
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, frac_null
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frac_null
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frac_null
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr frac_null(): Library.Frac.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^56
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac.comp
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^56
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^76, ret^21, b^56
[Debug] SymbolTbl.resolve.go_forward: ids2: b^56
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^56
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp.b^56
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^56
[Debug] Rewriter.Symbol.reify var b^56 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^56
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^56
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp.b^56
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^56
[Debug] Rewriter.Symbol.reify var b^56 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frac_null
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.frac_null
[Debug] Rewriter.Symbol.reify /* constr frac_null(): Library.Frac.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr frac_null(): Library.Frac.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^76
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^76
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp.a^76
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^76
[Debug] Rewriter.Symbol.reify var a^76 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.valid
[Debug] Rewriter.Symbol.reify func valid(n^2: Library.Frac.T)
                                returns (ret^20: Bool)
        {
          ite(n^2 == Library.Frac.frac_chunk(Library.Frac.frac_proj1(n^2),
          Library.Frac.frac_proj2(n^2)), Library.Frac.frac_proj2(n^2) > 0. &&
          Library.Frac.frac_proj2(n^2) <= 1., ite(n^2 ==
          Library.Frac.frac_null, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: a^76
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^76
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp.a^76
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^76
[Debug] Rewriter.Symbol.reify var a^76 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.valid
[Debug] Rewriter.Symbol.reify func valid(n^2: Library.Frac.T)
                                returns (ret^20: Bool)
        {
          ite(n^2 == Library.Frac.frac_chunk(Library.Frac.frac_proj1(n^2),
          Library.Frac.frac_proj2(n^2)), Library.Frac.frac_proj2(n^2) > 0. &&
          Library.Frac.frac_proj2(n^2) <= 1., ite(n^2 ==
          Library.Frac.frac_null, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: b^56
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^56
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp.b^56
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^56
[Debug] Rewriter.Symbol.reify var b^56 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.valid
[Debug] Rewriter.Symbol.reify func valid(n^2: Library.Frac.T)
                                returns (ret^20: Bool)
        {
          ite(n^2 == Library.Frac.frac_chunk(Library.Frac.frac_proj1(n^2),
          Library.Frac.frac_proj2(n^2)), Library.Frac.frac_proj2(n^2) > 0. &&
          Library.Frac.frac_proj2(n^2) <= 1., ite(n^2 ==
          Library.Frac.frac_null, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: a^76
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^76
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp.a^76
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^76
[Debug] Rewriter.Symbol.reify var a^76 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frac_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj1(Library.Frac.T): Library.Frac.X.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, frac_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, frac_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, frac_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, frac_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frac_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frac_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj1(Library.Frac.T): Library.Frac.X.T */
[Debug] SymbolTbl.resolve_and_find: a^76
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^76
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp.a^76
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^76
[Debug] Rewriter.Symbol.reify var a^76 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, X, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, X, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, X, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, X, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: X, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: X, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: found Alias: <Library.Type,  >
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Type, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Type, T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.Frac.X
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Type, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Type, T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.Frac.X
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Type
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: T
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.Frac.X
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: frac_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj1(Library.Frac.T): Library.Frac.X.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj1(Library.Frac.T): Library.Frac.X.T */
[Debug] SymbolTbl.resolve_and_find: b^56
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^56
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp.b^56
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^56
[Debug] Rewriter.Symbol.reify var b^56 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, frac_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, frac_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, frac_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, frac_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frac_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frac_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: a^76
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^76
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp.a^76
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^76
[Debug] Rewriter.Symbol.reify var a^76 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: b^56
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^56
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp.b^56
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^56
[Debug] Rewriter.Symbol.reify var b^56 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj1(Library.Frac.T): Library.Frac.X.T */
[Debug] SymbolTbl.resolve_and_find: a^76
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^76
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp.a^76
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^76
[Debug] Rewriter.Symbol.reify var a^76 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj1(Library.Frac.T): Library.Frac.X.T */
[Debug] SymbolTbl.resolve_and_find: b^56
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^56
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp.b^56
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^56
[Debug] Rewriter.Symbol.reify var b^56 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: a^76
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^76
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp.a^76
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^76
[Debug] Rewriter.Symbol.reify var a^76 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: b^56
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^56
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp.b^56
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^56
[Debug] Rewriter.Symbol.reify var b^56 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj1(Library.Frac.T): Library.Frac.X.T */
[Debug] SymbolTbl.resolve_and_find: a^76
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^76
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp.a^76
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^76
[Debug] Rewriter.Symbol.reify var a^76 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj1(Library.Frac.T): Library.Frac.X.T */
[Debug] SymbolTbl.resolve_and_find: b^56
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^56
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp.b^56
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^56
[Debug] Rewriter.Symbol.reify var b^56 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: a^76
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^76
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp.a^76
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^76
[Debug] Rewriter.Symbol.reify var a^76 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: b^56
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^56
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp.b^56
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^56
[Debug] Rewriter.Symbol.reify var b^56 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj1(Library.Frac.T): Library.Frac.X.T */
[Debug] SymbolTbl.resolve_and_find: a^76
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^76
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp.a^76
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^76
[Debug] Rewriter.Symbol.reify var a^76 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj1(Library.Frac.T): Library.Frac.X.T */
[Debug] SymbolTbl.resolve_and_find: b^56
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^56
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp.b^56
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^56
[Debug] Rewriter.Symbol.reify var b^56 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: frac_chunk
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.frac_chunk
[Debug] Rewriter.Symbol.reify /* constr frac_chunk(Library.Frac.X.T,
        Real): Library.Frac.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, frac_chunk
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, frac_chunk
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, frac_chunk
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, frac_chunk
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frac_chunk
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frac_chunk
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr frac_chunk(Library.Frac.X.T,
        Real): Library.Frac.T */
[Debug] SymbolTbl.resolve_and_find: frac_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj1(Library.Frac.T): Library.Frac.X.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj1(Library.Frac.T): Library.Frac.X.T */
[Debug] SymbolTbl.resolve_and_find: a^76
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^76
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp.a^76
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^76
[Debug] Rewriter.Symbol.reify var a^76 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: a^76
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^76
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp.a^76
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^76
[Debug] Rewriter.Symbol.reify var a^76 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: b^56
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^56
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp.b^56
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^56
[Debug] Rewriter.Symbol.reify var b^56 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frac_top
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_top
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_top
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.frac_top
[Debug] Rewriter.Symbol.reify /* constr frac_top(): Library.Frac.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_top
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, frac_top
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, frac_top
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, frac_top
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, frac_top
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frac_top
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frac_top
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_top
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_top
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr frac_top(): Library.Frac.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frac_top
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_top
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_top
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.frac_top
[Debug] Rewriter.Symbol.reify /* constr frac_top(): Library.Frac.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_top
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_top
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_top
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr frac_top(): Library.Frac.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 5
[Debug] old id a -> 76
[Debug] fresh id a -> 77
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 5
[Debug] old id b -> 56
[Debug] fresh id b -> 57
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 5
[Debug] old id ret -> 21
[Debug] fresh id ret -> 22
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.frame.a^77
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.frame.b^57
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.frame.ret^22
[Debug] SymbolTbl.resolve_and_find: frac_null
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frac_null
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frac_null
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frac_null; qual_ident = Library.Frac.frac_null
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: frac_proj1
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frac_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frac_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frac_proj1; qual_ident = Library.Frac.frac_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: frac_proj2
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frac_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frac_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frac_proj2; qual_ident = Library.Frac.frac_proj2
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: frac_chunk
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frac_chunk
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frac_chunk
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frac_chunk; qual_ident = Library.Frac.frac_chunk
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: frac_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frac_proj1; qual_ident = Library.Frac.frac_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frac_proj2; qual_ident = Library.Frac.frac_proj2
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: frac_chunk
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frac_chunk; qual_ident = Library.Frac.frac_chunk
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Frac.valid
[Debug] Rewriter.is_local: qual_ident = Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Frac.valid
[Debug] Rewriter.is_local: qual_ident = Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: frac_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frac_proj1; qual_ident = Library.Frac.frac_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: frac_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frac_proj1; qual_ident = Library.Frac.frac_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frac_proj2; qual_ident = Library.Frac.frac_proj2
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frac_proj2; qual_ident = Library.Frac.frac_proj2
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: frac_null
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frac_null; qual_ident = Library.Frac.frac_null
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: frac_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frac_proj1; qual_ident = Library.Frac.frac_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frac_proj2; qual_ident = Library.Frac.frac_proj2
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frac_proj2; qual_ident = Library.Frac.frac_proj2
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: frac_chunk
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frac_chunk; qual_ident = Library.Frac.frac_chunk
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: frac_top
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frac_top
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frac_top
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_top
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_top
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frac_top; qual_ident = Library.Frac.frac_top
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frac_top
[Debug] SymbolTbl.resolve_and_find: frac_top
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_top
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_top
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frac_top; qual_ident = Library.Frac.frac_top
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frac_top
[Debug] SymbolTbl.resolve_and_find: b^57
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac.frame
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^57
[Debug] SymbolTbl.resolve.go_forward: scope_entries: ret^22, b^57, a^77
[Debug] SymbolTbl.resolve.go_forward: ids2: b^57
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^57
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.b^57
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^57
[Debug] Rewriter.Symbol.reify var b^57 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frac_null
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.frac_null
[Debug] Rewriter.Symbol.reify /* constr frac_null(): Library.Frac.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_null
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, frac_null
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, frac_null
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, frac_null
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, frac_null
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frac_null
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frac_null
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr frac_null(): Library.Frac.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^77
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac.frame
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^77
[Debug] SymbolTbl.resolve.go_forward: scope_entries: ret^22, b^57, a^77
[Debug] SymbolTbl.resolve.go_forward: ids2: a^77
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^77
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.a^77
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^77
[Debug] Rewriter.Symbol.reify var a^77 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^77
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^77
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.a^77
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^77
[Debug] Rewriter.Symbol.reify var a^77 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frac_chunk
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.frac_chunk
[Debug] Rewriter.Symbol.reify /* constr frac_chunk(Library.Frac.X.T,
        Real): Library.Frac.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, frac_chunk
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, frac_chunk
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, frac_chunk
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, frac_chunk
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frac_chunk
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frac_chunk
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr frac_chunk(Library.Frac.X.T,
        Real): Library.Frac.T */
[Debug] SymbolTbl.resolve_and_find: frac_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj1(Library.Frac.T): Library.Frac.X.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, frac_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, frac_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, frac_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, frac_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frac_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frac_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj1(Library.Frac.T): Library.Frac.X.T */
[Debug] SymbolTbl.resolve_and_find: a^77
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^77
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.a^77
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^77
[Debug] Rewriter.Symbol.reify var a^77 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, X, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, X, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, X, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, X, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: X, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: X, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: found Alias: <Library.Type,  >
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Type, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Type, T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.Frac.X
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Type, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Type, T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.Frac.X
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Type
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: T
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.Frac.X
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, frac_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, frac_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, frac_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, frac_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frac_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frac_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: a^77
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^77
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.a^77
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^77
[Debug] Rewriter.Symbol.reify var a^77 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^57
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^57
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.b^57
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^57
[Debug] Rewriter.Symbol.reify var b^57 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frac_chunk
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.frac_chunk
[Debug] Rewriter.Symbol.reify /* constr frac_chunk(Library.Frac.X.T,
        Real): Library.Frac.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr frac_chunk(Library.Frac.X.T,
        Real): Library.Frac.T */
[Debug] SymbolTbl.resolve_and_find: frac_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj1(Library.Frac.T): Library.Frac.X.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj1(Library.Frac.T): Library.Frac.X.T */
[Debug] SymbolTbl.resolve_and_find: b^57
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^57
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.b^57
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^57
[Debug] Rewriter.Symbol.reify var b^57 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: b^57
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^57
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.b^57
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^57
[Debug] Rewriter.Symbol.reify var b^57 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^77
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^77
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.a^77
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^77
[Debug] Rewriter.Symbol.reify var a^77 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr frac_chunk(Library.Frac.X.T,
        Real): Library.Frac.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj1(Library.Frac.T): Library.Frac.X.T */
[Debug] SymbolTbl.resolve_and_find: a^77
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^77
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.a^77
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^77
[Debug] Rewriter.Symbol.reify var a^77 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: a^77
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^77
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.a^77
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^77
[Debug] Rewriter.Symbol.reify var a^77 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.valid
[Debug] Rewriter.Symbol.reify func valid(n^2: Library.Frac.T)
                                returns (ret^20: Bool)
        {
          ite(n^2 == Library.Frac.frac_chunk(Library.Frac.frac_proj1(n^2),
          Library.Frac.frac_proj2(n^2)), Library.Frac.frac_proj2(n^2) > 0. &&
          Library.Frac.frac_proj2(n^2) <= 1., ite(n^2 ==
          Library.Frac.frac_null, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: a^77
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^77
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.a^77
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^77
[Debug] Rewriter.Symbol.reify var a^77 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^77
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^77
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.a^77
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^77
[Debug] Rewriter.Symbol.reify var a^77 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr frac_chunk(Library.Frac.X.T,
        Real): Library.Frac.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj1(Library.Frac.T): Library.Frac.X.T */
[Debug] SymbolTbl.resolve_and_find: a^77
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^77
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.a^77
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^77
[Debug] Rewriter.Symbol.reify var a^77 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: a^77
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^77
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.a^77
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^77
[Debug] Rewriter.Symbol.reify var a^77 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^57
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^57
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.b^57
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^57
[Debug] Rewriter.Symbol.reify var b^57 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr frac_chunk(Library.Frac.X.T,
        Real): Library.Frac.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj1(Library.Frac.T): Library.Frac.X.T */
[Debug] SymbolTbl.resolve_and_find: b^57
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^57
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.b^57
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^57
[Debug] Rewriter.Symbol.reify var b^57 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: b^57
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^57
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.b^57
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^57
[Debug] Rewriter.Symbol.reify var b^57 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^77
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^77
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.a^77
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^77
[Debug] Rewriter.Symbol.reify var a^77 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr frac_chunk(Library.Frac.X.T,
        Real): Library.Frac.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj1(Library.Frac.T): Library.Frac.X.T */
[Debug] SymbolTbl.resolve_and_find: a^77
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^77
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.a^77
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^77
[Debug] Rewriter.Symbol.reify var a^77 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: a^77
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^77
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.a^77
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^77
[Debug] Rewriter.Symbol.reify var a^77 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.valid
[Debug] Rewriter.Symbol.reify func valid(n^2: Library.Frac.T)
                                returns (ret^20: Bool)
        {
          ite(n^2 == Library.Frac.frac_chunk(Library.Frac.frac_proj1(n^2),
          Library.Frac.frac_proj2(n^2)), Library.Frac.frac_proj2(n^2) > 0. &&
          Library.Frac.frac_proj2(n^2) <= 1., ite(n^2 ==
          Library.Frac.frac_null, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: b^57
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^57
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.b^57
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^57
[Debug] Rewriter.Symbol.reify var b^57 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^77
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^77
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.a^77
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^77
[Debug] Rewriter.Symbol.reify var a^77 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr frac_chunk(Library.Frac.X.T,
        Real): Library.Frac.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj1(Library.Frac.T): Library.Frac.X.T */
[Debug] SymbolTbl.resolve_and_find: a^77
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^77
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.a^77
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^77
[Debug] Rewriter.Symbol.reify var a^77 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: a^77
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^77
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.a^77
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^77
[Debug] Rewriter.Symbol.reify var a^77 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^57
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^57
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.b^57
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^57
[Debug] Rewriter.Symbol.reify var b^57 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr frac_chunk(Library.Frac.X.T,
        Real): Library.Frac.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj1(Library.Frac.T): Library.Frac.X.T */
[Debug] SymbolTbl.resolve_and_find: b^57
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^57
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.b^57
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^57
[Debug] Rewriter.Symbol.reify var b^57 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: b^57
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^57
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.b^57
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^57
[Debug] Rewriter.Symbol.reify var b^57 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^77
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^77
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.a^77
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^77
[Debug] Rewriter.Symbol.reify var a^77 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr frac_chunk(Library.Frac.X.T,
        Real): Library.Frac.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj1(Library.Frac.T): Library.Frac.X.T */
[Debug] SymbolTbl.resolve_and_find: a^77
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^77
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.a^77
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^77
[Debug] Rewriter.Symbol.reify var a^77 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: a^77
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^77
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.a^77
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^77
[Debug] Rewriter.Symbol.reify var a^77 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.valid
[Debug] Rewriter.Symbol.reify func valid(n^2: Library.Frac.T)
                                returns (ret^20: Bool)
        {
          ite(n^2 == Library.Frac.frac_chunk(Library.Frac.frac_proj1(n^2),
          Library.Frac.frac_proj2(n^2)), Library.Frac.frac_proj2(n^2) > 0. &&
          Library.Frac.frac_proj2(n^2) <= 1., ite(n^2 ==
          Library.Frac.frac_null, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: a^77
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^77
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.a^77
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^77
[Debug] Rewriter.Symbol.reify var a^77 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^77
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^77
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.a^77
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^77
[Debug] Rewriter.Symbol.reify var a^77 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr frac_chunk(Library.Frac.X.T,
        Real): Library.Frac.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj1(Library.Frac.T): Library.Frac.X.T */
[Debug] SymbolTbl.resolve_and_find: a^77
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^77
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.a^77
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^77
[Debug] Rewriter.Symbol.reify var a^77 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: a^77
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^77
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.a^77
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^77
[Debug] Rewriter.Symbol.reify var a^77 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^57
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^57
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.b^57
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^57
[Debug] Rewriter.Symbol.reify var b^57 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr frac_chunk(Library.Frac.X.T,
        Real): Library.Frac.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj1(Library.Frac.T): Library.Frac.X.T */
[Debug] SymbolTbl.resolve_and_find: b^57
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^57
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.b^57
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^57
[Debug] Rewriter.Symbol.reify var b^57 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: b^57
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^57
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.b^57
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^57
[Debug] Rewriter.Symbol.reify var b^57 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^77
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^77
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.a^77
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^77
[Debug] Rewriter.Symbol.reify var a^77 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr frac_chunk(Library.Frac.X.T,
        Real): Library.Frac.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj1(Library.Frac.T): Library.Frac.X.T */
[Debug] SymbolTbl.resolve_and_find: a^77
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^77
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.a^77
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^77
[Debug] Rewriter.Symbol.reify var a^77 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: a^77
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^77
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.a^77
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^77
[Debug] Rewriter.Symbol.reify var a^77 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frac_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj1(Library.Frac.T): Library.Frac.X.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj1(Library.Frac.T): Library.Frac.X.T */
[Debug] SymbolTbl.resolve_and_find: a^77
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^77
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.a^77
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^77
[Debug] Rewriter.Symbol.reify var a^77 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: frac_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj1(Library.Frac.T): Library.Frac.X.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj1(Library.Frac.T): Library.Frac.X.T */
[Debug] SymbolTbl.resolve_and_find: b^57
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^57
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.b^57
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^57
[Debug] Rewriter.Symbol.reify var b^57 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: a^77
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^77
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.a^77
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^77
[Debug] Rewriter.Symbol.reify var a^77 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: b^57
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^57
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.b^57
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^57
[Debug] Rewriter.Symbol.reify var b^57 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frac_null
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.frac_null
[Debug] Rewriter.Symbol.reify /* constr frac_null(): Library.Frac.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr frac_null(): Library.Frac.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frac_chunk
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.frac_chunk
[Debug] Rewriter.Symbol.reify /* constr frac_chunk(Library.Frac.X.T,
        Real): Library.Frac.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr frac_chunk(Library.Frac.X.T,
        Real): Library.Frac.T */
[Debug] SymbolTbl.resolve_and_find: frac_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj1(Library.Frac.T): Library.Frac.X.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj1(Library.Frac.T): Library.Frac.X.T */
[Debug] SymbolTbl.resolve_and_find: a^77
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^77
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.a^77
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^77
[Debug] Rewriter.Symbol.reify var a^77 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: a^77
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^77
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.a^77
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^77
[Debug] Rewriter.Symbol.reify var a^77 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: b^57
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^57
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame.b^57
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^57
[Debug] Rewriter.Symbol.reify var b^57 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frac_top
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_top
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_top
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.frac_top
[Debug] Rewriter.Symbol.reify /* constr frac_top(): Library.Frac.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_top
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, frac_top
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, frac_top
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, frac_top
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, frac_top
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frac_top
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frac_top
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_top
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_top
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr frac_top(): Library.Frac.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frac_top
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_top
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_top
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.frac_top
[Debug] Rewriter.Symbol.reify /* constr frac_top(): Library.Frac.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_top
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_top
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_top
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr frac_top(): Library.Frac.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frame
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 5
[Debug] old id a -> 77
[Debug] fresh id a -> 78
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 5
[Debug] old id b -> 57
[Debug] fresh id b -> 58
[Debug] Keyset: 5
[Debug] old id ret -> 22
[Debug] fresh id ret -> 23
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.fpuAllowed.a^78
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.fpuAllowed.b^58
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.fpuAllowed.ret^23
[Debug] SymbolTbl.resolve_and_find: frac_proj1
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frac_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frac_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frac_proj1; qual_ident = Library.Frac.frac_proj1
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: frac_proj2
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frac_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frac_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frac_proj2; qual_ident = Library.Frac.frac_proj2
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: frac_chunk
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frac_chunk
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frac_chunk
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frac_chunk; qual_ident = Library.Frac.frac_chunk
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frac_proj2; qual_ident = Library.Frac.frac_proj2
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Frac.valid
[Debug] Rewriter.is_local: qual_ident = Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: frac_top
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frac_top
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frac_top
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_top
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_top
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frac_top; qual_ident = Library.Frac.frac_top
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frac_top
[Debug] SymbolTbl.resolve_and_find: a^78
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac.fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^78
[Debug] SymbolTbl.resolve.go_forward: scope_entries: ret^23, b^58, a^78
[Debug] SymbolTbl.resolve.go_forward: ids2: a^78
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^78
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuAllowed.a^78
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^78
[Debug] Rewriter.Symbol.reify var a^78 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^58
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac.fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^58
[Debug] SymbolTbl.resolve.go_forward: scope_entries: ret^23, b^58, a^78
[Debug] SymbolTbl.resolve.go_forward: ids2: b^58
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^58
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuAllowed.b^58
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^58
[Debug] Rewriter.Symbol.reify var b^58 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^78
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^78
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuAllowed.a^78
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^78
[Debug] Rewriter.Symbol.reify var a^78 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frac_chunk
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.frac_chunk
[Debug] Rewriter.Symbol.reify /* constr frac_chunk(Library.Frac.X.T,
        Real): Library.Frac.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, frac_chunk
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, frac_chunk
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, frac_chunk
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, frac_chunk
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frac_chunk
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frac_chunk
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_chunk
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr frac_chunk(Library.Frac.X.T,
        Real): Library.Frac.T */
[Debug] SymbolTbl.resolve_and_find: frac_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj1(Library.Frac.T): Library.Frac.X.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, frac_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, frac_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, frac_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, frac_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frac_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frac_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj1(Library.Frac.T): Library.Frac.X.T */
[Debug] SymbolTbl.resolve_and_find: a^78
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^78
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuAllowed.a^78
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^78
[Debug] Rewriter.Symbol.reify var a^78 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, X, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, X, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, X, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, X, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: X, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: X, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: found Alias: <Library.Type,  >
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Type, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Type, T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.Frac.X
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Type, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Type, T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.Frac.X
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Type
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: T
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.Frac.X
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.Frac.X ]

[Debug] SymbolTbl.resolve_and_find: frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, frac_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, frac_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, frac_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, frac_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frac_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frac_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: a^78
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^78
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuAllowed.a^78
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^78
[Debug] Rewriter.Symbol.reify var a^78 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: a^78
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^78
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuAllowed.a^78
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^78
[Debug] Rewriter.Symbol.reify var a^78 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.valid
[Debug] Rewriter.Symbol.reify func valid(n^2: Library.Frac.T)
                                returns (ret^20: Bool)
        {
          ite(n^2 == Library.Frac.frac_chunk(Library.Frac.frac_proj1(n^2),
          Library.Frac.frac_proj2(n^2)), Library.Frac.frac_proj2(n^2) > 0. &&
          Library.Frac.frac_proj2(n^2) <= 1., ite(n^2 ==
          Library.Frac.frac_null, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: b^58
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^58
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuAllowed.b^58
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^58
[Debug] Rewriter.Symbol.reify var b^58 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr frac_proj2(Library.Frac.T): Real */
[Debug] SymbolTbl.resolve_and_find: a^78
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^78
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuAllowed.a^78
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^78
[Debug] Rewriter.Symbol.reify var a^78 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^78
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^78
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuAllowed.a^78
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^78
[Debug] Rewriter.Symbol.reify var a^78 : Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frac_top
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_top
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_top
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.frac_top
[Debug] Rewriter.Symbol.reify /* constr frac_top(): Library.Frac.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frac_top
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, frac_top
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, frac_top
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, frac_top
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, frac_top
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frac_top
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frac_top
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frac_top
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frac_top
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr frac_top(): Library.Frac.T */
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.fpuAllowed
[Debug] Keyset: 5
[Debug] old id a -> 78
[Debug] fresh id a -> 79
[Debug] Keyset: 5
[Debug] old id b -> 58
[Debug] fresh id b -> 59
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Frac.comp
[Debug] Rewriter.is_local: qual_ident = Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Frac.valid
[Debug] Rewriter.is_local: qual_ident = Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Frac.comp
[Debug] Rewriter.is_local: qual_ident = Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.Frac.frame
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frame
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.frameCompInv.a^79
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.frameCompInv.b^59
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.valid
[Debug] Rewriter.Symbol.reify func valid(n^2: Library.Frac.T)
                                returns (ret^20: Bool)
        {
          ite(n^2 == Library.Frac.frac_chunk(Library.Frac.frac_proj1(n^2),
          Library.Frac.frac_proj2(n^2)), Library.Frac.frac_proj2(n^2) > 0. &&
          Library.Frac.frac_proj2(n^2) <= 1., ite(n^2 ==
          Library.Frac.frac_null, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.comp
[Debug] Rewriter.Symbol.reify func comp(a^76: Library.Frac.T, b^56:
                                        Library.Frac.T)
                                returns (ret^21: Library.Frac.T)
        {
          ite(a^76 == Library.Frac.frac_null, b^56, ite(b^56 ==
          Library.Frac.frac_null, a^76, ite(Library.Frac.valid(a^76) &&
          Library.Frac.valid(b^56), ite(Library.Frac.frac_proj1(a^76) ==
          Library.Frac.frac_proj1(b^56) && Library.Frac.frac_proj2(a^76) +
          Library.Frac.frac_proj2(b^56) > 0. &&
          Library.Frac.frac_proj2(a^76) + Library.Frac.frac_proj2(b^56) <=
          1., Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^76),
          Library.Frac.frac_proj2(a^76) + Library.Frac.frac_proj2(b^56)),
          Library.Frac.frac_top), Library.Frac.frac_top)))
        }
[Debug] SymbolTbl.resolve_and_find: a^79
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac.frameCompInv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^79
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^59, a^79
[Debug] SymbolTbl.resolve.go_forward: ids2: a^79
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^79
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frameCompInv.a^79
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^79
[Debug] Rewriter.Symbol.reify var a^79 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^59
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac.frameCompInv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^59
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^59, a^79
[Debug] SymbolTbl.resolve.go_forward: ids2: b^59
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^59
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frameCompInv.b^59
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^59
[Debug] Rewriter.Symbol.reify var b^59 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.frame
[Debug] Rewriter.Symbol.reify func frame(a^77: Library.Frac.T, b^57:
                                         Library.Frac.T)
                                returns (ret^22: Library.Frac.T)
        {
          ite(b^57 == Library.Frac.frac_null, a^77, ite(a^77 ==
          Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^77),
          Library.Frac.frac_proj2(a^77)) && b^57 ==
          Library.Frac.frac_chunk(Library.Frac.frac_proj1(b^57),
          Library.Frac.frac_proj2(b^57)) && Library.Frac.valid(a^77) &&
          Library.Frac.valid(b^57), ite(Library.Frac.frac_proj1(a^77) ==
          Library.Frac.frac_proj1(b^57), ite(Library.Frac.frac_proj2(a^77) ==
          Library.Frac.frac_proj2(b^57), Library.Frac.frac_null,
          Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^77),
          Library.Frac.frac_proj2(a^77) - Library.Frac.frac_proj2(b^57))),
          Library.Frac.frac_top), Library.Frac.frac_top))
        }
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.comp
[Debug] Rewriter.Symbol.reify func comp(a^76: Library.Frac.T, b^56:
                                        Library.Frac.T)
                                returns (ret^21: Library.Frac.T)
        {
          ite(a^76 == Library.Frac.frac_null, b^56, ite(b^56 ==
          Library.Frac.frac_null, a^76, ite(Library.Frac.valid(a^76) &&
          Library.Frac.valid(b^56), ite(Library.Frac.frac_proj1(a^76) ==
          Library.Frac.frac_proj1(b^56) && Library.Frac.frac_proj2(a^76) +
          Library.Frac.frac_proj2(b^56) > 0. &&
          Library.Frac.frac_proj2(a^76) + Library.Frac.frac_proj2(b^56) <=
          1., Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^76),
          Library.Frac.frac_proj2(a^76) + Library.Frac.frac_proj2(b^56)),
          Library.Frac.frac_top), Library.Frac.frac_top)))
        }
[Debug] SymbolTbl.resolve_and_find: a^79
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^79
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frameCompInv.a^79
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^79
[Debug] Rewriter.Symbol.reify var a^79 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^59
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^59
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frameCompInv.b^59
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^59
[Debug] Rewriter.Symbol.reify var b^59 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^59
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^59
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frameCompInv.b^59
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^59
[Debug] Rewriter.Symbol.reify var b^59 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^79
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^79
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frameCompInv.a^79
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^79
[Debug] Rewriter.Symbol.reify var a^79 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.valid
[Debug] Rewriter.Symbol.reify func valid(n^2: Library.Frac.T)
                                returns (ret^20: Bool)
        {
          ite(n^2 == Library.Frac.frac_chunk(Library.Frac.frac_proj1(n^2),
          Library.Frac.frac_proj2(n^2)), Library.Frac.frac_proj2(n^2) > 0. &&
          Library.Frac.frac_proj2(n^2) <= 1., ite(n^2 ==
          Library.Frac.frac_null, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: Library.Frac.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.comp
[Debug] Rewriter.Symbol.reify func comp(a^76: Library.Frac.T, b^56:
                                        Library.Frac.T)
                                returns (ret^21: Library.Frac.T)
        {
          ite(a^76 == Library.Frac.frac_null, b^56, ite(b^56 ==
          Library.Frac.frac_null, a^76, ite(Library.Frac.valid(a^76) &&
          Library.Frac.valid(b^56), ite(Library.Frac.frac_proj1(a^76) ==
          Library.Frac.frac_proj1(b^56) && Library.Frac.frac_proj2(a^76) +
          Library.Frac.frac_proj2(b^56) > 0. &&
          Library.Frac.frac_proj2(a^76) + Library.Frac.frac_proj2(b^56) <=
          1., Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^76),
          Library.Frac.frac_proj2(a^76) + Library.Frac.frac_proj2(b^56)),
          Library.Frac.frac_top), Library.Frac.frac_top)))
        }
[Debug] SymbolTbl.resolve_and_find: a^79
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^79
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frameCompInv.a^79
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^79
[Debug] Rewriter.Symbol.reify var a^79 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^59
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^59
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frameCompInv.b^59
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^59
[Debug] Rewriter.Symbol.reify var b^59 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameCompInv
[Debug] Keyset: 5
[Debug] old id a -> 79
[Debug] fresh id a -> 80
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Frac.valid
[Debug] Rewriter.is_local: qual_ident = Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.Frac.frame
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frame
[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = id; qual_ident = Library.Frac.id
[Debug] Rewriter.is_local: qual_ident = Library.Frac.id
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.frameReflexive.a^80
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.valid
[Debug] Rewriter.Symbol.reify func valid(n^2: Library.Frac.T)
                                returns (ret^20: Bool)
        {
          ite(n^2 == Library.Frac.frac_chunk(Library.Frac.frac_proj1(n^2),
          Library.Frac.frac_proj2(n^2)), Library.Frac.frac_proj2(n^2) > 0. &&
          Library.Frac.frac_proj2(n^2) <= 1., ite(n^2 ==
          Library.Frac.frac_null, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: a^80
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac.frameReflexive
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^80
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^80
[Debug] SymbolTbl.resolve.go_forward: ids2: a^80
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^80
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frameReflexive.a^80
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^80
[Debug] Rewriter.Symbol.reify var a^80 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.frame
[Debug] Rewriter.Symbol.reify func frame(a^77: Library.Frac.T, b^57:
                                         Library.Frac.T)
                                returns (ret^22: Library.Frac.T)
        {
          ite(b^57 == Library.Frac.frac_null, a^77, ite(a^77 ==
          Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^77),
          Library.Frac.frac_proj2(a^77)) && b^57 ==
          Library.Frac.frac_chunk(Library.Frac.frac_proj1(b^57),
          Library.Frac.frac_proj2(b^57)) && Library.Frac.valid(a^77) &&
          Library.Frac.valid(b^57), ite(Library.Frac.frac_proj1(a^77) ==
          Library.Frac.frac_proj1(b^57), ite(Library.Frac.frac_proj2(a^77) ==
          Library.Frac.frac_proj2(b^57), Library.Frac.frac_null,
          Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^77),
          Library.Frac.frac_proj2(a^77) - Library.Frac.frac_proj2(b^57))),
          Library.Frac.frac_top), Library.Frac.frac_top))
        }
[Debug] SymbolTbl.resolve_and_find: a^80
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^80
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frameReflexive.a^80
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^80
[Debug] Rewriter.Symbol.reify var a^80 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^80
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^80
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frameReflexive.a^80
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^80
[Debug] Rewriter.Symbol.reify var a^80 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.id
[Debug] Rewriter.Symbol.reify val id : Library.Frac.T =
                                    Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.valid
[Debug] Rewriter.Symbol.reify func valid(n^2: Library.Frac.T)
                                returns (ret^20: Bool)
        {
          ite(n^2 == Library.Frac.frac_chunk(Library.Frac.frac_proj1(n^2),
          Library.Frac.frac_proj2(n^2)), Library.Frac.frac_proj2(n^2) > 0. &&
          Library.Frac.frac_proj2(n^2) <= 1., ite(n^2 ==
          Library.Frac.frac_null, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: a^80
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^80
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frameReflexive.a^80
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^80
[Debug] Rewriter.Symbol.reify var a^80 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameReflexive
[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = id; qual_ident = Library.Frac.id
[Debug] Rewriter.is_local: qual_ident = Library.Frac.id
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Frac.valid
[Debug] Rewriter.is_local: qual_ident = Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.valid
[Debug] Rewriter.Symbol.reify func valid(n^2: Library.Frac.T)
                                returns (ret^20: Bool)
        {
          ite(n^2 == Library.Frac.frac_chunk(Library.Frac.frac_proj1(n^2),
          Library.Frac.frac_proj2(n^2)), Library.Frac.frac_proj2(n^2) > 0. &&
          Library.Frac.frac_proj2(n^2) <= 1., ite(n^2 ==
          Library.Frac.frac_null, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.id
[Debug] Rewriter.Symbol.reify val id : Library.Frac.T =
                                    Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.idValid
[Debug] Keyset: 5
[Debug] old id a -> 80
[Debug] fresh id a -> 81
[Debug] Keyset: 5
[Debug] old id b -> 59
[Debug] fresh id b -> 60
[Debug] Keyset: 5
[Debug] old id c -> 11
[Debug] fresh id c -> 12
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Frac.comp
[Debug] Rewriter.is_local: qual_ident = Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Frac.comp
[Debug] Rewriter.is_local: qual_ident = Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Frac.comp
[Debug] Rewriter.is_local: qual_ident = Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Frac.comp
[Debug] Rewriter.is_local: qual_ident = Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.compAssoc.a^81
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.compAssoc.b^60
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.compAssoc.c^12
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.comp
[Debug] Rewriter.Symbol.reify func comp(a^76: Library.Frac.T, b^56:
                                        Library.Frac.T)
                                returns (ret^21: Library.Frac.T)
        {
          ite(a^76 == Library.Frac.frac_null, b^56, ite(b^56 ==
          Library.Frac.frac_null, a^76, ite(Library.Frac.valid(a^76) &&
          Library.Frac.valid(b^56), ite(Library.Frac.frac_proj1(a^76) ==
          Library.Frac.frac_proj1(b^56) && Library.Frac.frac_proj2(a^76) +
          Library.Frac.frac_proj2(b^56) > 0. &&
          Library.Frac.frac_proj2(a^76) + Library.Frac.frac_proj2(b^56) <=
          1., Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^76),
          Library.Frac.frac_proj2(a^76) + Library.Frac.frac_proj2(b^56)),
          Library.Frac.frac_top), Library.Frac.frac_top)))
        }
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.comp
[Debug] Rewriter.Symbol.reify func comp(a^76: Library.Frac.T, b^56:
                                        Library.Frac.T)
                                returns (ret^21: Library.Frac.T)
        {
          ite(a^76 == Library.Frac.frac_null, b^56, ite(b^56 ==
          Library.Frac.frac_null, a^76, ite(Library.Frac.valid(a^76) &&
          Library.Frac.valid(b^56), ite(Library.Frac.frac_proj1(a^76) ==
          Library.Frac.frac_proj1(b^56) && Library.Frac.frac_proj2(a^76) +
          Library.Frac.frac_proj2(b^56) > 0. &&
          Library.Frac.frac_proj2(a^76) + Library.Frac.frac_proj2(b^56) <=
          1., Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^76),
          Library.Frac.frac_proj2(a^76) + Library.Frac.frac_proj2(b^56)),
          Library.Frac.frac_top), Library.Frac.frac_top)))
        }
[Debug] SymbolTbl.resolve_and_find: a^81
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac.compAssoc
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^81
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^60, a^81, c^12
[Debug] SymbolTbl.resolve.go_forward: ids2: a^81
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^81
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.compAssoc.a^81
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^81
[Debug] Rewriter.Symbol.reify var a^81 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^60
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac.compAssoc
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^60
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^60, a^81, c^12
[Debug] SymbolTbl.resolve.go_forward: ids2: b^60
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^60
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.compAssoc.b^60
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^60
[Debug] Rewriter.Symbol.reify var b^60 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^12
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac.compAssoc
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: c^12
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^60, a^81, c^12
[Debug] SymbolTbl.resolve.go_forward: ids2: c^12
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^12
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.compAssoc.c^12
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^12
[Debug] Rewriter.Symbol.reify var c^12 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.comp
[Debug] Rewriter.Symbol.reify func comp(a^76: Library.Frac.T, b^56:
                                        Library.Frac.T)
                                returns (ret^21: Library.Frac.T)
        {
          ite(a^76 == Library.Frac.frac_null, b^56, ite(b^56 ==
          Library.Frac.frac_null, a^76, ite(Library.Frac.valid(a^76) &&
          Library.Frac.valid(b^56), ite(Library.Frac.frac_proj1(a^76) ==
          Library.Frac.frac_proj1(b^56) && Library.Frac.frac_proj2(a^76) +
          Library.Frac.frac_proj2(b^56) > 0. &&
          Library.Frac.frac_proj2(a^76) + Library.Frac.frac_proj2(b^56) <=
          1., Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^76),
          Library.Frac.frac_proj2(a^76) + Library.Frac.frac_proj2(b^56)),
          Library.Frac.frac_top), Library.Frac.frac_top)))
        }
[Debug] SymbolTbl.resolve_and_find: a^81
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^81
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.compAssoc.a^81
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^81
[Debug] Rewriter.Symbol.reify var a^81 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.comp
[Debug] Rewriter.Symbol.reify func comp(a^76: Library.Frac.T, b^56:
                                        Library.Frac.T)
                                returns (ret^21: Library.Frac.T)
        {
          ite(a^76 == Library.Frac.frac_null, b^56, ite(b^56 ==
          Library.Frac.frac_null, a^76, ite(Library.Frac.valid(a^76) &&
          Library.Frac.valid(b^56), ite(Library.Frac.frac_proj1(a^76) ==
          Library.Frac.frac_proj1(b^56) && Library.Frac.frac_proj2(a^76) +
          Library.Frac.frac_proj2(b^56) > 0. &&
          Library.Frac.frac_proj2(a^76) + Library.Frac.frac_proj2(b^56) <=
          1., Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^76),
          Library.Frac.frac_proj2(a^76) + Library.Frac.frac_proj2(b^56)),
          Library.Frac.frac_top), Library.Frac.frac_top)))
        }
[Debug] SymbolTbl.resolve_and_find: b^60
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^60
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.compAssoc.b^60
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^60
[Debug] Rewriter.Symbol.reify var b^60 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^12
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^12
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.compAssoc.c^12
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^12
[Debug] Rewriter.Symbol.reify var c^12 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compAssoc
[Debug] Keyset: 5
[Debug] old id a -> 81
[Debug] fresh id a -> 82
[Debug] Keyset: 5
[Debug] old id b -> 60
[Debug] fresh id b -> 61
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Frac.comp
[Debug] Rewriter.is_local: qual_ident = Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Frac.comp
[Debug] Rewriter.is_local: qual_ident = Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.compCommute.a^82
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.compCommute.b^61
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.comp
[Debug] Rewriter.Symbol.reify func comp(a^76: Library.Frac.T, b^56:
                                        Library.Frac.T)
                                returns (ret^21: Library.Frac.T)
        {
          ite(a^76 == Library.Frac.frac_null, b^56, ite(b^56 ==
          Library.Frac.frac_null, a^76, ite(Library.Frac.valid(a^76) &&
          Library.Frac.valid(b^56), ite(Library.Frac.frac_proj1(a^76) ==
          Library.Frac.frac_proj1(b^56) && Library.Frac.frac_proj2(a^76) +
          Library.Frac.frac_proj2(b^56) > 0. &&
          Library.Frac.frac_proj2(a^76) + Library.Frac.frac_proj2(b^56) <=
          1., Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^76),
          Library.Frac.frac_proj2(a^76) + Library.Frac.frac_proj2(b^56)),
          Library.Frac.frac_top), Library.Frac.frac_top)))
        }
[Debug] SymbolTbl.resolve_and_find: a^82
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac.compCommute
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^82
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^61, a^82
[Debug] SymbolTbl.resolve.go_forward: ids2: a^82
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^82
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.compCommute.a^82
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^82
[Debug] Rewriter.Symbol.reify var a^82 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^61
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac.compCommute
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^61
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^61, a^82
[Debug] SymbolTbl.resolve.go_forward: ids2: b^61
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^61
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.compCommute.b^61
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^61
[Debug] Rewriter.Symbol.reify var b^61 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.comp
[Debug] Rewriter.Symbol.reify func comp(a^76: Library.Frac.T, b^56:
                                        Library.Frac.T)
                                returns (ret^21: Library.Frac.T)
        {
          ite(a^76 == Library.Frac.frac_null, b^56, ite(b^56 ==
          Library.Frac.frac_null, a^76, ite(Library.Frac.valid(a^76) &&
          Library.Frac.valid(b^56), ite(Library.Frac.frac_proj1(a^76) ==
          Library.Frac.frac_proj1(b^56) && Library.Frac.frac_proj2(a^76) +
          Library.Frac.frac_proj2(b^56) > 0. &&
          Library.Frac.frac_proj2(a^76) + Library.Frac.frac_proj2(b^56) <=
          1., Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^76),
          Library.Frac.frac_proj2(a^76) + Library.Frac.frac_proj2(b^56)),
          Library.Frac.frac_top), Library.Frac.frac_top)))
        }
[Debug] SymbolTbl.resolve_and_find: b^61
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^61
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.compCommute.b^61
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^61
[Debug] Rewriter.Symbol.reify var b^61 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^82
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^82
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.compCommute.a^82
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^82
[Debug] Rewriter.Symbol.reify var a^82 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compCommute
[Debug] Keyset: 5
[Debug] old id a -> 82
[Debug] fresh id a -> 83
[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = id; qual_ident = Library.Frac.id
[Debug] Rewriter.is_local: qual_ident = Library.Frac.id
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Frac.comp
[Debug] Rewriter.is_local: qual_ident = Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.compId.a^83
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.comp
[Debug] Rewriter.Symbol.reify func comp(a^76: Library.Frac.T, b^56:
                                        Library.Frac.T)
                                returns (ret^21: Library.Frac.T)
        {
          ite(a^76 == Library.Frac.frac_null, b^56, ite(b^56 ==
          Library.Frac.frac_null, a^76, ite(Library.Frac.valid(a^76) &&
          Library.Frac.valid(b^56), ite(Library.Frac.frac_proj1(a^76) ==
          Library.Frac.frac_proj1(b^56) && Library.Frac.frac_proj2(a^76) +
          Library.Frac.frac_proj2(b^56) > 0. &&
          Library.Frac.frac_proj2(a^76) + Library.Frac.frac_proj2(b^56) <=
          1., Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^76),
          Library.Frac.frac_proj2(a^76) + Library.Frac.frac_proj2(b^56)),
          Library.Frac.frac_top), Library.Frac.frac_top)))
        }
[Debug] SymbolTbl.resolve_and_find: a^83
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac.compId
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^83
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^83
[Debug] SymbolTbl.resolve.go_forward: ids2: a^83
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^83
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.compId.a^83
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^83
[Debug] Rewriter.Symbol.reify var a^83 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.id
[Debug] Rewriter.Symbol.reify val id : Library.Frac.T =
                                    Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^83
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^83
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.compId.a^83
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^83
[Debug] Rewriter.Symbol.reify var a^83 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compId
[Debug] Keyset: 5
[Debug] old id a -> 83
[Debug] fresh id a -> 84
[Debug] Keyset: 5
[Debug] old id b -> 61
[Debug] fresh id b -> 62
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Frac.comp
[Debug] Rewriter.is_local: qual_ident = Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Frac.valid
[Debug] Rewriter.is_local: qual_ident = Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Frac.valid
[Debug] Rewriter.is_local: qual_ident = Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Frac.valid
[Debug] Rewriter.is_local: qual_ident = Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.compValid.a^84
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.compValid.b^62
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.valid
[Debug] Rewriter.Symbol.reify func valid(n^2: Library.Frac.T)
                                returns (ret^20: Bool)
        {
          ite(n^2 == Library.Frac.frac_chunk(Library.Frac.frac_proj1(n^2),
          Library.Frac.frac_proj2(n^2)), Library.Frac.frac_proj2(n^2) > 0. &&
          Library.Frac.frac_proj2(n^2) <= 1., ite(n^2 ==
          Library.Frac.frac_null, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.comp
[Debug] Rewriter.Symbol.reify func comp(a^76: Library.Frac.T, b^56:
                                        Library.Frac.T)
                                returns (ret^21: Library.Frac.T)
        {
          ite(a^76 == Library.Frac.frac_null, b^56, ite(b^56 ==
          Library.Frac.frac_null, a^76, ite(Library.Frac.valid(a^76) &&
          Library.Frac.valid(b^56), ite(Library.Frac.frac_proj1(a^76) ==
          Library.Frac.frac_proj1(b^56) && Library.Frac.frac_proj2(a^76) +
          Library.Frac.frac_proj2(b^56) > 0. &&
          Library.Frac.frac_proj2(a^76) + Library.Frac.frac_proj2(b^56) <=
          1., Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^76),
          Library.Frac.frac_proj2(a^76) + Library.Frac.frac_proj2(b^56)),
          Library.Frac.frac_top), Library.Frac.frac_top)))
        }
[Debug] SymbolTbl.resolve_and_find: a^84
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac.compValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^84
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^62, a^84
[Debug] SymbolTbl.resolve.go_forward: ids2: a^84
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^84
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.compValid.a^84
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^84
[Debug] Rewriter.Symbol.reify var a^84 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^62
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac.compValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^62
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^62, a^84
[Debug] SymbolTbl.resolve.go_forward: ids2: b^62
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^62
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.compValid.b^62
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^62
[Debug] Rewriter.Symbol.reify var b^62 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.valid
[Debug] Rewriter.Symbol.reify func valid(n^2: Library.Frac.T)
                                returns (ret^20: Bool)
        {
          ite(n^2 == Library.Frac.frac_chunk(Library.Frac.frac_proj1(n^2),
          Library.Frac.frac_proj2(n^2)), Library.Frac.frac_proj2(n^2) > 0. &&
          Library.Frac.frac_proj2(n^2) <= 1., ite(n^2 ==
          Library.Frac.frac_null, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: a^84
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^84
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.compValid.a^84
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^84
[Debug] Rewriter.Symbol.reify var a^84 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.valid
[Debug] Rewriter.Symbol.reify func valid(n^2: Library.Frac.T)
                                returns (ret^20: Bool)
        {
          ite(n^2 == Library.Frac.frac_chunk(Library.Frac.frac_proj1(n^2),
          Library.Frac.frac_proj2(n^2)), Library.Frac.frac_proj2(n^2) > 0. &&
          Library.Frac.frac_proj2(n^2) <= 1., ite(n^2 ==
          Library.Frac.frac_null, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: b^62
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^62
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.compValid.b^62
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^62
[Debug] Rewriter.Symbol.reify var b^62 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.valid
[Debug] Rewriter.Symbol.reify func valid(n^2: Library.Frac.T)
                                returns (ret^20: Bool)
        {
          ite(n^2 == Library.Frac.frac_chunk(Library.Frac.frac_proj1(n^2),
          Library.Frac.frac_proj2(n^2)), Library.Frac.frac_proj2(n^2) > 0. &&
          Library.Frac.frac_proj2(n^2) <= 1., ite(n^2 ==
          Library.Frac.frac_null, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: a^84
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^84
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.compValid.a^84
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^84
[Debug] Rewriter.Symbol.reify var a^84 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.valid
[Debug] Rewriter.Symbol.reify func valid(n^2: Library.Frac.T)
                                returns (ret^20: Bool)
        {
          ite(n^2 == Library.Frac.frac_chunk(Library.Frac.frac_proj1(n^2),
          Library.Frac.frac_proj2(n^2)), Library.Frac.frac_proj2(n^2) > 0. &&
          Library.Frac.frac_proj2(n^2) <= 1., ite(n^2 ==
          Library.Frac.frac_null, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: Library.Frac.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.comp
[Debug] Rewriter.Symbol.reify func comp(a^76: Library.Frac.T, b^56:
                                        Library.Frac.T)
                                returns (ret^21: Library.Frac.T)
        {
          ite(a^76 == Library.Frac.frac_null, b^56, ite(b^56 ==
          Library.Frac.frac_null, a^76, ite(Library.Frac.valid(a^76) &&
          Library.Frac.valid(b^56), ite(Library.Frac.frac_proj1(a^76) ==
          Library.Frac.frac_proj1(b^56) && Library.Frac.frac_proj2(a^76) +
          Library.Frac.frac_proj2(b^56) > 0. &&
          Library.Frac.frac_proj2(a^76) + Library.Frac.frac_proj2(b^56) <=
          1., Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^76),
          Library.Frac.frac_proj2(a^76) + Library.Frac.frac_proj2(b^56)),
          Library.Frac.frac_top), Library.Frac.frac_top)))
        }
[Debug] SymbolTbl.resolve_and_find: a^84
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^84
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.compValid.a^84
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^84
[Debug] Rewriter.Symbol.reify var a^84 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^62
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^62
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.compValid.b^62
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^62
[Debug] Rewriter.Symbol.reify var b^62 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compValid
[Debug] Keyset: 5
[Debug] old id a -> 84
[Debug] fresh id a -> 85
[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = id; qual_ident = Library.Frac.id
[Debug] Rewriter.is_local: qual_ident = Library.Frac.id
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.Frac.frame
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frame
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.frameId.a^85
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.frame
[Debug] Rewriter.Symbol.reify func frame(a^77: Library.Frac.T, b^57:
                                         Library.Frac.T)
                                returns (ret^22: Library.Frac.T)
        {
          ite(b^57 == Library.Frac.frac_null, a^77, ite(a^77 ==
          Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^77),
          Library.Frac.frac_proj2(a^77)) && b^57 ==
          Library.Frac.frac_chunk(Library.Frac.frac_proj1(b^57),
          Library.Frac.frac_proj2(b^57)) && Library.Frac.valid(a^77) &&
          Library.Frac.valid(b^57), ite(Library.Frac.frac_proj1(a^77) ==
          Library.Frac.frac_proj1(b^57), ite(Library.Frac.frac_proj2(a^77) ==
          Library.Frac.frac_proj2(b^57), Library.Frac.frac_null,
          Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^77),
          Library.Frac.frac_proj2(a^77) - Library.Frac.frac_proj2(b^57))),
          Library.Frac.frac_top), Library.Frac.frac_top))
        }
[Debug] SymbolTbl.resolve_and_find: a^85
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac.frameId
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^85
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^85
[Debug] SymbolTbl.resolve.go_forward: ids2: a^85
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^85
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frameId.a^85
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^85
[Debug] Rewriter.Symbol.reify var a^85 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.id
[Debug] Rewriter.Symbol.reify val id : Library.Frac.T =
                                    Library.Frac.frac_null
[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^85
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^85
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frameId.a^85
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^85
[Debug] Rewriter.Symbol.reify var a^85 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameId
[Debug] Keyset: 5
[Debug] old id a -> 85
[Debug] fresh id a -> 86
[Debug] Keyset: 5
[Debug] old id b -> 62
[Debug] fresh id b -> 63
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.Frac.frame
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frame
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Frac.valid
[Debug] Rewriter.is_local: qual_ident = Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.Frac.frame
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frame
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Frac.comp
[Debug] Rewriter.is_local: qual_ident = Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.compFrameInv.a^86
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.compFrameInv.b^63
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.valid
[Debug] Rewriter.Symbol.reify func valid(n^2: Library.Frac.T)
                                returns (ret^20: Bool)
        {
          ite(n^2 == Library.Frac.frac_chunk(Library.Frac.frac_proj1(n^2),
          Library.Frac.frac_proj2(n^2)), Library.Frac.frac_proj2(n^2) > 0. &&
          Library.Frac.frac_proj2(n^2) <= 1., ite(n^2 ==
          Library.Frac.frac_null, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.frame
[Debug] Rewriter.Symbol.reify func frame(a^77: Library.Frac.T, b^57:
                                         Library.Frac.T)
                                returns (ret^22: Library.Frac.T)
        {
          ite(b^57 == Library.Frac.frac_null, a^77, ite(a^77 ==
          Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^77),
          Library.Frac.frac_proj2(a^77)) && b^57 ==
          Library.Frac.frac_chunk(Library.Frac.frac_proj1(b^57),
          Library.Frac.frac_proj2(b^57)) && Library.Frac.valid(a^77) &&
          Library.Frac.valid(b^57), ite(Library.Frac.frac_proj1(a^77) ==
          Library.Frac.frac_proj1(b^57), ite(Library.Frac.frac_proj2(a^77) ==
          Library.Frac.frac_proj2(b^57), Library.Frac.frac_null,
          Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^77),
          Library.Frac.frac_proj2(a^77) - Library.Frac.frac_proj2(b^57))),
          Library.Frac.frac_top), Library.Frac.frac_top))
        }
[Debug] SymbolTbl.resolve_and_find: a^86
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac.compFrameInv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^86
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^63, a^86
[Debug] SymbolTbl.resolve.go_forward: ids2: a^86
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^86
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.compFrameInv.a^86
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^86
[Debug] Rewriter.Symbol.reify var a^86 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^63
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac.compFrameInv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^63
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^63, a^86
[Debug] SymbolTbl.resolve.go_forward: ids2: b^63
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^63
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.compFrameInv.b^63
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^63
[Debug] Rewriter.Symbol.reify var b^63 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.comp
[Debug] Rewriter.Symbol.reify func comp(a^76: Library.Frac.T, b^56:
                                        Library.Frac.T)
                                returns (ret^21: Library.Frac.T)
        {
          ite(a^76 == Library.Frac.frac_null, b^56, ite(b^56 ==
          Library.Frac.frac_null, a^76, ite(Library.Frac.valid(a^76) &&
          Library.Frac.valid(b^56), ite(Library.Frac.frac_proj1(a^76) ==
          Library.Frac.frac_proj1(b^56) && Library.Frac.frac_proj2(a^76) +
          Library.Frac.frac_proj2(b^56) > 0. &&
          Library.Frac.frac_proj2(a^76) + Library.Frac.frac_proj2(b^56) <=
          1., Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^76),
          Library.Frac.frac_proj2(a^76) + Library.Frac.frac_proj2(b^56)),
          Library.Frac.frac_top), Library.Frac.frac_top)))
        }
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.frame
[Debug] Rewriter.Symbol.reify func frame(a^77: Library.Frac.T, b^57:
                                         Library.Frac.T)
                                returns (ret^22: Library.Frac.T)
        {
          ite(b^57 == Library.Frac.frac_null, a^77, ite(a^77 ==
          Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^77),
          Library.Frac.frac_proj2(a^77)) && b^57 ==
          Library.Frac.frac_chunk(Library.Frac.frac_proj1(b^57),
          Library.Frac.frac_proj2(b^57)) && Library.Frac.valid(a^77) &&
          Library.Frac.valid(b^57), ite(Library.Frac.frac_proj1(a^77) ==
          Library.Frac.frac_proj1(b^57), ite(Library.Frac.frac_proj2(a^77) ==
          Library.Frac.frac_proj2(b^57), Library.Frac.frac_null,
          Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^77),
          Library.Frac.frac_proj2(a^77) - Library.Frac.frac_proj2(b^57))),
          Library.Frac.frac_top), Library.Frac.frac_top))
        }
[Debug] SymbolTbl.resolve_and_find: a^86
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^86
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.compFrameInv.a^86
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^86
[Debug] Rewriter.Symbol.reify var a^86 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^63
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^63
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.compFrameInv.b^63
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^63
[Debug] Rewriter.Symbol.reify var b^63 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^63
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^63
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.compFrameInv.b^63
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^63
[Debug] Rewriter.Symbol.reify var b^63 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^86
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^86
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.compFrameInv.a^86
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^86
[Debug] Rewriter.Symbol.reify var a^86 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.valid
[Debug] Rewriter.Symbol.reify func valid(n^2: Library.Frac.T)
                                returns (ret^20: Bool)
        {
          ite(n^2 == Library.Frac.frac_chunk(Library.Frac.frac_proj1(n^2),
          Library.Frac.frac_proj2(n^2)), Library.Frac.frac_proj2(n^2) > 0. &&
          Library.Frac.frac_proj2(n^2) <= 1., ite(n^2 ==
          Library.Frac.frac_null, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frame
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.frame
[Debug] Rewriter.Symbol.reify func frame(a^77: Library.Frac.T, b^57:
                                         Library.Frac.T)
                                returns (ret^22: Library.Frac.T)
        {
          ite(b^57 == Library.Frac.frac_null, a^77, ite(a^77 ==
          Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^77),
          Library.Frac.frac_proj2(a^77)) && b^57 ==
          Library.Frac.frac_chunk(Library.Frac.frac_proj1(b^57),
          Library.Frac.frac_proj2(b^57)) && Library.Frac.valid(a^77) &&
          Library.Frac.valid(b^57), ite(Library.Frac.frac_proj1(a^77) ==
          Library.Frac.frac_proj1(b^57), ite(Library.Frac.frac_proj2(a^77) ==
          Library.Frac.frac_proj2(b^57), Library.Frac.frac_null,
          Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^77),
          Library.Frac.frac_proj2(a^77) - Library.Frac.frac_proj2(b^57))),
          Library.Frac.frac_top), Library.Frac.frac_top))
        }
[Debug] SymbolTbl.resolve_and_find: a^86
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^86
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.compFrameInv.a^86
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^86
[Debug] Rewriter.Symbol.reify var a^86 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^63
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^63
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.compFrameInv.b^63
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^63
[Debug] Rewriter.Symbol.reify var b^63 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compFrameInv
[Debug] Keyset: 5
[Debug] old id a -> 86
[Debug] fresh id a -> 87
[Debug] Keyset: 5
[Debug] old id b -> 63
[Debug] fresh id b -> 64
[Debug] Keyset: 5
[Debug] old id c -> 12
[Debug] fresh id c -> 13
[Debug] SymbolTbl.resolve_and_find: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = fpuAllowed; qual_ident = Library.Frac.fpuAllowed
[Debug] Rewriter.is_local: qual_ident = Library.Frac.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Frac.valid
[Debug] Rewriter.is_local: qual_ident = Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Frac.comp
[Debug] Rewriter.is_local: qual_ident = Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Frac.valid
[Debug] Rewriter.is_local: qual_ident = Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Frac.comp
[Debug] Rewriter.is_local: qual_ident = Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Frac.valid
[Debug] Rewriter.is_local: qual_ident = Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.fpuValid.a^87
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.fpuValid.b^64
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.fpuValid.c^13
[Debug] SymbolTbl.resolve_and_find: fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^78: Library.Frac.T, b^58:
                                              Library.Frac.T)
                                returns (ret^23: Bool)
        {
          ite(a^78 == b^58, true, ite(a^78 ==
          Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^78),
          Library.Frac.frac_proj2(a^78)), Library.Frac.frac_proj2(a^78) ==
          1. && Library.Frac.valid(b^58), ite(a^78 == Library.Frac.frac_top,
          true, false)))
        }
[Debug] SymbolTbl.resolve_and_find: a^87
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac.fpuValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^87
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^87, c^13, b^64
[Debug] SymbolTbl.resolve.go_forward: ids2: a^87
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^87
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuValid.a^87
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^87
[Debug] Rewriter.Symbol.reify var a^87 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^64
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac.fpuValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^64
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^87, c^13, b^64
[Debug] SymbolTbl.resolve.go_forward: ids2: b^64
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuValid.b^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^64
[Debug] Rewriter.Symbol.reify var b^64 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.valid
[Debug] Rewriter.Symbol.reify func valid(n^2: Library.Frac.T)
                                returns (ret^20: Bool)
        {
          ite(n^2 == Library.Frac.frac_chunk(Library.Frac.frac_proj1(n^2),
          Library.Frac.frac_proj2(n^2)), Library.Frac.frac_proj2(n^2) > 0. &&
          Library.Frac.frac_proj2(n^2) <= 1., ite(n^2 ==
          Library.Frac.frac_null, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: a^87
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^87
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuValid.a^87
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^87
[Debug] Rewriter.Symbol.reify var a^87 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^78: Library.Frac.T, b^58:
                                              Library.Frac.T)
                                returns (ret^23: Bool)
        {
          ite(a^78 == b^58, true, ite(a^78 ==
          Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^78),
          Library.Frac.frac_proj2(a^78)), Library.Frac.frac_proj2(a^78) ==
          1. && Library.Frac.valid(b^58), ite(a^78 == Library.Frac.frac_top,
          true, false)))
        }
[Debug] SymbolTbl.resolve_and_find: a^87
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^87
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuValid.a^87
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^87
[Debug] Rewriter.Symbol.reify var a^87 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuValid.b^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^64
[Debug] Rewriter.Symbol.reify var b^64 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.valid
[Debug] Rewriter.Symbol.reify func valid(n^2: Library.Frac.T)
                                returns (ret^20: Bool)
        {
          ite(n^2 == Library.Frac.frac_chunk(Library.Frac.frac_proj1(n^2),
          Library.Frac.frac_proj2(n^2)), Library.Frac.frac_proj2(n^2) > 0. &&
          Library.Frac.frac_proj2(n^2) <= 1., ite(n^2 ==
          Library.Frac.frac_null, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.comp
[Debug] Rewriter.Symbol.reify func comp(a^76: Library.Frac.T, b^56:
                                        Library.Frac.T)
                                returns (ret^21: Library.Frac.T)
        {
          ite(a^76 == Library.Frac.frac_null, b^56, ite(b^56 ==
          Library.Frac.frac_null, a^76, ite(Library.Frac.valid(a^76) &&
          Library.Frac.valid(b^56), ite(Library.Frac.frac_proj1(a^76) ==
          Library.Frac.frac_proj1(b^56) && Library.Frac.frac_proj2(a^76) +
          Library.Frac.frac_proj2(b^56) > 0. &&
          Library.Frac.frac_proj2(a^76) + Library.Frac.frac_proj2(b^56) <=
          1., Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^76),
          Library.Frac.frac_proj2(a^76) + Library.Frac.frac_proj2(b^56)),
          Library.Frac.frac_top), Library.Frac.frac_top)))
        }
[Debug] SymbolTbl.resolve_and_find: a^87
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^87
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuValid.a^87
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^87
[Debug] Rewriter.Symbol.reify var a^87 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^13
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac.fpuValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: c^13
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^87, c^13, b^64
[Debug] SymbolTbl.resolve.go_forward: ids2: c^13
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^13
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuValid.c^13
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^13
[Debug] Rewriter.Symbol.reify var c^13 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^78: Library.Frac.T, b^58:
                                              Library.Frac.T)
                                returns (ret^23: Bool)
        {
          ite(a^78 == b^58, true, ite(a^78 ==
          Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^78),
          Library.Frac.frac_proj2(a^78)), Library.Frac.frac_proj2(a^78) ==
          1. && Library.Frac.valid(b^58), ite(a^78 == Library.Frac.frac_top,
          true, false)))
        }
[Debug] SymbolTbl.resolve_and_find: a^87
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^87
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuValid.a^87
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^87
[Debug] Rewriter.Symbol.reify var a^87 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuValid.b^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^64
[Debug] Rewriter.Symbol.reify var b^64 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.valid
[Debug] Rewriter.Symbol.reify func valid(n^2: Library.Frac.T)
                                returns (ret^20: Bool)
        {
          ite(n^2 == Library.Frac.frac_chunk(Library.Frac.frac_proj1(n^2),
          Library.Frac.frac_proj2(n^2)), Library.Frac.frac_proj2(n^2) > 0. &&
          Library.Frac.frac_proj2(n^2) <= 1., ite(n^2 ==
          Library.Frac.frac_null, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: a^87
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^87
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuValid.a^87
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^87
[Debug] Rewriter.Symbol.reify var a^87 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^78: Library.Frac.T, b^58:
                                              Library.Frac.T)
                                returns (ret^23: Bool)
        {
          ite(a^78 == b^58, true, ite(a^78 ==
          Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^78),
          Library.Frac.frac_proj2(a^78)), Library.Frac.frac_proj2(a^78) ==
          1. && Library.Frac.valid(b^58), ite(a^78 == Library.Frac.frac_top,
          true, false)))
        }
[Debug] SymbolTbl.resolve_and_find: a^87
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^87
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuValid.a^87
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^87
[Debug] Rewriter.Symbol.reify var a^87 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuValid.b^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^64
[Debug] Rewriter.Symbol.reify var b^64 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.valid
[Debug] Rewriter.Symbol.reify func valid(n^2: Library.Frac.T)
                                returns (ret^20: Bool)
        {
          ite(n^2 == Library.Frac.frac_chunk(Library.Frac.frac_proj1(n^2),
          Library.Frac.frac_proj2(n^2)), Library.Frac.frac_proj2(n^2) > 0. &&
          Library.Frac.frac_proj2(n^2) <= 1., ite(n^2 ==
          Library.Frac.frac_null, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.comp
[Debug] Rewriter.Symbol.reify func comp(a^76: Library.Frac.T, b^56:
                                        Library.Frac.T)
                                returns (ret^21: Library.Frac.T)
        {
          ite(a^76 == Library.Frac.frac_null, b^56, ite(b^56 ==
          Library.Frac.frac_null, a^76, ite(Library.Frac.valid(a^76) &&
          Library.Frac.valid(b^56), ite(Library.Frac.frac_proj1(a^76) ==
          Library.Frac.frac_proj1(b^56) && Library.Frac.frac_proj2(a^76) +
          Library.Frac.frac_proj2(b^56) > 0. &&
          Library.Frac.frac_proj2(a^76) + Library.Frac.frac_proj2(b^56) <=
          1., Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^76),
          Library.Frac.frac_proj2(a^76) + Library.Frac.frac_proj2(b^56)),
          Library.Frac.frac_top), Library.Frac.frac_top)))
        }
[Debug] SymbolTbl.resolve_and_find: b^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuValid.b^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^64
[Debug] Rewriter.Symbol.reify var b^64 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^13
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^13
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuValid.c^13
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^13
[Debug] Rewriter.Symbol.reify var c^13 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^78: Library.Frac.T, b^58:
                                              Library.Frac.T)
                                returns (ret^23: Bool)
        {
          ite(a^78 == b^58, true, ite(a^78 ==
          Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^78),
          Library.Frac.frac_proj2(a^78)), Library.Frac.frac_proj2(a^78) ==
          1. && Library.Frac.valid(b^58), ite(a^78 == Library.Frac.frac_top,
          true, false)))
        }
[Debug] SymbolTbl.resolve_and_find: a^87
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^87
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuValid.a^87
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^87
[Debug] Rewriter.Symbol.reify var a^87 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuValid.b^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^64
[Debug] Rewriter.Symbol.reify var b^64 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.valid
[Debug] Rewriter.Symbol.reify func valid(n^2: Library.Frac.T)
                                returns (ret^20: Bool)
        {
          ite(n^2 == Library.Frac.frac_chunk(Library.Frac.frac_proj1(n^2),
          Library.Frac.frac_proj2(n^2)), Library.Frac.frac_proj2(n^2) > 0. &&
          Library.Frac.frac_proj2(n^2) <= 1., ite(n^2 ==
          Library.Frac.frac_null, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: a^87
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^87
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuValid.a^87
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^87
[Debug] Rewriter.Symbol.reify var a^87 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^78: Library.Frac.T, b^58:
                                              Library.Frac.T)
                                returns (ret^23: Bool)
        {
          ite(a^78 == b^58, true, ite(a^78 ==
          Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^78),
          Library.Frac.frac_proj2(a^78)), Library.Frac.frac_proj2(a^78) ==
          1. && Library.Frac.valid(b^58), ite(a^78 == Library.Frac.frac_top,
          true, false)))
        }
[Debug] SymbolTbl.resolve_and_find: a^87
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^87
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuValid.a^87
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^87
[Debug] Rewriter.Symbol.reify var a^87 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuValid.b^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^64
[Debug] Rewriter.Symbol.reify var b^64 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.valid
[Debug] Rewriter.Symbol.reify func valid(n^2: Library.Frac.T)
                                returns (ret^20: Bool)
        {
          ite(n^2 == Library.Frac.frac_chunk(Library.Frac.frac_proj1(n^2),
          Library.Frac.frac_proj2(n^2)), Library.Frac.frac_proj2(n^2) > 0. &&
          Library.Frac.frac_proj2(n^2) <= 1., ite(n^2 ==
          Library.Frac.frac_null, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: Library.Frac.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.comp
[Debug] Rewriter.Symbol.reify func comp(a^76: Library.Frac.T, b^56:
                                        Library.Frac.T)
                                returns (ret^21: Library.Frac.T)
        {
          ite(a^76 == Library.Frac.frac_null, b^56, ite(b^56 ==
          Library.Frac.frac_null, a^76, ite(Library.Frac.valid(a^76) &&
          Library.Frac.valid(b^56), ite(Library.Frac.frac_proj1(a^76) ==
          Library.Frac.frac_proj1(b^56) && Library.Frac.frac_proj2(a^76) +
          Library.Frac.frac_proj2(b^56) > 0. &&
          Library.Frac.frac_proj2(a^76) + Library.Frac.frac_proj2(b^56) <=
          1., Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^76),
          Library.Frac.frac_proj2(a^76) + Library.Frac.frac_proj2(b^56)),
          Library.Frac.frac_top), Library.Frac.frac_top)))
        }
[Debug] SymbolTbl.resolve_and_find: a^87
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^87
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuValid.a^87
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^87
[Debug] Rewriter.Symbol.reify var a^87 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^13
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^13
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuValid.c^13
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^13
[Debug] Rewriter.Symbol.reify var c^13 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^78: Library.Frac.T, b^58:
                                              Library.Frac.T)
                                returns (ret^23: Bool)
        {
          ite(a^78 == b^58, true, ite(a^78 ==
          Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^78),
          Library.Frac.frac_proj2(a^78)), Library.Frac.frac_proj2(a^78) ==
          1. && Library.Frac.valid(b^58), ite(a^78 == Library.Frac.frac_top,
          true, false)))
        }
[Debug] SymbolTbl.resolve_and_find: a^87
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^87
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuValid.a^87
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^87
[Debug] Rewriter.Symbol.reify var a^87 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuValid.b^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^64
[Debug] Rewriter.Symbol.reify var b^64 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.valid
[Debug] Rewriter.Symbol.reify func valid(n^2: Library.Frac.T)
                                returns (ret^20: Bool)
        {
          ite(n^2 == Library.Frac.frac_chunk(Library.Frac.frac_proj1(n^2),
          Library.Frac.frac_proj2(n^2)), Library.Frac.frac_proj2(n^2) > 0. &&
          Library.Frac.frac_proj2(n^2) <= 1., ite(n^2 ==
          Library.Frac.frac_null, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: a^87
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^87
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuValid.a^87
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^87
[Debug] Rewriter.Symbol.reify var a^87 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^78: Library.Frac.T, b^58:
                                              Library.Frac.T)
                                returns (ret^23: Bool)
        {
          ite(a^78 == b^58, true, ite(a^78 ==
          Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^78),
          Library.Frac.frac_proj2(a^78)), Library.Frac.frac_proj2(a^78) ==
          1. && Library.Frac.valid(b^58), ite(a^78 == Library.Frac.frac_top,
          true, false)))
        }
[Debug] SymbolTbl.resolve_and_find: a^87
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^87
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuValid.a^87
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^87
[Debug] Rewriter.Symbol.reify var a^87 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^64
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^64
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuValid.b^64
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^64
[Debug] Rewriter.Symbol.reify var b^64 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.fpuValid
[Debug] Keyset: 5
[Debug] old id a -> 87
[Debug] fresh id a -> 88
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Frac.valid
[Debug] Rewriter.is_local: qual_ident = Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = fpuAllowed; qual_ident = Library.Frac.fpuAllowed
[Debug] Rewriter.is_local: qual_ident = Library.Frac.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.fpuReflexive.a^88
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.valid
[Debug] Rewriter.Symbol.reify func valid(n^2: Library.Frac.T)
                                returns (ret^20: Bool)
        {
          ite(n^2 == Library.Frac.frac_chunk(Library.Frac.frac_proj1(n^2),
          Library.Frac.frac_proj2(n^2)), Library.Frac.frac_proj2(n^2) > 0. &&
          Library.Frac.frac_proj2(n^2) <= 1., ite(n^2 ==
          Library.Frac.frac_null, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: a^88
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac.fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^88
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^88
[Debug] SymbolTbl.resolve.go_forward: ids2: a^88
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^88
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuReflexive.a^88
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^88
[Debug] Rewriter.Symbol.reify var a^88 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^78: Library.Frac.T, b^58:
                                              Library.Frac.T)
                                returns (ret^23: Bool)
        {
          ite(a^78 == b^58, true, ite(a^78 ==
          Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^78),
          Library.Frac.frac_proj2(a^78)), Library.Frac.frac_proj2(a^78) ==
          1. && Library.Frac.valid(b^58), ite(a^78 == Library.Frac.frac_top,
          true, false)))
        }
[Debug] SymbolTbl.resolve_and_find: a^88
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^88
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuReflexive.a^88
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^88
[Debug] Rewriter.Symbol.reify var a^88 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^88
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^88
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuReflexive.a^88
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^88
[Debug] Rewriter.Symbol.reify var a^88 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.valid
[Debug] Rewriter.Symbol.reify func valid(n^2: Library.Frac.T)
                                returns (ret^20: Bool)
        {
          ite(n^2 == Library.Frac.frac_chunk(Library.Frac.frac_proj1(n^2),
          Library.Frac.frac_proj2(n^2)), Library.Frac.frac_proj2(n^2) > 0. &&
          Library.Frac.frac_proj2(n^2) <= 1., ite(n^2 ==
          Library.Frac.frac_null, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: a^88
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^88
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuReflexive.a^88
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^88
[Debug] Rewriter.Symbol.reify var a^88 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.fpuReflexive
[Debug] Keyset: 5
[Debug] old id a -> 88
[Debug] fresh id a -> 89
[Debug] Keyset: 5
[Debug] old id b -> 64
[Debug] fresh id b -> 65
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.Frac.frame
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frame
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Frac.valid
[Debug] Rewriter.is_local: qual_ident = Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Frac.valid
[Debug] Rewriter.is_local: qual_ident = Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Frac.valid
[Debug] Rewriter.is_local: qual_ident = Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.frameValid.a^89
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.frameValid.b^65
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.valid
[Debug] Rewriter.Symbol.reify func valid(n^2: Library.Frac.T)
                                returns (ret^20: Bool)
        {
          ite(n^2 == Library.Frac.frac_chunk(Library.Frac.frac_proj1(n^2),
          Library.Frac.frac_proj2(n^2)), Library.Frac.frac_proj2(n^2) > 0. &&
          Library.Frac.frac_proj2(n^2) <= 1., ite(n^2 ==
          Library.Frac.frac_null, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.frame
[Debug] Rewriter.Symbol.reify func frame(a^77: Library.Frac.T, b^57:
                                         Library.Frac.T)
                                returns (ret^22: Library.Frac.T)
        {
          ite(b^57 == Library.Frac.frac_null, a^77, ite(a^77 ==
          Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^77),
          Library.Frac.frac_proj2(a^77)) && b^57 ==
          Library.Frac.frac_chunk(Library.Frac.frac_proj1(b^57),
          Library.Frac.frac_proj2(b^57)) && Library.Frac.valid(a^77) &&
          Library.Frac.valid(b^57), ite(Library.Frac.frac_proj1(a^77) ==
          Library.Frac.frac_proj1(b^57), ite(Library.Frac.frac_proj2(a^77) ==
          Library.Frac.frac_proj2(b^57), Library.Frac.frac_null,
          Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^77),
          Library.Frac.frac_proj2(a^77) - Library.Frac.frac_proj2(b^57))),
          Library.Frac.frac_top), Library.Frac.frac_top))
        }
[Debug] SymbolTbl.resolve_and_find: a^89
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac.frameValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^89
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^89, b^65
[Debug] SymbolTbl.resolve.go_forward: ids2: a^89
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^89
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frameValid.a^89
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^89
[Debug] Rewriter.Symbol.reify var a^89 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^65
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac.frameValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^65
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^89, b^65
[Debug] SymbolTbl.resolve.go_forward: ids2: b^65
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^65
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frameValid.b^65
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^65
[Debug] Rewriter.Symbol.reify var b^65 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.valid
[Debug] Rewriter.Symbol.reify func valid(n^2: Library.Frac.T)
                                returns (ret^20: Bool)
        {
          ite(n^2 == Library.Frac.frac_chunk(Library.Frac.frac_proj1(n^2),
          Library.Frac.frac_proj2(n^2)), Library.Frac.frac_proj2(n^2) > 0. &&
          Library.Frac.frac_proj2(n^2) <= 1., ite(n^2 ==
          Library.Frac.frac_null, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: a^89
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^89
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frameValid.a^89
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^89
[Debug] Rewriter.Symbol.reify var a^89 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.valid
[Debug] Rewriter.Symbol.reify func valid(n^2: Library.Frac.T)
                                returns (ret^20: Bool)
        {
          ite(n^2 == Library.Frac.frac_chunk(Library.Frac.frac_proj1(n^2),
          Library.Frac.frac_proj2(n^2)), Library.Frac.frac_proj2(n^2) > 0. &&
          Library.Frac.frac_proj2(n^2) <= 1., ite(n^2 ==
          Library.Frac.frac_null, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: b^65
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^65
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frameValid.b^65
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^65
[Debug] Rewriter.Symbol.reify var b^65 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.valid
[Debug] Rewriter.Symbol.reify func valid(n^2: Library.Frac.T)
                                returns (ret^20: Bool)
        {
          ite(n^2 == Library.Frac.frac_chunk(Library.Frac.frac_proj1(n^2),
          Library.Frac.frac_proj2(n^2)), Library.Frac.frac_proj2(n^2) > 0. &&
          Library.Frac.frac_proj2(n^2) <= 1., ite(n^2 ==
          Library.Frac.frac_null, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: a^89
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^89
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frameValid.a^89
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^89
[Debug] Rewriter.Symbol.reify var a^89 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.valid
[Debug] Rewriter.Symbol.reify func valid(n^2: Library.Frac.T)
                                returns (ret^20: Bool)
        {
          ite(n^2 == Library.Frac.frac_chunk(Library.Frac.frac_proj1(n^2),
          Library.Frac.frac_proj2(n^2)), Library.Frac.frac_proj2(n^2) > 0. &&
          Library.Frac.frac_proj2(n^2) <= 1., ite(n^2 ==
          Library.Frac.frac_null, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: Library.Frac.frame
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.frame
[Debug] Rewriter.Symbol.reify func frame(a^77: Library.Frac.T, b^57:
                                         Library.Frac.T)
                                returns (ret^22: Library.Frac.T)
        {
          ite(b^57 == Library.Frac.frac_null, a^77, ite(a^77 ==
          Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^77),
          Library.Frac.frac_proj2(a^77)) && b^57 ==
          Library.Frac.frac_chunk(Library.Frac.frac_proj1(b^57),
          Library.Frac.frac_proj2(b^57)) && Library.Frac.valid(a^77) &&
          Library.Frac.valid(b^57), ite(Library.Frac.frac_proj1(a^77) ==
          Library.Frac.frac_proj1(b^57), ite(Library.Frac.frac_proj2(a^77) ==
          Library.Frac.frac_proj2(b^57), Library.Frac.frac_null,
          Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^77),
          Library.Frac.frac_proj2(a^77) - Library.Frac.frac_proj2(b^57))),
          Library.Frac.frac_top), Library.Frac.frac_top))
        }
[Debug] SymbolTbl.resolve_and_find: a^89
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^89
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frameValid.a^89
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^89
[Debug] Rewriter.Symbol.reify var a^89 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^65
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^65
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frameValid.b^65
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^65
[Debug] Rewriter.Symbol.reify var b^65 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameValid
[Debug] Keyset: 5
[Debug] old id a -> 89
[Debug] fresh id a -> 90
[Debug] Keyset: 5
[Debug] old id b -> 65
[Debug] fresh id b -> 66
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Frac.comp
[Debug] Rewriter.is_local: qual_ident = Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Frac.valid
[Debug] Rewriter.is_local: qual_ident = Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Frac.comp
[Debug] Rewriter.is_local: qual_ident = Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.Frac.frame
[Debug] Rewriter.is_local: qual_ident = Library.Frac.frame
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Frac.valid
[Debug] Rewriter.is_local: qual_ident = Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.weak_frameCompInv.a^90
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.Frac.weak_frameCompInv.b^66
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.valid
[Debug] Rewriter.Symbol.reify func valid(n^2: Library.Frac.T)
                                returns (ret^20: Bool)
        {
          ite(n^2 == Library.Frac.frac_chunk(Library.Frac.frac_proj1(n^2),
          Library.Frac.frac_proj2(n^2)), Library.Frac.frac_proj2(n^2) > 0. &&
          Library.Frac.frac_proj2(n^2) <= 1., ite(n^2 ==
          Library.Frac.frac_null, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.comp
[Debug] Rewriter.Symbol.reify func comp(a^76: Library.Frac.T, b^56:
                                        Library.Frac.T)
                                returns (ret^21: Library.Frac.T)
        {
          ite(a^76 == Library.Frac.frac_null, b^56, ite(b^56 ==
          Library.Frac.frac_null, a^76, ite(Library.Frac.valid(a^76) &&
          Library.Frac.valid(b^56), ite(Library.Frac.frac_proj1(a^76) ==
          Library.Frac.frac_proj1(b^56) && Library.Frac.frac_proj2(a^76) +
          Library.Frac.frac_proj2(b^56) > 0. &&
          Library.Frac.frac_proj2(a^76) + Library.Frac.frac_proj2(b^56) <=
          1., Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^76),
          Library.Frac.frac_proj2(a^76) + Library.Frac.frac_proj2(b^56)),
          Library.Frac.frac_top), Library.Frac.frac_top)))
        }
[Debug] SymbolTbl.resolve_and_find: a^90
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac.weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^90
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^66, a^90
[Debug] SymbolTbl.resolve.go_forward: ids2: a^90
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^90
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.weak_frameCompInv.a^90
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^90
[Debug] Rewriter.Symbol.reify var a^90 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^66
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac.weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^66
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^66, a^90
[Debug] SymbolTbl.resolve.go_forward: ids2: b^66
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^66
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.weak_frameCompInv.b^66
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^66
[Debug] Rewriter.Symbol.reify var b^66 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.valid
[Debug] Rewriter.Symbol.reify func valid(n^2: Library.Frac.T)
                                returns (ret^20: Bool)
        {
          ite(n^2 == Library.Frac.frac_chunk(Library.Frac.frac_proj1(n^2),
          Library.Frac.frac_proj2(n^2)), Library.Frac.frac_proj2(n^2) > 0. &&
          Library.Frac.frac_proj2(n^2) <= 1., ite(n^2 ==
          Library.Frac.frac_null, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.frame
[Debug] Rewriter.Symbol.reify func frame(a^77: Library.Frac.T, b^57:
                                         Library.Frac.T)
                                returns (ret^22: Library.Frac.T)
        {
          ite(b^57 == Library.Frac.frac_null, a^77, ite(a^77 ==
          Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^77),
          Library.Frac.frac_proj2(a^77)) && b^57 ==
          Library.Frac.frac_chunk(Library.Frac.frac_proj1(b^57),
          Library.Frac.frac_proj2(b^57)) && Library.Frac.valid(a^77) &&
          Library.Frac.valid(b^57), ite(Library.Frac.frac_proj1(a^77) ==
          Library.Frac.frac_proj1(b^57), ite(Library.Frac.frac_proj2(a^77) ==
          Library.Frac.frac_proj2(b^57), Library.Frac.frac_null,
          Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^77),
          Library.Frac.frac_proj2(a^77) - Library.Frac.frac_proj2(b^57))),
          Library.Frac.frac_top), Library.Frac.frac_top))
        }
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.comp
[Debug] Rewriter.Symbol.reify func comp(a^76: Library.Frac.T, b^56:
                                        Library.Frac.T)
                                returns (ret^21: Library.Frac.T)
        {
          ite(a^76 == Library.Frac.frac_null, b^56, ite(b^56 ==
          Library.Frac.frac_null, a^76, ite(Library.Frac.valid(a^76) &&
          Library.Frac.valid(b^56), ite(Library.Frac.frac_proj1(a^76) ==
          Library.Frac.frac_proj1(b^56) && Library.Frac.frac_proj2(a^76) +
          Library.Frac.frac_proj2(b^56) > 0. &&
          Library.Frac.frac_proj2(a^76) + Library.Frac.frac_proj2(b^56) <=
          1., Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^76),
          Library.Frac.frac_proj2(a^76) + Library.Frac.frac_proj2(b^56)),
          Library.Frac.frac_top), Library.Frac.frac_top)))
        }
[Debug] SymbolTbl.resolve_and_find: a^90
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^90
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.weak_frameCompInv.a^90
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^90
[Debug] Rewriter.Symbol.reify var a^90 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^66
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^66
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.weak_frameCompInv.b^66
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^66
[Debug] Rewriter.Symbol.reify var b^66 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^66
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^66
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.weak_frameCompInv.b^66
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^66
[Debug] Rewriter.Symbol.reify var b^66 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.valid
[Debug] Rewriter.Symbol.reify func valid(n^2: Library.Frac.T)
                                returns (ret^20: Bool)
        {
          ite(n^2 == Library.Frac.frac_chunk(Library.Frac.frac_proj1(n^2),
          Library.Frac.frac_proj2(n^2)), Library.Frac.frac_proj2(n^2) > 0. &&
          Library.Frac.frac_proj2(n^2) <= 1., ite(n^2 ==
          Library.Frac.frac_null, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: Library.Frac.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Frac, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Frac, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Frac, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Frac, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.Frac, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.Frac.comp
[Debug] Rewriter.Symbol.reify func comp(a^76: Library.Frac.T, b^56:
                                        Library.Frac.T)
                                returns (ret^21: Library.Frac.T)
        {
          ite(a^76 == Library.Frac.frac_null, b^56, ite(b^56 ==
          Library.Frac.frac_null, a^76, ite(Library.Frac.valid(a^76) &&
          Library.Frac.valid(b^56), ite(Library.Frac.frac_proj1(a^76) ==
          Library.Frac.frac_proj1(b^56) && Library.Frac.frac_proj2(a^76) +
          Library.Frac.frac_proj2(b^56) > 0. &&
          Library.Frac.frac_proj2(a^76) + Library.Frac.frac_proj2(b^56) <=
          1., Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^76),
          Library.Frac.frac_proj2(a^76) + Library.Frac.frac_proj2(b^56)),
          Library.Frac.frac_top), Library.Frac.frac_top)))
        }
[Debug] SymbolTbl.resolve_and_find: a^90
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^90
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.weak_frameCompInv.a^90
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^90
[Debug] Rewriter.Symbol.reify var a^90 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^66
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^66
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.weak_frameCompInv.b^66
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^66
[Debug] Rewriter.Symbol.reify var b^66 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.weak_frameCompInv
[Debug] Done with processing module Frac
[Debug] Rewriter.set_symbol: symbol = Frac
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac
[Debug] Processing module SetRA
[Debug] Processing module SetRA: scope_children: 
[Debug] Typing.process_module: computing mod_qual_ident: SetRA
[Debug] SymbolTbl.resolve_and_find: SetRA
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = SetRA; qual_ident = Library.SetRA
[Debug] Typing.process_module: module SetRA: checking return type LatticeResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify interface LatticeResourceAlgebra
                                : Library.ResourceAlgebra
        {
          lemma weak_frameCompInv()
            ensures forall a^30: Library.LatticeResourceAlgebra.T, b^21:
            Library.LatticeResourceAlgebra.T ::
            Library.LatticeResourceAlgebra.valid(Library.LatticeResourceAlgebra.comp(a^30,
            b^21)) ==>
            Library.LatticeResourceAlgebra.valid(Library.LatticeResourceAlgebra.frame(Library.LatticeResourceAlgebra.comp(a^30,
            b^21), b^21))
          
          
          lemma frameValid()
            ensures forall a^31: Library.LatticeResourceAlgebra.T, b^22:
            Library.LatticeResourceAlgebra.T ::
            Library.LatticeResourceAlgebra.valid(Library.LatticeResourceAlgebra.frame(a^31,
            b^22)) ==> Library.LatticeResourceAlgebra.valid(a^31) &&
            Library.LatticeResourceAlgebra.valid(b^22)
          
          
          lemma fpuReflexive()
            ensures forall a^32: Library.LatticeResourceAlgebra.T ::
            Library.LatticeResourceAlgebra.valid(a^32) ==>
            Library.LatticeResourceAlgebra.fpuAllowed(a^32, a^32)
          
          
          lemma fpuValid()
            ensures forall a^33: Library.LatticeResourceAlgebra.T, b^23:
            Library.LatticeResourceAlgebra.T, c^4:
            Library.LatticeResourceAlgebra.T ::
            Library.LatticeResourceAlgebra.fpuAllowed(a^33, b^23) &&
            Library.LatticeResourceAlgebra.valid(a^33) &&
            Library.LatticeResourceAlgebra.valid(Library.LatticeResourceAlgebra.comp(a^33,
            c^4)) ==>
            Library.LatticeResourceAlgebra.valid(Library.LatticeResourceAlgebra.comp(b^23,
            c^4))
          
          
          lemma compFrameInv()
            ensures forall a^34: Library.LatticeResourceAlgebra.T, b^24:
            Library.LatticeResourceAlgebra.T ::
            Library.LatticeResourceAlgebra.valid(Library.LatticeResourceAlgebra.frame(a^34,
            b^24)) ==>
            Library.LatticeResourceAlgebra.comp(Library.LatticeResourceAlgebra.frame(a^34,
            b^24), b^24) == a^34
          
          
          lemma frameId()
            ensures forall a^35: Library.LatticeResourceAlgebra.T ::
            Library.LatticeResourceAlgebra.frame(a^35,
            Library.LatticeResourceAlgebra.id) == a^35
          
          
          lemma compValid()
            ensures forall a^36: Library.LatticeResourceAlgebra.T, b^25:
            Library.LatticeResourceAlgebra.T ::
            Library.LatticeResourceAlgebra.valid(Library.LatticeResourceAlgebra.comp(a^36,
            b^25)) ==> Library.LatticeResourceAlgebra.valid(a^36) &&
            Library.LatticeResourceAlgebra.valid(b^25)
          
          
          lemma compId()
            ensures forall a^37: Library.LatticeResourceAlgebra.T ::
            Library.LatticeResourceAlgebra.comp(a^37,
            Library.LatticeResourceAlgebra.id) == a^37
          
          
          lemma compCommute()
            ensures forall a^38: Library.LatticeResourceAlgebra.T, b^26:
            Library.LatticeResourceAlgebra.T ::
            Library.LatticeResourceAlgebra.comp(a^38, b^26) ==
            Library.LatticeResourceAlgebra.comp(b^26, a^38)
          
          
          lemma compAssoc()
            ensures forall a^39: Library.LatticeResourceAlgebra.T, b^27:
            Library.LatticeResourceAlgebra.T, c^5:
            Library.LatticeResourceAlgebra.T ::
            Library.LatticeResourceAlgebra.comp(Library.LatticeResourceAlgebra.comp(a^39,
            b^27), c^5) == Library.LatticeResourceAlgebra.comp(a^39,
            Library.LatticeResourceAlgebra.comp(b^27, c^5))
          
          
          lemma idValid()
            ensures Library.LatticeResourceAlgebra.valid(Library.LatticeResourceAlgebra.id)
          
          
          func fpuAllowed(a^40: Library.LatticeResourceAlgebra.T, b^28:
                          Library.LatticeResourceAlgebra.T)
            returns (ret^8: Bool)
          
          
          func valid(a^41: Library.LatticeResourceAlgebra.T)
            returns (ret^9: Bool)
          
          
          func frame(a^42: Library.LatticeResourceAlgebra.T, b^29:
                     Library.LatticeResourceAlgebra.T)
            returns (ret^10: Library.LatticeResourceAlgebra.T)
          
          
          func comp(a^43: Library.LatticeResourceAlgebra.T, b^30:
                    Library.LatticeResourceAlgebra.T)
            returns (ret^11: Library.LatticeResourceAlgebra.T)
          
          
          val id : Library.LatticeResourceAlgebra.T
          
          rep type T
          
          lemma frameCompInv()
            ensures forall a^44: Library.LatticeResourceAlgebra.T, b^31:
            Library.LatticeResourceAlgebra.T ::
            Library.LatticeResourceAlgebra.valid(Library.LatticeResourceAlgebra.frame(a^44,
            b^31)) ==> Library.LatticeResourceAlgebra.frame(a^44, b^31) ==
            a^44
          
          
          lemma frameCompInv0()
            ensures forall a^45: Library.LatticeResourceAlgebra.T, b^32:
            Library.LatticeResourceAlgebra.T ::
            Library.LatticeResourceAlgebra.valid(Library.LatticeResourceAlgebra.comp(a^45,
            b^32)) ==>
            Library.LatticeResourceAlgebra.frame(Library.LatticeResourceAlgebra.comp(a^45,
            b^32), b^32) == Library.LatticeResourceAlgebra.comp(a^45, b^32)
          
          
          lemma frameCompInv2()
            ensures forall a^46: Library.LatticeResourceAlgebra.T, b^33:
            Library.LatticeResourceAlgebra.T ::
            Library.LatticeResourceAlgebra.comp(a^46, b^33) == a^46 &&
            Library.LatticeResourceAlgebra.valid(a^46) ==>
            Library.LatticeResourceAlgebra.frame(a^46, b^33) == a^46
          
          
          lemma frame_comp_inv()
            ensures forall a^47: Library.LatticeResourceAlgebra.T, b^34:
            Library.LatticeResourceAlgebra.T, c^6:
            Library.LatticeResourceAlgebra.T ::
            Library.LatticeResourceAlgebra.frame(a^47,
            Library.LatticeResourceAlgebra.comp(b^34, c^6)) ==
            Library.LatticeResourceAlgebra.frame(Library.LatticeResourceAlgebra.frame(a^47,
            b^34), c^6)
          
        }
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuValid
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compFrameInv
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compValid
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compId
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compCommute
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compAssoc
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.idValid
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameCompInv0
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv0
[Debug] Rewriter.set_symbol: symbol = frameCompInv2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv2
[Debug] Rewriter.set_symbol: symbol = frame_comp_inv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frame_comp_inv
[Debug] Typing.process_module: SetRA: checking return type interface LatticeResourceAlgebra : Library.ResourceAlgebra
{
  lemma weak_frameCompInv()
    ensures forall a^30: Library.SetRA.T,
b^21:
Library.SetRA.T
::
Library.SetRA.valid(Library.SetRA.comp(a^30,
b^21)) ==>
Library.SetRA.valid(Library.SetRA.frame(Library.SetRA.comp(a^30,
b^21),
b^21))


lemma frameValid()
  ensures forall a^31: Library.SetRA.T,
b^22:
Library.SetRA.T
::
Library.SetRA.valid(Library.SetRA.frame(a^31,
b^22)) ==>
Library.SetRA.valid(a^31) &&
Library.SetRA.valid(b^22)


lemma fpuReflexive()
  ensures forall a^32: Library.SetRA.T
::
Library.SetRA.valid(a^32) ==>
Library.SetRA.fpuAllowed(a^32,
a^32)


lemma fpuValid()
  ensures forall a^33: Library.SetRA.T,
b^23:
Library.SetRA.T,
c^4:
Library.SetRA.T
::
Library.SetRA.fpuAllowed(a^33,
b^23) &&
Library.SetRA.valid(a^33) &&
Library.SetRA.valid(Library.SetRA.comp(a^33,
c^4)) ==>
Library.SetRA.valid(Library.SetRA.comp(b^23,
c^4))


lemma compFrameInv()
  ensures forall a^34: Library.SetRA.T,
b^24:
Library.SetRA.T
::
Library.SetRA.valid(Library.SetRA.frame(a^34,
b^24)) ==>
Library.SetRA.comp(Library.SetRA.frame(a^34,
b^24),
b^24) ==
a^34


lemma frameId()
  ensures forall a^35: Library.SetRA.T
::
Library.SetRA.frame(a^35,
Library.SetRA.id) ==
a^35


lemma compValid()
  ensures forall a^36: Library.SetRA.T,
b^25:
Library.SetRA.T
::
Library.SetRA.valid(Library.SetRA.comp(a^36,
b^25)) ==>
Library.SetRA.valid(a^36) &&
Library.SetRA.valid(b^25)


lemma compId()
  ensures forall a^37: Library.SetRA.T
::
Library.SetRA.comp(a^37,
Library.SetRA.id) ==
a^37


lemma compCommute()
  ensures forall a^38: Library.SetRA.T,
b^26:
Library.SetRA.T
::
Library.SetRA.comp(a^38,
b^26) ==
Library.SetRA.comp(b^26,
a^38)


lemma compAssoc()
  ensures forall a^39: Library.SetRA.T,
b^27:
Library.SetRA.T,
c^5:
Library.SetRA.T
::
Library.SetRA.comp(Library.SetRA.comp(a^39,
b^27),
c^5) ==
Library.SetRA.comp(a^39,
Library.SetRA.comp(b^27,
c^5))


lemma idValid()
  ensures Library.SetRA.valid(Library.SetRA.id)


func fpuAllowed(a^40: Library.SetRA.T,
b^28:
Library.SetRA.T)
returns (ret^8: Bool)


func valid(a^41: Library.SetRA.T)
returns (ret^9: Bool)


func frame(a^42: Library.SetRA.T,
b^29:
Library.SetRA.T)
returns (ret^10: Library.SetRA.T)


func comp(a^43: Library.SetRA.T,
b^30:
Library.SetRA.T)
returns (ret^11: Library.SetRA.T)


val id : Library.SetRA.T

rep type T

lemma frameCompInv()
  ensures forall a^44: Library.SetRA.T,
b^31:
Library.SetRA.T
::
Library.SetRA.valid(Library.SetRA.frame(a^44,
b^31)) ==>
Library.SetRA.frame(a^44,
b^31) ==
a^44


lemma frameCompInv0()
  ensures forall a^45: Library.SetRA.T,
b^32:
Library.SetRA.T
::
Library.SetRA.valid(Library.SetRA.comp(a^45,
b^32)) ==>
Library.SetRA.frame(Library.SetRA.comp(a^45,
b^32),
b^32) ==
Library.SetRA.comp(a^45,
b^32)


lemma frameCompInv2()
  ensures forall a^46: Library.SetRA.T,
b^33:
Library.SetRA.T
::
Library.SetRA.comp(a^46,
b^33) ==
a^46 &&
Library.SetRA.valid(a^46) ==>
Library.SetRA.frame(a^46,
b^33) ==
a^46


lemma frame_comp_inv()
  ensures forall a^47: Library.SetRA.T,
b^34:
Library.SetRA.T,
c^6:
Library.SetRA.T
::
Library.SetRA.frame(a^47,
Library.SetRA.comp(b^34,
c^6)) ==
Library.SetRA.frame(Library.SetRA.frame(a^47,
b^34),
c^6)

}: reified; 
 qual_interface_ident: Library.LatticeResourceAlgebra 
 mid: LatticeResourceAlgebra
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.X
[Debug] SymbolTbl.resolve_and_find: Type
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Type
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Type
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Type
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.id
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.fpuAllowed
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.idValid
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.compAssoc
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.compCommute
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.compId
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.compValid
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.frameId
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.compFrameInv
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.fpuValid
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.fpuReflexive
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.frameValid
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.weak_frameCompInv
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.frameCompInv
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.frameCompInv0
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.frameCompInv2
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.frame_comp_inv
[Debug] Library.ResourceAlgebra
[Debug] Library.LatticeResourceAlgebra
[Debug] Library.SetRA
[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Type
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Type
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = Type; qual_ident = Library.Type
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = T; qual_ident = Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: X
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: X
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: X
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: found Alias: <Library.Type,  >
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Type
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Type
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.SetRA.X
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Type
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Type
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.SetRA.X
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = T; qual_ident = Library.SetRA.T
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.set_top
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: set_constr
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: set_constr
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: set_constr
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.set_constr
[Debug] Rewriter.Symbol.reify /* constr set_constr(Set[Library.SetRA.X.T]): Library.SetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, set_constr
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, set_constr
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, set_constr
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, set_constr
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: set_constr
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: set_constr
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr set_constr(Set[Library.SetRA.X.T]): Library.SetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, X, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, X, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, X, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, X, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: X, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: X, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: found Alias: <Library.Type,  >
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Type, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Type, T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.SetRA.X
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Type, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Type, T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.SetRA.X
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Type
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: T
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.SetRA.X
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.id
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 5
[Debug] old id n -> 2
[Debug] fresh id n -> 3
[Debug] Keyset: 5
[Debug] old id ret -> 23
[Debug] fresh id ret -> 24
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.valid.n^3
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.valid.ret^24
[Debug] SymbolTbl.resolve_and_find: set_proj1
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: set_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: set_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = set_proj1; qual_ident = Library.SetRA.set_proj1
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: set_constr
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: set_constr
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: set_constr
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = set_constr; qual_ident = Library.SetRA.set_constr
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: n^3
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA.valid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: n^3
[Debug] SymbolTbl.resolve.go_forward: scope_entries: ret^24, n^3
[Debug] SymbolTbl.resolve.go_forward: ids2: n^3
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: n^3
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid.n^3
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: n^3
[Debug] Rewriter.Symbol.reify var n^3 : Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: set_constr
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.set_constr
[Debug] Rewriter.Symbol.reify /* constr set_constr(Set[Library.SetRA.X.T]): Library.SetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, set_constr
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, set_constr
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, set_constr
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, set_constr
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: set_constr
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: set_constr
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr set_constr(Set[Library.SetRA.X.T]): Library.SetRA.T */
[Debug] SymbolTbl.resolve_and_find: set_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr set_proj1(Library.SetRA.T): Set[
        Library.SetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, set_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, set_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, set_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, set_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: set_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: set_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr set_proj1(Library.SetRA.T): Set[
        Library.SetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: n^3
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: n^3
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid.n^3
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: n^3
[Debug] Rewriter.Symbol.reify var n^3 : Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, X, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, X, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, X, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, X, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: X, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: X, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: found Alias: <Library.Type,  >
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Type, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Type, T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.SetRA.X
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Type, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Type, T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.SetRA.X
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Type
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: T
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.SetRA.X
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 5
[Debug] old id a -> 90
[Debug] fresh id a -> 91
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 5
[Debug] old id b -> 66
[Debug] fresh id b -> 67
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 5
[Debug] old id ret -> 24
[Debug] fresh id ret -> 25
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.comp.a^91
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.comp.b^67
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.comp.ret^25
[Debug] SymbolTbl.resolve_and_find: set_proj1
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: set_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: set_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = set_proj1; qual_ident = Library.SetRA.set_proj1
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: set_constr
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: set_constr
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: set_constr
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = set_constr; qual_ident = Library.SetRA.set_constr
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: set_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = set_proj1; qual_ident = Library.SetRA.set_proj1
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: set_constr
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = set_constr; qual_ident = Library.SetRA.set_constr
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: set_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = set_proj1; qual_ident = Library.SetRA.set_proj1
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: set_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = set_proj1; qual_ident = Library.SetRA.set_proj1
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: set_constr
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = set_constr; qual_ident = Library.SetRA.set_constr
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: set_top
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: set_top
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: set_top
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_top
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_top
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = set_top; qual_ident = Library.SetRA.set_top
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.set_top
[Debug] SymbolTbl.resolve_and_find: a^91
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA.comp
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^91
[Debug] SymbolTbl.resolve.go_forward: scope_entries: ret^25, b^67, a^91
[Debug] SymbolTbl.resolve.go_forward: ids2: a^91
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^91
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp.a^91
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^91
[Debug] Rewriter.Symbol.reify var a^91 : Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: set_constr
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.set_constr
[Debug] Rewriter.Symbol.reify /* constr set_constr(Set[Library.SetRA.X.T]): Library.SetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, set_constr
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, set_constr
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, set_constr
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, set_constr
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: set_constr
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: set_constr
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr set_constr(Set[Library.SetRA.X.T]): Library.SetRA.T */
[Debug] SymbolTbl.resolve_and_find: set_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr set_proj1(Library.SetRA.T): Set[
        Library.SetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, set_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, set_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, set_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, set_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: set_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: set_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr set_proj1(Library.SetRA.T): Set[
        Library.SetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: a^91
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^91
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp.a^91
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^91
[Debug] Rewriter.Symbol.reify var a^91 : Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, X, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, X, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, X, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, X, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: X, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: X, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: found Alias: <Library.Type,  >
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Type, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Type, T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.SetRA.X
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Type, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Type, T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.SetRA.X
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Type
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: T
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.SetRA.X
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^67
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA.comp
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^67
[Debug] SymbolTbl.resolve.go_forward: scope_entries: ret^25, b^67, a^91
[Debug] SymbolTbl.resolve.go_forward: ids2: b^67
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^67
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp.b^67
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^67
[Debug] Rewriter.Symbol.reify var b^67 : Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: set_constr
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.set_constr
[Debug] Rewriter.Symbol.reify /* constr set_constr(Set[Library.SetRA.X.T]): Library.SetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr set_constr(Set[Library.SetRA.X.T]): Library.SetRA.T */
[Debug] SymbolTbl.resolve_and_find: set_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr set_proj1(Library.SetRA.T): Set[
        Library.SetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr set_proj1(Library.SetRA.T): Set[
        Library.SetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: b^67
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^67
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp.b^67
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^67
[Debug] Rewriter.Symbol.reify var b^67 : Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^91
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^91
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp.a^91
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^91
[Debug] Rewriter.Symbol.reify var a^91 : Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr set_constr(Set[Library.SetRA.X.T]): Library.SetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr set_proj1(Library.SetRA.T): Set[
        Library.SetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: a^91
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^91
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp.a^91
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^91
[Debug] Rewriter.Symbol.reify var a^91 : Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: set_constr
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.set_constr
[Debug] Rewriter.Symbol.reify /* constr set_constr(Set[Library.SetRA.X.T]): Library.SetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr set_constr(Set[Library.SetRA.X.T]): Library.SetRA.T */
[Debug] SymbolTbl.resolve_and_find: set_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr set_proj1(Library.SetRA.T): Set[
        Library.SetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr set_proj1(Library.SetRA.T): Set[
        Library.SetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: a^91
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^91
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp.a^91
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^91
[Debug] Rewriter.Symbol.reify var a^91 : Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: set_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr set_proj1(Library.SetRA.T): Set[
        Library.SetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr set_proj1(Library.SetRA.T): Set[
        Library.SetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: b^67
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^67
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp.b^67
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^67
[Debug] Rewriter.Symbol.reify var b^67 : Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: set_top
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_top
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_top
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.set_top
[Debug] Rewriter.Symbol.reify /* constr set_top(): Library.SetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.set_top
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, set_top
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, set_top
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, set_top
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, set_top
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: set_top
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: set_top
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_top
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_top
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr set_top(): Library.SetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 5
[Debug] old id a -> 91
[Debug] fresh id a -> 92
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 5
[Debug] old id b -> 67
[Debug] fresh id b -> 68
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 5
[Debug] old id ret -> 25
[Debug] fresh id ret -> 26
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.frame.a^92
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.frame.b^68
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.frame.ret^26
[Debug] SymbolTbl.resolve_and_find: set_proj1
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: set_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: set_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = set_proj1; qual_ident = Library.SetRA.set_proj1
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: set_constr
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: set_constr
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: set_constr
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = set_constr; qual_ident = Library.SetRA.set_constr
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: set_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = set_proj1; qual_ident = Library.SetRA.set_proj1
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: set_constr
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = set_constr; qual_ident = Library.SetRA.set_constr
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: set_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = set_proj1; qual_ident = Library.SetRA.set_proj1
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: set_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = set_proj1; qual_ident = Library.SetRA.set_proj1
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: set_top
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: set_top
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: set_top
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_top
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_top
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = set_top; qual_ident = Library.SetRA.set_top
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.set_top
[Debug] SymbolTbl.resolve_and_find: set_top
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_top
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_top
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = set_top; qual_ident = Library.SetRA.set_top
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.set_top
[Debug] SymbolTbl.resolve_and_find: a^92
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA.frame
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^92
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^68, a^92, ret^26
[Debug] SymbolTbl.resolve.go_forward: ids2: a^92
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^92
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frame.a^92
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^92
[Debug] Rewriter.Symbol.reify var a^92 : Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: set_constr
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.set_constr
[Debug] Rewriter.Symbol.reify /* constr set_constr(Set[Library.SetRA.X.T]): Library.SetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, set_constr
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, set_constr
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, set_constr
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, set_constr
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: set_constr
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: set_constr
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr set_constr(Set[Library.SetRA.X.T]): Library.SetRA.T */
[Debug] SymbolTbl.resolve_and_find: set_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr set_proj1(Library.SetRA.T): Set[
        Library.SetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, set_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, set_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, set_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, set_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: set_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: set_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr set_proj1(Library.SetRA.T): Set[
        Library.SetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: a^92
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^92
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frame.a^92
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^92
[Debug] Rewriter.Symbol.reify var a^92 : Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, X, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, X, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, X, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, X, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: X, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: X, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: found Alias: <Library.Type,  >
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Type, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Type, T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.SetRA.X
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Type, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Type, T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.SetRA.X
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Type
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: T
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.SetRA.X
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^68
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA.frame
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^68
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^68, a^92, ret^26
[Debug] SymbolTbl.resolve.go_forward: ids2: b^68
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^68
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frame.b^68
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^68
[Debug] Rewriter.Symbol.reify var b^68 : Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: set_constr
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.set_constr
[Debug] Rewriter.Symbol.reify /* constr set_constr(Set[Library.SetRA.X.T]): Library.SetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr set_constr(Set[Library.SetRA.X.T]): Library.SetRA.T */
[Debug] SymbolTbl.resolve_and_find: set_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr set_proj1(Library.SetRA.T): Set[
        Library.SetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr set_proj1(Library.SetRA.T): Set[
        Library.SetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: b^68
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^68
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frame.b^68
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^68
[Debug] Rewriter.Symbol.reify var b^68 : Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^92
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^92
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frame.a^92
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^92
[Debug] Rewriter.Symbol.reify var a^92 : Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr set_constr(Set[Library.SetRA.X.T]): Library.SetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr set_proj1(Library.SetRA.T): Set[
        Library.SetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: a^92
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^92
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frame.a^92
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^92
[Debug] Rewriter.Symbol.reify var a^92 : Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: set_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr set_proj1(Library.SetRA.T): Set[
        Library.SetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr set_proj1(Library.SetRA.T): Set[
        Library.SetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: b^68
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^68
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frame.b^68
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^68
[Debug] Rewriter.Symbol.reify var b^68 : Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: set_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr set_proj1(Library.SetRA.T): Set[
        Library.SetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr set_proj1(Library.SetRA.T): Set[
        Library.SetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: a^92
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^92
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frame.a^92
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^92
[Debug] Rewriter.Symbol.reify var a^92 : Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: a^92
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^92
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frame.a^92
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^92
[Debug] Rewriter.Symbol.reify var a^92 : Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: set_top
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_top
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_top
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.set_top
[Debug] Rewriter.Symbol.reify /* constr set_top(): Library.SetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.set_top
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, set_top
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, set_top
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, set_top
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, set_top
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: set_top
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: set_top
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_top
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_top
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr set_top(): Library.SetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: set_top
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_top
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_top
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.set_top
[Debug] Rewriter.Symbol.reify /* constr set_top(): Library.SetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.set_top
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_top
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_top
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr set_top(): Library.SetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 5
[Debug] old id a -> 92
[Debug] fresh id a -> 93
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 5
[Debug] old id b -> 68
[Debug] fresh id b -> 69
[Debug] Keyset: 5
[Debug] old id ret -> 26
[Debug] fresh id ret -> 27
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.fpuAllowed.a^93
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.fpuAllowed.b^69
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.fpuAllowed.ret^27
[Debug] SymbolTbl.resolve_and_find: set_proj1
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: set_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: set_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = set_proj1; qual_ident = Library.SetRA.set_proj1
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: set_constr
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: set_constr
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: set_constr
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = set_constr; qual_ident = Library.SetRA.set_constr
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: set_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = set_proj1; qual_ident = Library.SetRA.set_proj1
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: set_constr
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = set_constr; qual_ident = Library.SetRA.set_constr
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: set_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = set_proj1; qual_ident = Library.SetRA.set_proj1
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: set_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = set_proj1; qual_ident = Library.SetRA.set_proj1
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: set_top
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: set_top
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: set_top
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_top
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_top
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = set_top; qual_ident = Library.SetRA.set_top
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.set_top
[Debug] SymbolTbl.resolve_and_find: set_top
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_top
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_top
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = set_top; qual_ident = Library.SetRA.set_top
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.set_top
[Debug] SymbolTbl.resolve_and_find: a^93
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA.fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^93
[Debug] SymbolTbl.resolve.go_forward: scope_entries: ret^27, b^69, a^93
[Debug] SymbolTbl.resolve.go_forward: ids2: a^93
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^93
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuAllowed.a^93
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^93
[Debug] Rewriter.Symbol.reify var a^93 : Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: set_constr
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.set_constr
[Debug] Rewriter.Symbol.reify /* constr set_constr(Set[Library.SetRA.X.T]): Library.SetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, set_constr
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, set_constr
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, set_constr
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, set_constr
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: set_constr
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: set_constr
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr set_constr(Set[Library.SetRA.X.T]): Library.SetRA.T */
[Debug] SymbolTbl.resolve_and_find: set_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr set_proj1(Library.SetRA.T): Set[
        Library.SetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, set_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, set_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, set_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, set_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: set_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: set_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr set_proj1(Library.SetRA.T): Set[
        Library.SetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: a^93
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^93
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuAllowed.a^93
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^93
[Debug] Rewriter.Symbol.reify var a^93 : Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, X, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, X, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, X, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, X, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: X, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: X, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: found Alias: <Library.Type,  >
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Type, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Type, T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.SetRA.X
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Type, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Type, T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.SetRA.X
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Type
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: T
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.SetRA.X
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^69
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA.fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^69
[Debug] SymbolTbl.resolve.go_forward: scope_entries: ret^27, b^69, a^93
[Debug] SymbolTbl.resolve.go_forward: ids2: b^69
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^69
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuAllowed.b^69
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^69
[Debug] Rewriter.Symbol.reify var b^69 : Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: set_constr
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.set_constr
[Debug] Rewriter.Symbol.reify /* constr set_constr(Set[Library.SetRA.X.T]): Library.SetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr set_constr(Set[Library.SetRA.X.T]): Library.SetRA.T */
[Debug] SymbolTbl.resolve_and_find: set_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr set_proj1(Library.SetRA.T): Set[
        Library.SetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr set_proj1(Library.SetRA.T): Set[
        Library.SetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: b^69
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^69
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuAllowed.b^69
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^69
[Debug] Rewriter.Symbol.reify var b^69 : Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^93
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^93
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuAllowed.a^93
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^93
[Debug] Rewriter.Symbol.reify var a^93 : Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_constr
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr set_constr(Set[Library.SetRA.X.T]): Library.SetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr set_proj1(Library.SetRA.T): Set[
        Library.SetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: a^93
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^93
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuAllowed.a^93
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^93
[Debug] Rewriter.Symbol.reify var a^93 : Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: set_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr set_proj1(Library.SetRA.T): Set[
        Library.SetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr set_proj1(Library.SetRA.T): Set[
        Library.SetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: a^93
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^93
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuAllowed.a^93
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^93
[Debug] Rewriter.Symbol.reify var a^93 : Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: set_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr set_proj1(Library.SetRA.T): Set[
        Library.SetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr set_proj1(Library.SetRA.T): Set[
        Library.SetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: b^69
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^69
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuAllowed.b^69
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^69
[Debug] Rewriter.Symbol.reify var b^69 : Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.SetRA.X ]

[Debug] SymbolTbl.resolve_and_find: a^93
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^93
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuAllowed.a^93
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^93
[Debug] Rewriter.Symbol.reify var a^93 : Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: set_top
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_top
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_top
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.set_top
[Debug] Rewriter.Symbol.reify /* constr set_top(): Library.SetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.set_top
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, set_top
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, set_top
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, set_top
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, set_top
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: set_top
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: set_top
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_top
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_top
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr set_top(): Library.SetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^69
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^69
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuAllowed.b^69
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^69
[Debug] Rewriter.Symbol.reify var b^69 : Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: set_top
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_top
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_top
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.set_top
[Debug] Rewriter.Symbol.reify /* constr set_top(): Library.SetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.set_top
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_top
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_top
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr set_top(): Library.SetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^93
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^93
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuAllowed.a^93
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^93
[Debug] Rewriter.Symbol.reify var a^93 : Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.set_top
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.set_top
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.set_top
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr set_top(): Library.SetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = id; qual_ident = Library.SetRA.id
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.id
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.SetRA.valid
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^3: Library.SetRA.T)
                                returns (ret^24: Bool)
        {
          n^3 == Library.SetRA.set_constr(Library.SetRA.set_proj1(n^3))
        }
[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.id
[Debug] Rewriter.Symbol.reify val id : Library.SetRA.T =
                                    Library.SetRA.set_constr({||})
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.idValid
[Debug] Keyset: 5
[Debug] old id a -> 93
[Debug] fresh id a -> 94
[Debug] Keyset: 5
[Debug] old id b -> 69
[Debug] fresh id b -> 70
[Debug] Keyset: 5
[Debug] old id c -> 13
[Debug] fresh id c -> 14
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.SetRA.comp
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.SetRA.comp
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.SetRA.comp
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.SetRA.comp
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.compAssoc.a^94
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.compAssoc.b^70
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.compAssoc.c^14
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.comp
[Debug] Rewriter.Symbol.reify func comp(a^91: Library.SetRA.T, b^67:
                                        Library.SetRA.T)
                                returns (ret^25: Library.SetRA.T)
        {
          ite(a^91 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91)) && b^67 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^67)),
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91) ++
          Library.SetRA.set_proj1(b^67)), Library.SetRA.set_top)
        }
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.comp
[Debug] Rewriter.Symbol.reify func comp(a^91: Library.SetRA.T, b^67:
                                        Library.SetRA.T)
                                returns (ret^25: Library.SetRA.T)
        {
          ite(a^91 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91)) && b^67 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^67)),
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91) ++
          Library.SetRA.set_proj1(b^67)), Library.SetRA.set_top)
        }
[Debug] SymbolTbl.resolve_and_find: a^94
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA.compAssoc
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^94
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^94, c^14, b^70
[Debug] SymbolTbl.resolve.go_forward: ids2: a^94
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^94
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.compAssoc.a^94
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^94
[Debug] Rewriter.Symbol.reify var a^94 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^70
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA.compAssoc
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^70
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^94, c^14, b^70
[Debug] SymbolTbl.resolve.go_forward: ids2: b^70
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^70
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.compAssoc.b^70
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^70
[Debug] Rewriter.Symbol.reify var b^70 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^14
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA.compAssoc
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: c^14
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^94, c^14, b^70
[Debug] SymbolTbl.resolve.go_forward: ids2: c^14
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^14
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.compAssoc.c^14
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^14
[Debug] Rewriter.Symbol.reify var c^14 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.comp
[Debug] Rewriter.Symbol.reify func comp(a^91: Library.SetRA.T, b^67:
                                        Library.SetRA.T)
                                returns (ret^25: Library.SetRA.T)
        {
          ite(a^91 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91)) && b^67 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^67)),
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91) ++
          Library.SetRA.set_proj1(b^67)), Library.SetRA.set_top)
        }
[Debug] SymbolTbl.resolve_and_find: a^94
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^94
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.compAssoc.a^94
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^94
[Debug] Rewriter.Symbol.reify var a^94 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.comp
[Debug] Rewriter.Symbol.reify func comp(a^91: Library.SetRA.T, b^67:
                                        Library.SetRA.T)
                                returns (ret^25: Library.SetRA.T)
        {
          ite(a^91 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91)) && b^67 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^67)),
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91) ++
          Library.SetRA.set_proj1(b^67)), Library.SetRA.set_top)
        }
[Debug] SymbolTbl.resolve_and_find: b^70
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^70
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.compAssoc.b^70
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^70
[Debug] Rewriter.Symbol.reify var b^70 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^14
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^14
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.compAssoc.c^14
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^14
[Debug] Rewriter.Symbol.reify var c^14 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compAssoc
[Debug] Keyset: 5
[Debug] old id a -> 94
[Debug] fresh id a -> 95
[Debug] Keyset: 5
[Debug] old id b -> 70
[Debug] fresh id b -> 71
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.SetRA.comp
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.SetRA.comp
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.compCommute.a^95
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.compCommute.b^71
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.comp
[Debug] Rewriter.Symbol.reify func comp(a^91: Library.SetRA.T, b^67:
                                        Library.SetRA.T)
                                returns (ret^25: Library.SetRA.T)
        {
          ite(a^91 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91)) && b^67 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^67)),
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91) ++
          Library.SetRA.set_proj1(b^67)), Library.SetRA.set_top)
        }
[Debug] SymbolTbl.resolve_and_find: a^95
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA.compCommute
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^95
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^71, a^95
[Debug] SymbolTbl.resolve.go_forward: ids2: a^95
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^95
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.compCommute.a^95
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^95
[Debug] Rewriter.Symbol.reify var a^95 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^71
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA.compCommute
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^71
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^71, a^95
[Debug] SymbolTbl.resolve.go_forward: ids2: b^71
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^71
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.compCommute.b^71
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^71
[Debug] Rewriter.Symbol.reify var b^71 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.comp
[Debug] Rewriter.Symbol.reify func comp(a^91: Library.SetRA.T, b^67:
                                        Library.SetRA.T)
                                returns (ret^25: Library.SetRA.T)
        {
          ite(a^91 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91)) && b^67 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^67)),
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91) ++
          Library.SetRA.set_proj1(b^67)), Library.SetRA.set_top)
        }
[Debug] SymbolTbl.resolve_and_find: b^71
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^71
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.compCommute.b^71
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^71
[Debug] Rewriter.Symbol.reify var b^71 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^95
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^95
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.compCommute.a^95
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^95
[Debug] Rewriter.Symbol.reify var a^95 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compCommute
[Debug] Keyset: 5
[Debug] old id a -> 95
[Debug] fresh id a -> 96
[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = id; qual_ident = Library.SetRA.id
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.id
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.SetRA.comp
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.compId.a^96
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.comp
[Debug] Rewriter.Symbol.reify func comp(a^91: Library.SetRA.T, b^67:
                                        Library.SetRA.T)
                                returns (ret^25: Library.SetRA.T)
        {
          ite(a^91 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91)) && b^67 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^67)),
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91) ++
          Library.SetRA.set_proj1(b^67)), Library.SetRA.set_top)
        }
[Debug] SymbolTbl.resolve_and_find: a^96
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA.compId
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^96
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^96
[Debug] SymbolTbl.resolve.go_forward: ids2: a^96
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^96
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.compId.a^96
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^96
[Debug] Rewriter.Symbol.reify var a^96 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.id
[Debug] Rewriter.Symbol.reify val id : Library.SetRA.T =
                                    Library.SetRA.set_constr({||})
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^96
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^96
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.compId.a^96
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^96
[Debug] Rewriter.Symbol.reify var a^96 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compId
[Debug] Keyset: 5
[Debug] old id a -> 96
[Debug] fresh id a -> 97
[Debug] Keyset: 5
[Debug] old id b -> 71
[Debug] fresh id b -> 72
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.SetRA.comp
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.SetRA.valid
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.SetRA.valid
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.SetRA.valid
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.compValid.a^97
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.compValid.b^72
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^3: Library.SetRA.T)
                                returns (ret^24: Bool)
        {
          n^3 == Library.SetRA.set_constr(Library.SetRA.set_proj1(n^3))
        }
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.comp
[Debug] Rewriter.Symbol.reify func comp(a^91: Library.SetRA.T, b^67:
                                        Library.SetRA.T)
                                returns (ret^25: Library.SetRA.T)
        {
          ite(a^91 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91)) && b^67 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^67)),
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91) ++
          Library.SetRA.set_proj1(b^67)), Library.SetRA.set_top)
        }
[Debug] SymbolTbl.resolve_and_find: a^97
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA.compValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^97
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^97, b^72
[Debug] SymbolTbl.resolve.go_forward: ids2: a^97
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^97
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.compValid.a^97
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^97
[Debug] Rewriter.Symbol.reify var a^97 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^72
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA.compValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^72
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^97, b^72
[Debug] SymbolTbl.resolve.go_forward: ids2: b^72
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^72
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.compValid.b^72
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^72
[Debug] Rewriter.Symbol.reify var b^72 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^3: Library.SetRA.T)
                                returns (ret^24: Bool)
        {
          n^3 == Library.SetRA.set_constr(Library.SetRA.set_proj1(n^3))
        }
[Debug] SymbolTbl.resolve_and_find: a^97
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^97
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.compValid.a^97
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^97
[Debug] Rewriter.Symbol.reify var a^97 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^3: Library.SetRA.T)
                                returns (ret^24: Bool)
        {
          n^3 == Library.SetRA.set_constr(Library.SetRA.set_proj1(n^3))
        }
[Debug] SymbolTbl.resolve_and_find: b^72
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^72
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.compValid.b^72
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^72
[Debug] Rewriter.Symbol.reify var b^72 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^3: Library.SetRA.T)
                                returns (ret^24: Bool)
        {
          n^3 == Library.SetRA.set_constr(Library.SetRA.set_proj1(n^3))
        }
[Debug] SymbolTbl.resolve_and_find: a^97
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^97
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.compValid.a^97
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^97
[Debug] Rewriter.Symbol.reify var a^97 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^3: Library.SetRA.T)
                                returns (ret^24: Bool)
        {
          n^3 == Library.SetRA.set_constr(Library.SetRA.set_proj1(n^3))
        }
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.comp
[Debug] Rewriter.Symbol.reify func comp(a^91: Library.SetRA.T, b^67:
                                        Library.SetRA.T)
                                returns (ret^25: Library.SetRA.T)
        {
          ite(a^91 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91)) && b^67 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^67)),
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91) ++
          Library.SetRA.set_proj1(b^67)), Library.SetRA.set_top)
        }
[Debug] SymbolTbl.resolve_and_find: a^97
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^97
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.compValid.a^97
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^97
[Debug] Rewriter.Symbol.reify var a^97 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^72
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^72
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.compValid.b^72
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^72
[Debug] Rewriter.Symbol.reify var b^72 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compValid
[Debug] Keyset: 5
[Debug] old id a -> 97
[Debug] fresh id a -> 98
[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = id; qual_ident = Library.SetRA.id
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.id
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.SetRA.frame
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.frameId.a^98
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.frame
[Debug] Rewriter.Symbol.reify func frame(a^92: Library.SetRA.T, b^68:
                                         Library.SetRA.T)
                                returns (ret^26: Library.SetRA.T)
        {
          ite(a^92 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^92)) && b^68 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^68)),
          ite(Library.SetRA.set_proj1(b^68) subsetof
          Library.SetRA.set_proj1(a^92), a^92, Library.SetRA.set_top),
          Library.SetRA.set_top)
        }
[Debug] SymbolTbl.resolve_and_find: a^98
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA.frameId
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^98
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^98
[Debug] SymbolTbl.resolve.go_forward: ids2: a^98
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^98
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameId.a^98
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^98
[Debug] Rewriter.Symbol.reify var a^98 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.id
[Debug] Rewriter.Symbol.reify val id : Library.SetRA.T =
                                    Library.SetRA.set_constr({||})
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^98
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^98
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameId.a^98
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^98
[Debug] Rewriter.Symbol.reify var a^98 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameId
[Debug] Keyset: 5
[Debug] old id a -> 98
[Debug] fresh id a -> 99
[Debug] Keyset: 5
[Debug] old id b -> 72
[Debug] fresh id b -> 73
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.SetRA.frame
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.SetRA.valid
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.SetRA.frame
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.SetRA.comp
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.compFrameInv.a^99
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.compFrameInv.b^73
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^3: Library.SetRA.T)
                                returns (ret^24: Bool)
        {
          n^3 == Library.SetRA.set_constr(Library.SetRA.set_proj1(n^3))
        }
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.frame
[Debug] Rewriter.Symbol.reify func frame(a^92: Library.SetRA.T, b^68:
                                         Library.SetRA.T)
                                returns (ret^26: Library.SetRA.T)
        {
          ite(a^92 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^92)) && b^68 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^68)),
          ite(Library.SetRA.set_proj1(b^68) subsetof
          Library.SetRA.set_proj1(a^92), a^92, Library.SetRA.set_top),
          Library.SetRA.set_top)
        }
[Debug] SymbolTbl.resolve_and_find: a^99
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA.compFrameInv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^99
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^73, a^99
[Debug] SymbolTbl.resolve.go_forward: ids2: a^99
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^99
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.compFrameInv.a^99
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^99
[Debug] Rewriter.Symbol.reify var a^99 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^73
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA.compFrameInv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^73
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^73, a^99
[Debug] SymbolTbl.resolve.go_forward: ids2: b^73
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^73
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.compFrameInv.b^73
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^73
[Debug] Rewriter.Symbol.reify var b^73 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.comp
[Debug] Rewriter.Symbol.reify func comp(a^91: Library.SetRA.T, b^67:
                                        Library.SetRA.T)
                                returns (ret^25: Library.SetRA.T)
        {
          ite(a^91 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91)) && b^67 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^67)),
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91) ++
          Library.SetRA.set_proj1(b^67)), Library.SetRA.set_top)
        }
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.frame
[Debug] Rewriter.Symbol.reify func frame(a^92: Library.SetRA.T, b^68:
                                         Library.SetRA.T)
                                returns (ret^26: Library.SetRA.T)
        {
          ite(a^92 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^92)) && b^68 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^68)),
          ite(Library.SetRA.set_proj1(b^68) subsetof
          Library.SetRA.set_proj1(a^92), a^92, Library.SetRA.set_top),
          Library.SetRA.set_top)
        }
[Debug] SymbolTbl.resolve_and_find: a^99
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^99
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.compFrameInv.a^99
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^99
[Debug] Rewriter.Symbol.reify var a^99 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^73
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^73
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.compFrameInv.b^73
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^73
[Debug] Rewriter.Symbol.reify var b^73 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^73
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^73
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.compFrameInv.b^73
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^73
[Debug] Rewriter.Symbol.reify var b^73 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^99
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^99
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.compFrameInv.a^99
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^99
[Debug] Rewriter.Symbol.reify var a^99 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^3: Library.SetRA.T)
                                returns (ret^24: Bool)
        {
          n^3 == Library.SetRA.set_constr(Library.SetRA.set_proj1(n^3))
        }
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.frame
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.frame
[Debug] Rewriter.Symbol.reify func frame(a^92: Library.SetRA.T, b^68:
                                         Library.SetRA.T)
                                returns (ret^26: Library.SetRA.T)
        {
          ite(a^92 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^92)) && b^68 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^68)),
          ite(Library.SetRA.set_proj1(b^68) subsetof
          Library.SetRA.set_proj1(a^92), a^92, Library.SetRA.set_top),
          Library.SetRA.set_top)
        }
[Debug] SymbolTbl.resolve_and_find: a^99
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^99
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.compFrameInv.a^99
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^99
[Debug] Rewriter.Symbol.reify var a^99 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^73
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^73
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.compFrameInv.b^73
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^73
[Debug] Rewriter.Symbol.reify var b^73 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compFrameInv
[Debug] Keyset: 5
[Debug] old id a -> 99
[Debug] fresh id a -> 100
[Debug] Keyset: 5
[Debug] old id b -> 73
[Debug] fresh id b -> 74
[Debug] Keyset: 5
[Debug] old id c -> 14
[Debug] fresh id c -> 15
[Debug] SymbolTbl.resolve_and_find: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = fpuAllowed; qual_ident = Library.SetRA.fpuAllowed
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.SetRA.valid
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.SetRA.comp
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.SetRA.valid
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.SetRA.comp
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.SetRA.valid
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.fpuValid.a^100
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.fpuValid.b^74
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.fpuValid.c^15
[Debug] SymbolTbl.resolve_and_find: fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^93: Library.SetRA.T, b^69:
                                              Library.SetRA.T)
                                returns (ret^27: Bool)
        {
          ite(a^93 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^93)) && b^69 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^69)),
          Library.SetRA.set_proj1(a^93) subsetof
          Library.SetRA.set_proj1(b^69), ite(a^93 == Library.SetRA.set_top &&
          b^69 == Library.SetRA.set_top, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: a^100
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA.fpuValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^100
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^74, c^15, a^100
[Debug] SymbolTbl.resolve.go_forward: ids2: a^100
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^100
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuValid.a^100
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^100
[Debug] Rewriter.Symbol.reify var a^100 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^74
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA.fpuValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^74
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^74, c^15, a^100
[Debug] SymbolTbl.resolve.go_forward: ids2: b^74
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^74
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuValid.b^74
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^74
[Debug] Rewriter.Symbol.reify var b^74 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^3: Library.SetRA.T)
                                returns (ret^24: Bool)
        {
          n^3 == Library.SetRA.set_constr(Library.SetRA.set_proj1(n^3))
        }
[Debug] SymbolTbl.resolve_and_find: a^100
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^100
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuValid.a^100
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^100
[Debug] Rewriter.Symbol.reify var a^100 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^93: Library.SetRA.T, b^69:
                                              Library.SetRA.T)
                                returns (ret^27: Bool)
        {
          ite(a^93 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^93)) && b^69 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^69)),
          Library.SetRA.set_proj1(a^93) subsetof
          Library.SetRA.set_proj1(b^69), ite(a^93 == Library.SetRA.set_top &&
          b^69 == Library.SetRA.set_top, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: a^100
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^100
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuValid.a^100
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^100
[Debug] Rewriter.Symbol.reify var a^100 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^74
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^74
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuValid.b^74
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^74
[Debug] Rewriter.Symbol.reify var b^74 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^3: Library.SetRA.T)
                                returns (ret^24: Bool)
        {
          n^3 == Library.SetRA.set_constr(Library.SetRA.set_proj1(n^3))
        }
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.comp
[Debug] Rewriter.Symbol.reify func comp(a^91: Library.SetRA.T, b^67:
                                        Library.SetRA.T)
                                returns (ret^25: Library.SetRA.T)
        {
          ite(a^91 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91)) && b^67 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^67)),
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91) ++
          Library.SetRA.set_proj1(b^67)), Library.SetRA.set_top)
        }
[Debug] SymbolTbl.resolve_and_find: a^100
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^100
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuValid.a^100
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^100
[Debug] Rewriter.Symbol.reify var a^100 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^15
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA.fpuValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: c^15
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^74, c^15, a^100
[Debug] SymbolTbl.resolve.go_forward: ids2: c^15
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^15
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuValid.c^15
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^15
[Debug] Rewriter.Symbol.reify var c^15 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^93: Library.SetRA.T, b^69:
                                              Library.SetRA.T)
                                returns (ret^27: Bool)
        {
          ite(a^93 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^93)) && b^69 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^69)),
          Library.SetRA.set_proj1(a^93) subsetof
          Library.SetRA.set_proj1(b^69), ite(a^93 == Library.SetRA.set_top &&
          b^69 == Library.SetRA.set_top, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: a^100
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^100
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuValid.a^100
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^100
[Debug] Rewriter.Symbol.reify var a^100 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^74
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^74
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuValid.b^74
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^74
[Debug] Rewriter.Symbol.reify var b^74 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^3: Library.SetRA.T)
                                returns (ret^24: Bool)
        {
          n^3 == Library.SetRA.set_constr(Library.SetRA.set_proj1(n^3))
        }
[Debug] SymbolTbl.resolve_and_find: a^100
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^100
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuValid.a^100
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^100
[Debug] Rewriter.Symbol.reify var a^100 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^93: Library.SetRA.T, b^69:
                                              Library.SetRA.T)
                                returns (ret^27: Bool)
        {
          ite(a^93 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^93)) && b^69 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^69)),
          Library.SetRA.set_proj1(a^93) subsetof
          Library.SetRA.set_proj1(b^69), ite(a^93 == Library.SetRA.set_top &&
          b^69 == Library.SetRA.set_top, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: a^100
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^100
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuValid.a^100
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^100
[Debug] Rewriter.Symbol.reify var a^100 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^74
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^74
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuValid.b^74
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^74
[Debug] Rewriter.Symbol.reify var b^74 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^3: Library.SetRA.T)
                                returns (ret^24: Bool)
        {
          n^3 == Library.SetRA.set_constr(Library.SetRA.set_proj1(n^3))
        }
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.comp
[Debug] Rewriter.Symbol.reify func comp(a^91: Library.SetRA.T, b^67:
                                        Library.SetRA.T)
                                returns (ret^25: Library.SetRA.T)
        {
          ite(a^91 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91)) && b^67 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^67)),
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91) ++
          Library.SetRA.set_proj1(b^67)), Library.SetRA.set_top)
        }
[Debug] SymbolTbl.resolve_and_find: b^74
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^74
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuValid.b^74
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^74
[Debug] Rewriter.Symbol.reify var b^74 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^15
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^15
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuValid.c^15
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^15
[Debug] Rewriter.Symbol.reify var c^15 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^93: Library.SetRA.T, b^69:
                                              Library.SetRA.T)
                                returns (ret^27: Bool)
        {
          ite(a^93 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^93)) && b^69 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^69)),
          Library.SetRA.set_proj1(a^93) subsetof
          Library.SetRA.set_proj1(b^69), ite(a^93 == Library.SetRA.set_top &&
          b^69 == Library.SetRA.set_top, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: a^100
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^100
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuValid.a^100
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^100
[Debug] Rewriter.Symbol.reify var a^100 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^74
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^74
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuValid.b^74
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^74
[Debug] Rewriter.Symbol.reify var b^74 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^3: Library.SetRA.T)
                                returns (ret^24: Bool)
        {
          n^3 == Library.SetRA.set_constr(Library.SetRA.set_proj1(n^3))
        }
[Debug] SymbolTbl.resolve_and_find: a^100
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^100
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuValid.a^100
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^100
[Debug] Rewriter.Symbol.reify var a^100 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^93: Library.SetRA.T, b^69:
                                              Library.SetRA.T)
                                returns (ret^27: Bool)
        {
          ite(a^93 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^93)) && b^69 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^69)),
          Library.SetRA.set_proj1(a^93) subsetof
          Library.SetRA.set_proj1(b^69), ite(a^93 == Library.SetRA.set_top &&
          b^69 == Library.SetRA.set_top, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: a^100
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^100
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuValid.a^100
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^100
[Debug] Rewriter.Symbol.reify var a^100 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^74
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^74
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuValid.b^74
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^74
[Debug] Rewriter.Symbol.reify var b^74 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^3: Library.SetRA.T)
                                returns (ret^24: Bool)
        {
          n^3 == Library.SetRA.set_constr(Library.SetRA.set_proj1(n^3))
        }
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.comp
[Debug] Rewriter.Symbol.reify func comp(a^91: Library.SetRA.T, b^67:
                                        Library.SetRA.T)
                                returns (ret^25: Library.SetRA.T)
        {
          ite(a^91 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91)) && b^67 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^67)),
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91) ++
          Library.SetRA.set_proj1(b^67)), Library.SetRA.set_top)
        }
[Debug] SymbolTbl.resolve_and_find: a^100
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^100
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuValid.a^100
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^100
[Debug] Rewriter.Symbol.reify var a^100 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^15
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^15
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuValid.c^15
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^15
[Debug] Rewriter.Symbol.reify var c^15 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^93: Library.SetRA.T, b^69:
                                              Library.SetRA.T)
                                returns (ret^27: Bool)
        {
          ite(a^93 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^93)) && b^69 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^69)),
          Library.SetRA.set_proj1(a^93) subsetof
          Library.SetRA.set_proj1(b^69), ite(a^93 == Library.SetRA.set_top &&
          b^69 == Library.SetRA.set_top, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: a^100
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^100
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuValid.a^100
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^100
[Debug] Rewriter.Symbol.reify var a^100 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^74
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^74
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuValid.b^74
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^74
[Debug] Rewriter.Symbol.reify var b^74 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^3: Library.SetRA.T)
                                returns (ret^24: Bool)
        {
          n^3 == Library.SetRA.set_constr(Library.SetRA.set_proj1(n^3))
        }
[Debug] SymbolTbl.resolve_and_find: a^100
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^100
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuValid.a^100
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^100
[Debug] Rewriter.Symbol.reify var a^100 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^93: Library.SetRA.T, b^69:
                                              Library.SetRA.T)
                                returns (ret^27: Bool)
        {
          ite(a^93 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^93)) && b^69 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^69)),
          Library.SetRA.set_proj1(a^93) subsetof
          Library.SetRA.set_proj1(b^69), ite(a^93 == Library.SetRA.set_top &&
          b^69 == Library.SetRA.set_top, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: a^100
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^100
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuValid.a^100
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^100
[Debug] Rewriter.Symbol.reify var a^100 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^74
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^74
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuValid.b^74
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^74
[Debug] Rewriter.Symbol.reify var b^74 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.fpuValid
[Debug] Keyset: 5
[Debug] old id a -> 100
[Debug] fresh id a -> 101
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.SetRA.valid
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = fpuAllowed; qual_ident = Library.SetRA.fpuAllowed
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.fpuReflexive.a^101
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^3: Library.SetRA.T)
                                returns (ret^24: Bool)
        {
          n^3 == Library.SetRA.set_constr(Library.SetRA.set_proj1(n^3))
        }
[Debug] SymbolTbl.resolve_and_find: a^101
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA.fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^101
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^101
[Debug] SymbolTbl.resolve.go_forward: ids2: a^101
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^101
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuReflexive.a^101
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^101
[Debug] Rewriter.Symbol.reify var a^101 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^93: Library.SetRA.T, b^69:
                                              Library.SetRA.T)
                                returns (ret^27: Bool)
        {
          ite(a^93 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^93)) && b^69 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^69)),
          Library.SetRA.set_proj1(a^93) subsetof
          Library.SetRA.set_proj1(b^69), ite(a^93 == Library.SetRA.set_top &&
          b^69 == Library.SetRA.set_top, true, false))
        }
[Debug] SymbolTbl.resolve_and_find: a^101
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^101
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuReflexive.a^101
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^101
[Debug] Rewriter.Symbol.reify var a^101 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^101
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^101
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuReflexive.a^101
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^101
[Debug] Rewriter.Symbol.reify var a^101 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^3: Library.SetRA.T)
                                returns (ret^24: Bool)
        {
          n^3 == Library.SetRA.set_constr(Library.SetRA.set_proj1(n^3))
        }
[Debug] SymbolTbl.resolve_and_find: a^101
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^101
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuReflexive.a^101
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^101
[Debug] Rewriter.Symbol.reify var a^101 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.fpuReflexive
[Debug] Keyset: 5
[Debug] old id a -> 101
[Debug] fresh id a -> 102
[Debug] Keyset: 5
[Debug] old id b -> 74
[Debug] fresh id b -> 75
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.SetRA.frame
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.SetRA.valid
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.SetRA.valid
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.SetRA.valid
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.frameValid.a^102
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.frameValid.b^75
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^3: Library.SetRA.T)
                                returns (ret^24: Bool)
        {
          n^3 == Library.SetRA.set_constr(Library.SetRA.set_proj1(n^3))
        }
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.frame
[Debug] Rewriter.Symbol.reify func frame(a^92: Library.SetRA.T, b^68:
                                         Library.SetRA.T)
                                returns (ret^26: Library.SetRA.T)
        {
          ite(a^92 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^92)) && b^68 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^68)),
          ite(Library.SetRA.set_proj1(b^68) subsetof
          Library.SetRA.set_proj1(a^92), a^92, Library.SetRA.set_top),
          Library.SetRA.set_top)
        }
[Debug] SymbolTbl.resolve_and_find: a^102
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA.frameValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^102
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^75, a^102
[Debug] SymbolTbl.resolve.go_forward: ids2: a^102
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^102
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameValid.a^102
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^102
[Debug] Rewriter.Symbol.reify var a^102 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^75
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA.frameValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^75
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^75, a^102
[Debug] SymbolTbl.resolve.go_forward: ids2: b^75
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^75
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameValid.b^75
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^75
[Debug] Rewriter.Symbol.reify var b^75 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^3: Library.SetRA.T)
                                returns (ret^24: Bool)
        {
          n^3 == Library.SetRA.set_constr(Library.SetRA.set_proj1(n^3))
        }
[Debug] SymbolTbl.resolve_and_find: a^102
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^102
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameValid.a^102
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^102
[Debug] Rewriter.Symbol.reify var a^102 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^3: Library.SetRA.T)
                                returns (ret^24: Bool)
        {
          n^3 == Library.SetRA.set_constr(Library.SetRA.set_proj1(n^3))
        }
[Debug] SymbolTbl.resolve_and_find: b^75
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^75
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameValid.b^75
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^75
[Debug] Rewriter.Symbol.reify var b^75 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^3: Library.SetRA.T)
                                returns (ret^24: Bool)
        {
          n^3 == Library.SetRA.set_constr(Library.SetRA.set_proj1(n^3))
        }
[Debug] SymbolTbl.resolve_and_find: a^102
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^102
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameValid.a^102
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^102
[Debug] Rewriter.Symbol.reify var a^102 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^3: Library.SetRA.T)
                                returns (ret^24: Bool)
        {
          n^3 == Library.SetRA.set_constr(Library.SetRA.set_proj1(n^3))
        }
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.frame
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.frame
[Debug] Rewriter.Symbol.reify func frame(a^92: Library.SetRA.T, b^68:
                                         Library.SetRA.T)
                                returns (ret^26: Library.SetRA.T)
        {
          ite(a^92 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^92)) && b^68 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^68)),
          ite(Library.SetRA.set_proj1(b^68) subsetof
          Library.SetRA.set_proj1(a^92), a^92, Library.SetRA.set_top),
          Library.SetRA.set_top)
        }
[Debug] SymbolTbl.resolve_and_find: a^102
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^102
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameValid.a^102
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^102
[Debug] Rewriter.Symbol.reify var a^102 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^75
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^75
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameValid.b^75
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^75
[Debug] Rewriter.Symbol.reify var b^75 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameValid
[Debug] Keyset: 5
[Debug] old id a -> 102
[Debug] fresh id a -> 103
[Debug] Keyset: 5
[Debug] old id b -> 75
[Debug] fresh id b -> 76
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.SetRA.comp
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.SetRA.valid
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.SetRA.comp
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.SetRA.frame
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.SetRA.valid
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.weak_frameCompInv.a^103
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.weak_frameCompInv.b^76
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^3: Library.SetRA.T)
                                returns (ret^24: Bool)
        {
          n^3 == Library.SetRA.set_constr(Library.SetRA.set_proj1(n^3))
        }
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.comp
[Debug] Rewriter.Symbol.reify func comp(a^91: Library.SetRA.T, b^67:
                                        Library.SetRA.T)
                                returns (ret^25: Library.SetRA.T)
        {
          ite(a^91 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91)) && b^67 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^67)),
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91) ++
          Library.SetRA.set_proj1(b^67)), Library.SetRA.set_top)
        }
[Debug] SymbolTbl.resolve_and_find: a^103
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA.weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^103
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^76, a^103
[Debug] SymbolTbl.resolve.go_forward: ids2: a^103
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^103
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.weak_frameCompInv.a^103
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^103
[Debug] Rewriter.Symbol.reify var a^103 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^76
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA.weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^76
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^76, a^103
[Debug] SymbolTbl.resolve.go_forward: ids2: b^76
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^76
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.weak_frameCompInv.b^76
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^76
[Debug] Rewriter.Symbol.reify var b^76 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^3: Library.SetRA.T)
                                returns (ret^24: Bool)
        {
          n^3 == Library.SetRA.set_constr(Library.SetRA.set_proj1(n^3))
        }
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.frame
[Debug] Rewriter.Symbol.reify func frame(a^92: Library.SetRA.T, b^68:
                                         Library.SetRA.T)
                                returns (ret^26: Library.SetRA.T)
        {
          ite(a^92 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^92)) && b^68 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^68)),
          ite(Library.SetRA.set_proj1(b^68) subsetof
          Library.SetRA.set_proj1(a^92), a^92, Library.SetRA.set_top),
          Library.SetRA.set_top)
        }
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.comp
[Debug] Rewriter.Symbol.reify func comp(a^91: Library.SetRA.T, b^67:
                                        Library.SetRA.T)
                                returns (ret^25: Library.SetRA.T)
        {
          ite(a^91 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91)) && b^67 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^67)),
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91) ++
          Library.SetRA.set_proj1(b^67)), Library.SetRA.set_top)
        }
[Debug] SymbolTbl.resolve_and_find: a^103
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^103
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.weak_frameCompInv.a^103
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^103
[Debug] Rewriter.Symbol.reify var a^103 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^76
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^76
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.weak_frameCompInv.b^76
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^76
[Debug] Rewriter.Symbol.reify var b^76 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^76
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^76
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.weak_frameCompInv.b^76
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^76
[Debug] Rewriter.Symbol.reify var b^76 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^3: Library.SetRA.T)
                                returns (ret^24: Bool)
        {
          n^3 == Library.SetRA.set_constr(Library.SetRA.set_proj1(n^3))
        }
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.comp
[Debug] Rewriter.Symbol.reify func comp(a^91: Library.SetRA.T, b^67:
                                        Library.SetRA.T)
                                returns (ret^25: Library.SetRA.T)
        {
          ite(a^91 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91)) && b^67 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^67)),
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91) ++
          Library.SetRA.set_proj1(b^67)), Library.SetRA.set_top)
        }
[Debug] SymbolTbl.resolve_and_find: a^103
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^103
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.weak_frameCompInv.a^103
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^103
[Debug] Rewriter.Symbol.reify var a^103 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^76
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^76
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.weak_frameCompInv.b^76
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^76
[Debug] Rewriter.Symbol.reify var b^76 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.weak_frameCompInv
[Debug] Keyset: 5
[Debug] old id a -> 103
[Debug] fresh id a -> 104
[Debug] Keyset: 5
[Debug] old id b -> 76
[Debug] fresh id b -> 77
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.SetRA.frame
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.SetRA.valid
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.SetRA.frame
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.frameCompInv.a^104
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.frameCompInv.b^77
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^3: Library.SetRA.T)
                                returns (ret^24: Bool)
        {
          n^3 == Library.SetRA.set_constr(Library.SetRA.set_proj1(n^3))
        }
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.frame
[Debug] Rewriter.Symbol.reify func frame(a^92: Library.SetRA.T, b^68:
                                         Library.SetRA.T)
                                returns (ret^26: Library.SetRA.T)
        {
          ite(a^92 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^92)) && b^68 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^68)),
          ite(Library.SetRA.set_proj1(b^68) subsetof
          Library.SetRA.set_proj1(a^92), a^92, Library.SetRA.set_top),
          Library.SetRA.set_top)
        }
[Debug] SymbolTbl.resolve_and_find: a^104
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA.frameCompInv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^104
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^77, a^104
[Debug] SymbolTbl.resolve.go_forward: ids2: a^104
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^104
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameCompInv.a^104
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^104
[Debug] Rewriter.Symbol.reify var a^104 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^77
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA.frameCompInv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^77
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^77, a^104
[Debug] SymbolTbl.resolve.go_forward: ids2: b^77
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^77
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameCompInv.b^77
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^77
[Debug] Rewriter.Symbol.reify var b^77 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.frame
[Debug] Rewriter.Symbol.reify func frame(a^92: Library.SetRA.T, b^68:
                                         Library.SetRA.T)
                                returns (ret^26: Library.SetRA.T)
        {
          ite(a^92 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^92)) && b^68 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^68)),
          ite(Library.SetRA.set_proj1(b^68) subsetof
          Library.SetRA.set_proj1(a^92), a^92, Library.SetRA.set_top),
          Library.SetRA.set_top)
        }
[Debug] SymbolTbl.resolve_and_find: a^104
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^104
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameCompInv.a^104
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^104
[Debug] Rewriter.Symbol.reify var a^104 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^77
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^77
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameCompInv.b^77
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^77
[Debug] Rewriter.Symbol.reify var b^77 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^104
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^104
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameCompInv.a^104
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^104
[Debug] Rewriter.Symbol.reify var a^104 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^3: Library.SetRA.T)
                                returns (ret^24: Bool)
        {
          n^3 == Library.SetRA.set_constr(Library.SetRA.set_proj1(n^3))
        }
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.frame
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.frame
[Debug] Rewriter.Symbol.reify func frame(a^92: Library.SetRA.T, b^68:
                                         Library.SetRA.T)
                                returns (ret^26: Library.SetRA.T)
        {
          ite(a^92 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^92)) && b^68 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^68)),
          ite(Library.SetRA.set_proj1(b^68) subsetof
          Library.SetRA.set_proj1(a^92), a^92, Library.SetRA.set_top),
          Library.SetRA.set_top)
        }
[Debug] SymbolTbl.resolve_and_find: a^104
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^104
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameCompInv.a^104
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^104
[Debug] Rewriter.Symbol.reify var a^104 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^77
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^77
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameCompInv.b^77
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^77
[Debug] Rewriter.Symbol.reify var b^77 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameCompInv
[Debug] Keyset: 5
[Debug] old id a -> 104
[Debug] fresh id a -> 105
[Debug] Keyset: 5
[Debug] old id b -> 77
[Debug] fresh id b -> 78
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.SetRA.comp
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.SetRA.valid
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.SetRA.comp
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.SetRA.frame
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.SetRA.comp
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.frameCompInv0.a^105
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.frameCompInv0.b^78
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^3: Library.SetRA.T)
                                returns (ret^24: Bool)
        {
          n^3 == Library.SetRA.set_constr(Library.SetRA.set_proj1(n^3))
        }
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.comp
[Debug] Rewriter.Symbol.reify func comp(a^91: Library.SetRA.T, b^67:
                                        Library.SetRA.T)
                                returns (ret^25: Library.SetRA.T)
        {
          ite(a^91 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91)) && b^67 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^67)),
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91) ++
          Library.SetRA.set_proj1(b^67)), Library.SetRA.set_top)
        }
[Debug] SymbolTbl.resolve_and_find: a^105
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA.frameCompInv0
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^105
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^78, a^105
[Debug] SymbolTbl.resolve.go_forward: ids2: a^105
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^105
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameCompInv0.a^105
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^105
[Debug] Rewriter.Symbol.reify var a^105 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^78
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA.frameCompInv0
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^78
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^78, a^105
[Debug] SymbolTbl.resolve.go_forward: ids2: b^78
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^78
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameCompInv0.b^78
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^78
[Debug] Rewriter.Symbol.reify var b^78 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.frame
[Debug] Rewriter.Symbol.reify func frame(a^92: Library.SetRA.T, b^68:
                                         Library.SetRA.T)
                                returns (ret^26: Library.SetRA.T)
        {
          ite(a^92 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^92)) && b^68 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^68)),
          ite(Library.SetRA.set_proj1(b^68) subsetof
          Library.SetRA.set_proj1(a^92), a^92, Library.SetRA.set_top),
          Library.SetRA.set_top)
        }
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.comp
[Debug] Rewriter.Symbol.reify func comp(a^91: Library.SetRA.T, b^67:
                                        Library.SetRA.T)
                                returns (ret^25: Library.SetRA.T)
        {
          ite(a^91 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91)) && b^67 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^67)),
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91) ++
          Library.SetRA.set_proj1(b^67)), Library.SetRA.set_top)
        }
[Debug] SymbolTbl.resolve_and_find: a^105
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^105
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameCompInv0.a^105
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^105
[Debug] Rewriter.Symbol.reify var a^105 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^78
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^78
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameCompInv0.b^78
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^78
[Debug] Rewriter.Symbol.reify var b^78 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^78
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^78
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameCompInv0.b^78
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^78
[Debug] Rewriter.Symbol.reify var b^78 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.comp
[Debug] Rewriter.Symbol.reify func comp(a^91: Library.SetRA.T, b^67:
                                        Library.SetRA.T)
                                returns (ret^25: Library.SetRA.T)
        {
          ite(a^91 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91)) && b^67 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^67)),
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91) ++
          Library.SetRA.set_proj1(b^67)), Library.SetRA.set_top)
        }
[Debug] SymbolTbl.resolve_and_find: a^105
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^105
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameCompInv0.a^105
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^105
[Debug] Rewriter.Symbol.reify var a^105 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^78
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^78
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameCompInv0.b^78
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^78
[Debug] Rewriter.Symbol.reify var b^78 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^3: Library.SetRA.T)
                                returns (ret^24: Bool)
        {
          n^3 == Library.SetRA.set_constr(Library.SetRA.set_proj1(n^3))
        }
[Debug] SymbolTbl.resolve_and_find: Library.SetRA.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.comp
[Debug] Rewriter.Symbol.reify func comp(a^91: Library.SetRA.T, b^67:
                                        Library.SetRA.T)
                                returns (ret^25: Library.SetRA.T)
        {
          ite(a^91 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91)) && b^67 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^67)),
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91) ++
          Library.SetRA.set_proj1(b^67)), Library.SetRA.set_top)
        }
[Debug] SymbolTbl.resolve_and_find: a^105
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^105
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameCompInv0.a^105
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^105
[Debug] Rewriter.Symbol.reify var a^105 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^78
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^78
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameCompInv0.b^78
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^78
[Debug] Rewriter.Symbol.reify var b^78 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = frameCompInv0
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameCompInv0
[Debug] Keyset: 5
[Debug] old id a -> 105
[Debug] fresh id a -> 106
[Debug] Keyset: 5
[Debug] old id b -> 78
[Debug] fresh id b -> 79
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.SetRA.comp
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.SetRA.valid
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.SetRA.frame
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.frameCompInv2.a^106
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.frameCompInv2.b^79
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.comp
[Debug] Rewriter.Symbol.reify func comp(a^91: Library.SetRA.T, b^67:
                                        Library.SetRA.T)
                                returns (ret^25: Library.SetRA.T)
        {
          ite(a^91 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91)) && b^67 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^67)),
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91) ++
          Library.SetRA.set_proj1(b^67)), Library.SetRA.set_top)
        }
[Debug] SymbolTbl.resolve_and_find: a^106
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA.frameCompInv2
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^106
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^79, a^106
[Debug] SymbolTbl.resolve.go_forward: ids2: a^106
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^106
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameCompInv2.a^106
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^106
[Debug] Rewriter.Symbol.reify var a^106 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^79
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA.frameCompInv2
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^79
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^79, a^106
[Debug] SymbolTbl.resolve.go_forward: ids2: b^79
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^79
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameCompInv2.b^79
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^79
[Debug] Rewriter.Symbol.reify var b^79 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^106
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^106
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameCompInv2.a^106
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^106
[Debug] Rewriter.Symbol.reify var a^106 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^3: Library.SetRA.T)
                                returns (ret^24: Bool)
        {
          n^3 == Library.SetRA.set_constr(Library.SetRA.set_proj1(n^3))
        }
[Debug] SymbolTbl.resolve_and_find: a^106
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^106
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameCompInv2.a^106
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^106
[Debug] Rewriter.Symbol.reify var a^106 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.comp
[Debug] Rewriter.Symbol.reify func comp(a^91: Library.SetRA.T, b^67:
                                        Library.SetRA.T)
                                returns (ret^25: Library.SetRA.T)
        {
          ite(a^91 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91)) && b^67 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^67)),
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91) ++
          Library.SetRA.set_proj1(b^67)), Library.SetRA.set_top)
        }
[Debug] SymbolTbl.resolve_and_find: a^106
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^106
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameCompInv2.a^106
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^106
[Debug] Rewriter.Symbol.reify var a^106 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^79
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^79
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameCompInv2.b^79
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^79
[Debug] Rewriter.Symbol.reify var b^79 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^106
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^106
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameCompInv2.a^106
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^106
[Debug] Rewriter.Symbol.reify var a^106 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.frame
[Debug] Rewriter.Symbol.reify func frame(a^92: Library.SetRA.T, b^68:
                                         Library.SetRA.T)
                                returns (ret^26: Library.SetRA.T)
        {
          ite(a^92 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^92)) && b^68 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^68)),
          ite(Library.SetRA.set_proj1(b^68) subsetof
          Library.SetRA.set_proj1(a^92), a^92, Library.SetRA.set_top),
          Library.SetRA.set_top)
        }
[Debug] SymbolTbl.resolve_and_find: a^106
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^106
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameCompInv2.a^106
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^106
[Debug] Rewriter.Symbol.reify var a^106 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^79
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^79
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameCompInv2.b^79
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^79
[Debug] Rewriter.Symbol.reify var b^79 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^106
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^106
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameCompInv2.a^106
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^106
[Debug] Rewriter.Symbol.reify var a^106 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.comp
[Debug] Rewriter.Symbol.reify func comp(a^91: Library.SetRA.T, b^67:
                                        Library.SetRA.T)
                                returns (ret^25: Library.SetRA.T)
        {
          ite(a^91 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91)) && b^67 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^67)),
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91) ++
          Library.SetRA.set_proj1(b^67)), Library.SetRA.set_top)
        }
[Debug] SymbolTbl.resolve_and_find: a^106
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^106
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameCompInv2.a^106
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^106
[Debug] Rewriter.Symbol.reify var a^106 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^79
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^79
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameCompInv2.b^79
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^79
[Debug] Rewriter.Symbol.reify var b^79 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^106
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^106
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameCompInv2.a^106
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^106
[Debug] Rewriter.Symbol.reify var a^106 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^3: Library.SetRA.T)
                                returns (ret^24: Bool)
        {
          n^3 == Library.SetRA.set_constr(Library.SetRA.set_proj1(n^3))
        }
[Debug] SymbolTbl.resolve_and_find: a^106
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^106
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameCompInv2.a^106
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^106
[Debug] Rewriter.Symbol.reify var a^106 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.comp
[Debug] Rewriter.Symbol.reify func comp(a^91: Library.SetRA.T, b^67:
                                        Library.SetRA.T)
                                returns (ret^25: Library.SetRA.T)
        {
          ite(a^91 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91)) && b^67 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^67)),
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91) ++
          Library.SetRA.set_proj1(b^67)), Library.SetRA.set_top)
        }
[Debug] SymbolTbl.resolve_and_find: a^106
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^106
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameCompInv2.a^106
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^106
[Debug] Rewriter.Symbol.reify var a^106 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^79
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^79
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameCompInv2.b^79
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^79
[Debug] Rewriter.Symbol.reify var b^79 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^106
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^106
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameCompInv2.a^106
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^106
[Debug] Rewriter.Symbol.reify var a^106 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = frameCompInv2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameCompInv2
[Debug] Keyset: 5
[Debug] old id a -> 106
[Debug] fresh id a -> 107
[Debug] Keyset: 5
[Debug] old id b -> 79
[Debug] fresh id b -> 80
[Debug] Keyset: 5
[Debug] old id c -> 15
[Debug] fresh id c -> 16
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.SetRA.comp
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.SetRA.frame
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.SetRA.frame
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.SetRA.frame
[Debug] Rewriter.is_local: qual_ident = Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.frame_comp_inv.a^107
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.frame_comp_inv.b^80
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.SetRA.frame_comp_inv.c^16
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.frame
[Debug] Rewriter.Symbol.reify func frame(a^92: Library.SetRA.T, b^68:
                                         Library.SetRA.T)
                                returns (ret^26: Library.SetRA.T)
        {
          ite(a^92 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^92)) && b^68 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^68)),
          ite(Library.SetRA.set_proj1(b^68) subsetof
          Library.SetRA.set_proj1(a^92), a^92, Library.SetRA.set_top),
          Library.SetRA.set_top)
        }
[Debug] SymbolTbl.resolve_and_find: a^107
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA.frame_comp_inv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^107
[Debug] SymbolTbl.resolve.go_forward: scope_entries: c^16, a^107, b^80
[Debug] SymbolTbl.resolve.go_forward: ids2: a^107
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^107
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frame_comp_inv.a^107
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^107
[Debug] Rewriter.Symbol.reify var a^107 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, SetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, SetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: SetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: SetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.comp
[Debug] Rewriter.Symbol.reify func comp(a^91: Library.SetRA.T, b^67:
                                        Library.SetRA.T)
                                returns (ret^25: Library.SetRA.T)
        {
          ite(a^91 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91)) && b^67 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^67)),
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91) ++
          Library.SetRA.set_proj1(b^67)), Library.SetRA.set_top)
        }
[Debug] SymbolTbl.resolve_and_find: b^80
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA.frame_comp_inv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^80
[Debug] SymbolTbl.resolve.go_forward: scope_entries: c^16, a^107, b^80
[Debug] SymbolTbl.resolve.go_forward: ids2: b^80
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^80
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frame_comp_inv.b^80
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^80
[Debug] Rewriter.Symbol.reify var b^80 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^16
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA.frame_comp_inv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.SetRA, Library,
        $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: c^16
[Debug] SymbolTbl.resolve.go_forward: scope_entries: c^16, a^107, b^80
[Debug] SymbolTbl.resolve.go_forward: ids2: c^16
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^16
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frame_comp_inv.c^16
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^16
[Debug] Rewriter.Symbol.reify var c^16 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.frame
[Debug] Rewriter.Symbol.reify func frame(a^92: Library.SetRA.T, b^68:
                                         Library.SetRA.T)
                                returns (ret^26: Library.SetRA.T)
        {
          ite(a^92 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^92)) && b^68 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^68)),
          ite(Library.SetRA.set_proj1(b^68) subsetof
          Library.SetRA.set_proj1(a^92), a^92, Library.SetRA.set_top),
          Library.SetRA.set_top)
        }
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.SetRA.frame
[Debug] Rewriter.Symbol.reify func frame(a^92: Library.SetRA.T, b^68:
                                         Library.SetRA.T)
                                returns (ret^26: Library.SetRA.T)
        {
          ite(a^92 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(a^92)) && b^68 ==
          Library.SetRA.set_constr(Library.SetRA.set_proj1(b^68)),
          ite(Library.SetRA.set_proj1(b^68) subsetof
          Library.SetRA.set_proj1(a^92), a^92, Library.SetRA.set_top),
          Library.SetRA.set_top)
        }
[Debug] SymbolTbl.resolve_and_find: a^107
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^107
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frame_comp_inv.a^107
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^107
[Debug] Rewriter.Symbol.reify var a^107 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^80
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^80
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frame_comp_inv.b^80
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^80
[Debug] Rewriter.Symbol.reify var b^80 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^16
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^16
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frame_comp_inv.c^16
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^16
[Debug] Rewriter.Symbol.reify var c^16 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = frame_comp_inv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frame_comp_inv
[Debug] Done with processing module SetRA
[Debug] Rewriter.set_symbol: symbol = SetRA
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA
[Debug] Processing module KeySetRA
[Debug] Processing module KeySetRA: scope_children: 
[Debug] Typing.process_module: computing mod_qual_ident: KeySetRA
[Debug] SymbolTbl.resolve_and_find: KeySetRA
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = KeySetRA; qual_ident = Library.KeySetRA
[Debug] Typing.process_module: module KeySetRA: checking return type CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify interface CancellativeResourceAlgebra
                                : Library.ResourceAlgebra
        {
          lemma weak_frameCompInv()
            ensures forall a^14: Library.CancellativeResourceAlgebra.T, b^10:
            Library.CancellativeResourceAlgebra.T ::
            Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.comp(a^14,
            b^10)) ==>
            Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.frame(Library.CancellativeResourceAlgebra.comp(a^14,
            b^10), b^10))
          
          
          lemma frameValid()
            ensures forall a^15: Library.CancellativeResourceAlgebra.T, b^11:
            Library.CancellativeResourceAlgebra.T ::
            Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.frame(a^15,
            b^11)) ==> Library.CancellativeResourceAlgebra.valid(a^15) &&
            Library.CancellativeResourceAlgebra.valid(b^11)
          
          
          lemma fpuReflexive()
            ensures forall a^16: Library.CancellativeResourceAlgebra.T ::
            Library.CancellativeResourceAlgebra.valid(a^16) ==>
            Library.CancellativeResourceAlgebra.fpuAllowed(a^16, a^16)
          
          
          lemma fpuValid()
            ensures forall a^17: Library.CancellativeResourceAlgebra.T, b^12:
            Library.CancellativeResourceAlgebra.T, c^2:
            Library.CancellativeResourceAlgebra.T ::
            Library.CancellativeResourceAlgebra.fpuAllowed(a^17, b^12) &&
            Library.CancellativeResourceAlgebra.valid(a^17) &&
            Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.comp(a^17,
            c^2)) ==>
            Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.comp(b^12,
            c^2))
          
          
          lemma compFrameInv()
            ensures forall a^18: Library.CancellativeResourceAlgebra.T, b^13:
            Library.CancellativeResourceAlgebra.T ::
            Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.frame(a^18,
            b^13)) ==>
            Library.CancellativeResourceAlgebra.comp(Library.CancellativeResourceAlgebra.frame(a^18,
            b^13), b^13) == a^18
          
          
          lemma frameId()
            ensures forall a^19: Library.CancellativeResourceAlgebra.T ::
            Library.CancellativeResourceAlgebra.frame(a^19,
            Library.CancellativeResourceAlgebra.id) == a^19
          
          
          lemma compValid()
            ensures forall a^20: Library.CancellativeResourceAlgebra.T, b^14:
            Library.CancellativeResourceAlgebra.T ::
            Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.comp(a^20,
            b^14)) ==> Library.CancellativeResourceAlgebra.valid(a^20) &&
            Library.CancellativeResourceAlgebra.valid(b^14)
          
          
          lemma compId()
            ensures forall a^21: Library.CancellativeResourceAlgebra.T ::
            Library.CancellativeResourceAlgebra.comp(a^21,
            Library.CancellativeResourceAlgebra.id) == a^21
          
          
          lemma compCommute()
            ensures forall a^22: Library.CancellativeResourceAlgebra.T, b^15:
            Library.CancellativeResourceAlgebra.T ::
            Library.CancellativeResourceAlgebra.comp(a^22, b^15) ==
            Library.CancellativeResourceAlgebra.comp(b^15, a^22)
          
          
          lemma compAssoc()
            ensures forall a^23: Library.CancellativeResourceAlgebra.T, b^16:
            Library.CancellativeResourceAlgebra.T, c^3:
            Library.CancellativeResourceAlgebra.T ::
            Library.CancellativeResourceAlgebra.comp(Library.CancellativeResourceAlgebra.comp(a^23,
            b^16), c^3) == Library.CancellativeResourceAlgebra.comp(a^23,
            Library.CancellativeResourceAlgebra.comp(b^16, c^3))
          
          
          lemma idValid()
            ensures Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.id)
          
          
          func fpuAllowed(a^24: Library.CancellativeResourceAlgebra.T, b^17:
                          Library.CancellativeResourceAlgebra.T)
            returns (ret^4: Bool)
          
          
          func valid(a^25: Library.CancellativeResourceAlgebra.T)
            returns (ret^5: Bool)
          
          
          func frame(a^26: Library.CancellativeResourceAlgebra.T, b^18:
                     Library.CancellativeResourceAlgebra.T)
            returns (ret^6: Library.CancellativeResourceAlgebra.T)
          
          
          func comp(a^27: Library.CancellativeResourceAlgebra.T, b^19:
                    Library.CancellativeResourceAlgebra.T)
            returns (ret^7: Library.CancellativeResourceAlgebra.T)
          
          
          val id : Library.CancellativeResourceAlgebra.T
          
          rep type T
          
          lemma frameCompInv()
            ensures forall a^28: Library.CancellativeResourceAlgebra.T, b^20:
            Library.CancellativeResourceAlgebra.T ::
            Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.comp(a^28,
            b^20)) ==>
            Library.CancellativeResourceAlgebra.frame(Library.CancellativeResourceAlgebra.comp(a^28,
            b^20), b^20) == a^28
          
          
          lemma frameReflexive()
            ensures forall a^29: Library.CancellativeResourceAlgebra.T ::
            Library.CancellativeResourceAlgebra.valid(a^29) ==>
            Library.CancellativeResourceAlgebra.frame(a^29, a^29) ==
            Library.CancellativeResourceAlgebra.id
          
        }
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuValid
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compFrameInv
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compValid
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compId
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compCommute
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compAssoc
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.idValid
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameReflexive
[Debug] Typing.process_module: KeySetRA: checking return type interface CancellativeResourceAlgebra : Library.ResourceAlgebra
{
  lemma weak_frameCompInv()
    ensures forall a^14: Library.KeySetRA.T,
b^10:
Library.KeySetRA.T
::
Library.KeySetRA.valid(Library.KeySetRA.comp(a^14,
b^10)) ==>
Library.KeySetRA.valid(Library.KeySetRA.frame(Library.KeySetRA.comp(a^14,
b^10),
b^10))


lemma frameValid()
  ensures forall a^15: Library.KeySetRA.T,
b^11:
Library.KeySetRA.T
::
Library.KeySetRA.valid(Library.KeySetRA.frame(a^15,
b^11)) ==>
Library.KeySetRA.valid(a^15) &&
Library.KeySetRA.valid(b^11)


lemma fpuReflexive()
  ensures forall a^16: Library.KeySetRA.T
::
Library.KeySetRA.valid(a^16) ==>
Library.KeySetRA.fpuAllowed(a^16,
a^16)


lemma fpuValid()
  ensures forall a^17: Library.KeySetRA.T,
b^12:
Library.KeySetRA.T,
c^2:
Library.KeySetRA.T
::
Library.KeySetRA.fpuAllowed(a^17,
b^12) &&
Library.KeySetRA.valid(a^17) &&
Library.KeySetRA.valid(Library.KeySetRA.comp(a^17,
c^2)) ==>
Library.KeySetRA.valid(Library.KeySetRA.comp(b^12,
c^2))


lemma compFrameInv()
  ensures forall a^18: Library.KeySetRA.T,
b^13:
Library.KeySetRA.T
::
Library.KeySetRA.valid(Library.KeySetRA.frame(a^18,
b^13)) ==>
Library.KeySetRA.comp(Library.KeySetRA.frame(a^18,
b^13),
b^13) ==
a^18


lemma frameId()
  ensures forall a^19: Library.KeySetRA.T
::
Library.KeySetRA.frame(a^19,
Library.KeySetRA.id) ==
a^19


lemma compValid()
  ensures forall a^20: Library.KeySetRA.T,
b^14:
Library.KeySetRA.T
::
Library.KeySetRA.valid(Library.KeySetRA.comp(a^20,
b^14)) ==>
Library.KeySetRA.valid(a^20) &&
Library.KeySetRA.valid(b^14)


lemma compId()
  ensures forall a^21: Library.KeySetRA.T
::
Library.KeySetRA.comp(a^21,
Library.KeySetRA.id) ==
a^21


lemma compCommute()
  ensures forall a^22: Library.KeySetRA.T,
b^15:
Library.KeySetRA.T
::
Library.KeySetRA.comp(a^22,
b^15) ==
Library.KeySetRA.comp(b^15,
a^22)


lemma compAssoc()
  ensures forall a^23: Library.KeySetRA.T,
b^16:
Library.KeySetRA.T,
c^3:
Library.KeySetRA.T
::
Library.KeySetRA.comp(Library.KeySetRA.comp(a^23,
b^16),
c^3) ==
Library.KeySetRA.comp(a^23,
Library.KeySetRA.comp(b^16,
c^3))


lemma idValid()
  ensures Library.KeySetRA.valid(Library.KeySetRA.id)


func fpuAllowed(a^24: Library.KeySetRA.T,
b^17:
Library.KeySetRA.T)
returns (ret^4: Bool)


func valid(a^25: Library.KeySetRA.T)
returns (ret^5: Bool)


func frame(a^26: Library.KeySetRA.T,
b^18:
Library.KeySetRA.T)
returns (ret^6: Library.KeySetRA.T)


func comp(a^27: Library.KeySetRA.T,
b^19:
Library.KeySetRA.T)
returns (ret^7: Library.KeySetRA.T)


val id : Library.KeySetRA.T

rep type T

lemma frameCompInv()
  ensures forall a^28: Library.KeySetRA.T,
b^20:
Library.KeySetRA.T
::
Library.KeySetRA.valid(Library.KeySetRA.comp(a^28,
b^20)) ==>
Library.KeySetRA.frame(Library.KeySetRA.comp(a^28,
b^20),
b^20) ==
a^28


lemma frameReflexive()
  ensures forall a^29: Library.KeySetRA.T
::
Library.KeySetRA.valid(a^29) ==>
Library.KeySetRA.frame(a^29,
a^29) ==
Library.KeySetRA.id

}: reified; 
 qual_interface_ident: Library.CancellativeResourceAlgebra 
 mid: CancellativeResourceAlgebra
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.X
[Debug] SymbolTbl.resolve_and_find: Type
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Type
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Type
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Type
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.id
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.frame
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.fpuAllowed
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.frameCompInv
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.frameReflexive
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.idValid
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.compAssoc
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.compCommute
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.compId
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.compValid
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.frameId
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.compFrameInv
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.fpuValid
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.fpuReflexive
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.frameValid
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.weak_frameCompInv
[Debug] Library.ResourceAlgebra
[Debug] Library.CancellativeResourceAlgebra
[Debug] Library.KeySetRA
[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Type
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Type
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = Type; qual_ident = Library.Type
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = T; qual_ident = Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: X
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: X
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: X
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: found Alias: <Library.Type,  >
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Type
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Type
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.KeySetRA.X
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Type
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Type
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.KeySetRA.X
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: X
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = T; qual_ident = Library.KeySetRA.T
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.ksTop
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: ksPair
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ksPair
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: ksPair
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.ksPair
[Debug] Rewriter.Symbol.reify /* constr ksPair(Set[Library.KeySetRA.X.T],
        Set[Library.KeySetRA.X.T]): Library.KeySetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, ksPair
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, ksPair
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, ksPair
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, ksPair
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ksPair
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: ksPair
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr ksPair(Set[Library.KeySetRA.X.T],
        Set[Library.KeySetRA.X.T]): Library.KeySetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, X, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, X, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, X, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, X, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: X, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: X, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: found Alias: <Library.Type,  >
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Type, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Type, T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.KeySetRA.X
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Type, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Type, T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.KeySetRA.X
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Type
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: T
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.KeySetRA.X
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.id
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 5
[Debug] old id n -> 3
[Debug] fresh id n -> 4
[Debug] Keyset: 5
[Debug] old id ret -> 27
[Debug] fresh id ret -> 28
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.valid.n^4
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.valid.ret^28
[Debug] SymbolTbl.resolve_and_find: ks_proj1
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ks_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: ks_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ks_proj1; qual_ident = Library.KeySetRA.ks_proj1
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: ks_proj2
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ks_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: ks_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ks_proj2; qual_ident = Library.KeySetRA.ks_proj2
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: ksPair
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ksPair
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: ksPair
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ksPair; qual_ident = Library.KeySetRA.ksPair
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: ks_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ks_proj2; qual_ident = Library.KeySetRA.ks_proj2
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ks_proj1; qual_ident = Library.KeySetRA.ks_proj1
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: n^4
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: n^4
[Debug] SymbolTbl.resolve.go_forward: scope_entries: ret^28, n^4
[Debug] SymbolTbl.resolve.go_forward: ids2: n^4
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: n^4
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid.n^4
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: n^4
[Debug] Rewriter.Symbol.reify var n^4 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: ksPair
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.ksPair
[Debug] Rewriter.Symbol.reify /* constr ksPair(Set[Library.KeySetRA.X.T],
        Set[Library.KeySetRA.X.T]): Library.KeySetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, ksPair
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, ksPair
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, ksPair
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, ksPair
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ksPair
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: ksPair
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr ksPair(Set[Library.KeySetRA.X.T],
        Set[Library.KeySetRA.X.T]): Library.KeySetRA.T */
[Debug] SymbolTbl.resolve_and_find: ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj1(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, ks_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, ks_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, ks_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, ks_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ks_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: ks_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj1(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: n^4
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: n^4
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid.n^4
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: n^4
[Debug] Rewriter.Symbol.reify var n^4 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, X, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, X, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, X, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, X, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: X, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: X, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: found Alias: <Library.Type,  >
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Type, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Type, T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.KeySetRA.X
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Type, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Type, T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.KeySetRA.X
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Type
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: T
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.KeySetRA.X
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: ks_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj2(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, ks_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, ks_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, ks_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, ks_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ks_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: ks_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj2(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: n^4
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: n^4
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid.n^4
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: n^4
[Debug] Rewriter.Symbol.reify var n^4 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: ks_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj2(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj2(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: n^4
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: n^4
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid.n^4
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: n^4
[Debug] Rewriter.Symbol.reify var n^4 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj1(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj1(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: n^4
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: n^4
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid.n^4
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: n^4
[Debug] Rewriter.Symbol.reify var n^4 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 5
[Debug] old id a -> 107
[Debug] fresh id a -> 108
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 5
[Debug] old id b -> 80
[Debug] fresh id b -> 81
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 5
[Debug] old id ret -> 28
[Debug] fresh id ret -> 29
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.comp.a^108
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.comp.b^81
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.comp.ret^29
[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = id; qual_ident = Library.KeySetRA.id
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.id
[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = id; qual_ident = Library.KeySetRA.id
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.id
[Debug] SymbolTbl.resolve_and_find: ks_proj1
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ks_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: ks_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ks_proj1; qual_ident = Library.KeySetRA.ks_proj1
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: ks_proj2
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ks_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: ks_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ks_proj2; qual_ident = Library.KeySetRA.ks_proj2
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: ksPair
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ksPair
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: ksPair
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ksPair; qual_ident = Library.KeySetRA.ksPair
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ks_proj1; qual_ident = Library.KeySetRA.ks_proj1
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: ks_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ks_proj2; qual_ident = Library.KeySetRA.ks_proj2
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: ksPair
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ksPair; qual_ident = Library.KeySetRA.ksPair
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.KeySetRA.valid
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.KeySetRA.valid
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ks_proj1; qual_ident = Library.KeySetRA.ks_proj1
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ks_proj1; qual_ident = Library.KeySetRA.ks_proj1
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ks_proj1; qual_ident = Library.KeySetRA.ks_proj1
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ks_proj1; qual_ident = Library.KeySetRA.ks_proj1
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: ks_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ks_proj2; qual_ident = Library.KeySetRA.ks_proj2
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: ks_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ks_proj2; qual_ident = Library.KeySetRA.ks_proj2
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: ksPair
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ksPair; qual_ident = Library.KeySetRA.ksPair
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: ksTop
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ksTop
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: ksTop
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ksTop
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ksTop
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ksTop; qual_ident = Library.KeySetRA.ksTop
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ksTop
[Debug] SymbolTbl.resolve_and_find: ksTop
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ksTop
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ksTop
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ksTop; qual_ident = Library.KeySetRA.ksTop
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ksTop
[Debug] SymbolTbl.resolve_and_find: a^108
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^108
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^108, ret^29, b^81
[Debug] SymbolTbl.resolve.go_forward: ids2: a^108
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^108
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp.a^108
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^108
[Debug] Rewriter.Symbol.reify var a^108 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.id
[Debug] Rewriter.Symbol.reify val id : Library.KeySetRA.T =
                                    Library.KeySetRA.ksPair({||}, {||})
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^81
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^81
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^108, ret^29, b^81
[Debug] SymbolTbl.resolve.go_forward: ids2: b^81
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^81
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp.b^81
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^81
[Debug] Rewriter.Symbol.reify var b^81 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^81
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^81
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp.b^81
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^81
[Debug] Rewriter.Symbol.reify var b^81 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.id
[Debug] Rewriter.Symbol.reify val id : Library.KeySetRA.T =
                                    Library.KeySetRA.ksPair({||}, {||})
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^108
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^108
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp.a^108
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^108
[Debug] Rewriter.Symbol.reify var a^108 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^108
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^108
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp.a^108
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^108
[Debug] Rewriter.Symbol.reify var a^108 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: ksPair
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.ksPair
[Debug] Rewriter.Symbol.reify /* constr ksPair(Set[Library.KeySetRA.X.T],
        Set[Library.KeySetRA.X.T]): Library.KeySetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, ksPair
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, ksPair
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, ksPair
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, ksPair
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ksPair
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: ksPair
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr ksPair(Set[Library.KeySetRA.X.T],
        Set[Library.KeySetRA.X.T]): Library.KeySetRA.T */
[Debug] SymbolTbl.resolve_and_find: ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj1(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, ks_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, ks_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, ks_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, ks_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ks_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: ks_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj1(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: a^108
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^108
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp.a^108
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^108
[Debug] Rewriter.Symbol.reify var a^108 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, X, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, X, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, X, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, X, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: X, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: X, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: found Alias: <Library.Type,  >
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Type, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Type, T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.KeySetRA.X
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Type, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Type, T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.KeySetRA.X
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Type
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: T
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.KeySetRA.X
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: ks_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj2(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, ks_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, ks_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, ks_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, ks_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ks_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: ks_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj2(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: a^108
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^108
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp.a^108
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^108
[Debug] Rewriter.Symbol.reify var a^108 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^81
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^81
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp.b^81
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^81
[Debug] Rewriter.Symbol.reify var b^81 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: ksPair
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.ksPair
[Debug] Rewriter.Symbol.reify /* constr ksPair(Set[Library.KeySetRA.X.T],
        Set[Library.KeySetRA.X.T]): Library.KeySetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr ksPair(Set[Library.KeySetRA.X.T],
        Set[Library.KeySetRA.X.T]): Library.KeySetRA.T */
[Debug] SymbolTbl.resolve_and_find: ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj1(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj1(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: b^81
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^81
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp.b^81
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^81
[Debug] Rewriter.Symbol.reify var b^81 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: ks_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj2(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj2(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: b^81
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^81
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp.b^81
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^81
[Debug] Rewriter.Symbol.reify var b^81 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^108
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^108
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp.a^108
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^108
[Debug] Rewriter.Symbol.reify var a^108 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr ksPair(Set[Library.KeySetRA.X.T],
        Set[Library.KeySetRA.X.T]): Library.KeySetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj1(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: a^108
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^108
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp.a^108
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^108
[Debug] Rewriter.Symbol.reify var a^108 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj2(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: a^108
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^108
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp.a^108
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^108
[Debug] Rewriter.Symbol.reify var a^108 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: a^108
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^108
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp.a^108
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^108
[Debug] Rewriter.Symbol.reify var a^108 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: b^81
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^81
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp.b^81
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^81
[Debug] Rewriter.Symbol.reify var b^81 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: a^108
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^108
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp.a^108
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^108
[Debug] Rewriter.Symbol.reify var a^108 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj1(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj1(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: a^108
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^108
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp.a^108
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^108
[Debug] Rewriter.Symbol.reify var a^108 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj1(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj1(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: b^81
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^81
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp.b^81
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^81
[Debug] Rewriter.Symbol.reify var b^81 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: a^108
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^108
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp.a^108
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^108
[Debug] Rewriter.Symbol.reify var a^108 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: b^81
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^81
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp.b^81
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^81
[Debug] Rewriter.Symbol.reify var b^81 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: a^108
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^108
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp.a^108
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^108
[Debug] Rewriter.Symbol.reify var a^108 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: ksPair
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.ksPair
[Debug] Rewriter.Symbol.reify /* constr ksPair(Set[Library.KeySetRA.X.T],
        Set[Library.KeySetRA.X.T]): Library.KeySetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr ksPair(Set[Library.KeySetRA.X.T],
        Set[Library.KeySetRA.X.T]): Library.KeySetRA.T */
[Debug] SymbolTbl.resolve_and_find: ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj1(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj1(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: a^108
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^108
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp.a^108
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^108
[Debug] Rewriter.Symbol.reify var a^108 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj1(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj1(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: b^81
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^81
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp.b^81
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^81
[Debug] Rewriter.Symbol.reify var b^81 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: ks_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj2(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj2(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: a^108
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^108
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp.a^108
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^108
[Debug] Rewriter.Symbol.reify var a^108 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: ks_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj2(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj2(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: b^81
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^81
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp.b^81
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^81
[Debug] Rewriter.Symbol.reify var b^81 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: ksTop
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ksTop
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ksTop
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.ksTop
[Debug] Rewriter.Symbol.reify /* constr ksTop(): Library.KeySetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ksTop
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, ksTop
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, ksTop
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, ksTop
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, ksTop
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ksTop
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: ksTop
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ksTop
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ksTop
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr ksTop(): Library.KeySetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: ksTop
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ksTop
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ksTop
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.ksTop
[Debug] Rewriter.Symbol.reify /* constr ksTop(): Library.KeySetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ksTop
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ksTop
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ksTop
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr ksTop(): Library.KeySetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 5
[Debug] old id a -> 108
[Debug] fresh id a -> 109
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 5
[Debug] old id b -> 81
[Debug] fresh id b -> 82
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 5
[Debug] old id ret -> 29
[Debug] fresh id ret -> 30
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.frame.a^109
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.frame.b^82
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.frame.ret^30
[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = id; qual_ident = Library.KeySetRA.id
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.id
[Debug] SymbolTbl.resolve_and_find: ks_proj1
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ks_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: ks_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ks_proj1; qual_ident = Library.KeySetRA.ks_proj1
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: ks_proj2
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ks_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: ks_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ks_proj2; qual_ident = Library.KeySetRA.ks_proj2
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: ksPair
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ksPair
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: ksPair
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ksPair; qual_ident = Library.KeySetRA.ksPair
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ks_proj1; qual_ident = Library.KeySetRA.ks_proj1
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: ks_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ks_proj2; qual_ident = Library.KeySetRA.ks_proj2
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: ksPair
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ksPair; qual_ident = Library.KeySetRA.ksPair
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.KeySetRA.valid
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.KeySetRA.valid
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ks_proj1; qual_ident = Library.KeySetRA.ks_proj1
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ks_proj1; qual_ident = Library.KeySetRA.ks_proj1
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: ks_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ks_proj2; qual_ident = Library.KeySetRA.ks_proj2
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: ks_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ks_proj2; qual_ident = Library.KeySetRA.ks_proj2
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ks_proj1; qual_ident = Library.KeySetRA.ks_proj1
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ks_proj1; qual_ident = Library.KeySetRA.ks_proj1
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: ks_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ks_proj2; qual_ident = Library.KeySetRA.ks_proj2
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: ks_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ks_proj2; qual_ident = Library.KeySetRA.ks_proj2
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: ksPair
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ksPair; qual_ident = Library.KeySetRA.ksPair
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: ksTop
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ksTop
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: ksTop
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ksTop
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ksTop
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ksTop; qual_ident = Library.KeySetRA.ksTop
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ksTop
[Debug] SymbolTbl.resolve_and_find: ksTop
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ksTop
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ksTop
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ksTop; qual_ident = Library.KeySetRA.ksTop
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ksTop
[Debug] SymbolTbl.resolve_and_find: b^82
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA.frame
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^82
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^82, ret^30, a^109
[Debug] SymbolTbl.resolve.go_forward: ids2: b^82
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^82
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame.b^82
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^82
[Debug] Rewriter.Symbol.reify var b^82 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.id
[Debug] Rewriter.Symbol.reify val id : Library.KeySetRA.T =
                                    Library.KeySetRA.ksPair({||}, {||})
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^109
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA.frame
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^109
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^82, ret^30, a^109
[Debug] SymbolTbl.resolve.go_forward: ids2: a^109
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^109
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame.a^109
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^109
[Debug] Rewriter.Symbol.reify var a^109 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^109
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^109
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame.a^109
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^109
[Debug] Rewriter.Symbol.reify var a^109 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: ksPair
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.ksPair
[Debug] Rewriter.Symbol.reify /* constr ksPair(Set[Library.KeySetRA.X.T],
        Set[Library.KeySetRA.X.T]): Library.KeySetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, ksPair
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, ksPair
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, ksPair
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, ksPair
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ksPair
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: ksPair
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr ksPair(Set[Library.KeySetRA.X.T],
        Set[Library.KeySetRA.X.T]): Library.KeySetRA.T */
[Debug] SymbolTbl.resolve_and_find: ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj1(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, ks_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, ks_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, ks_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, ks_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ks_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: ks_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj1(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: a^109
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^109
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame.a^109
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^109
[Debug] Rewriter.Symbol.reify var a^109 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, X, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, X, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, X, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, X, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: X, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: X, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: found Alias: <Library.Type,  >
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Type, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Type, T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.KeySetRA.X
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Type, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Type, T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.KeySetRA.X
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Type
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: T
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.KeySetRA.X
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: ks_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj2(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, ks_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, ks_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, ks_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, ks_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ks_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: ks_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj2(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: a^109
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^109
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame.a^109
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^109
[Debug] Rewriter.Symbol.reify var a^109 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^82
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^82
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame.b^82
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^82
[Debug] Rewriter.Symbol.reify var b^82 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: ksPair
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.ksPair
[Debug] Rewriter.Symbol.reify /* constr ksPair(Set[Library.KeySetRA.X.T],
        Set[Library.KeySetRA.X.T]): Library.KeySetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr ksPair(Set[Library.KeySetRA.X.T],
        Set[Library.KeySetRA.X.T]): Library.KeySetRA.T */
[Debug] SymbolTbl.resolve_and_find: ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj1(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj1(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: b^82
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^82
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame.b^82
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^82
[Debug] Rewriter.Symbol.reify var b^82 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: ks_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj2(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj2(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: b^82
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^82
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame.b^82
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^82
[Debug] Rewriter.Symbol.reify var b^82 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^109
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^109
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame.a^109
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^109
[Debug] Rewriter.Symbol.reify var a^109 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr ksPair(Set[Library.KeySetRA.X.T],
        Set[Library.KeySetRA.X.T]): Library.KeySetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj1(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: a^109
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^109
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame.a^109
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^109
[Debug] Rewriter.Symbol.reify var a^109 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj2(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: a^109
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^109
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame.a^109
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^109
[Debug] Rewriter.Symbol.reify var a^109 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: a^109
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^109
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame.a^109
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^109
[Debug] Rewriter.Symbol.reify var a^109 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: b^82
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^82
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame.b^82
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^82
[Debug] Rewriter.Symbol.reify var b^82 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: a^109
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^109
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame.a^109
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^109
[Debug] Rewriter.Symbol.reify var a^109 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj1(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj1(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: b^82
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^82
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame.b^82
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^82
[Debug] Rewriter.Symbol.reify var b^82 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj1(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj1(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: a^109
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^109
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame.a^109
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^109
[Debug] Rewriter.Symbol.reify var a^109 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: a^109
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^109
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame.a^109
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^109
[Debug] Rewriter.Symbol.reify var a^109 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: b^82
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^82
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame.b^82
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^82
[Debug] Rewriter.Symbol.reify var b^82 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: a^109
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^109
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame.a^109
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^109
[Debug] Rewriter.Symbol.reify var a^109 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: ks_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj2(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj2(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: b^82
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^82
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame.b^82
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^82
[Debug] Rewriter.Symbol.reify var b^82 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: ks_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj2(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj2(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: a^109
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^109
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame.a^109
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^109
[Debug] Rewriter.Symbol.reify var a^109 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: a^109
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^109
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame.a^109
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^109
[Debug] Rewriter.Symbol.reify var a^109 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: b^82
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^82
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame.b^82
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^82
[Debug] Rewriter.Symbol.reify var b^82 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: a^109
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^109
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame.a^109
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^109
[Debug] Rewriter.Symbol.reify var a^109 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj1(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: b^82
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^82
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame.b^82
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^82
[Debug] Rewriter.Symbol.reify var b^82 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj1(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: a^109
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^109
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame.a^109
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^109
[Debug] Rewriter.Symbol.reify var a^109 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: a^109
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^109
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame.a^109
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^109
[Debug] Rewriter.Symbol.reify var a^109 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: b^82
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^82
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame.b^82
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^82
[Debug] Rewriter.Symbol.reify var b^82 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: a^109
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^109
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame.a^109
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^109
[Debug] Rewriter.Symbol.reify var a^109 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: ksPair
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.ksPair
[Debug] Rewriter.Symbol.reify /* constr ksPair(Set[Library.KeySetRA.X.T],
        Set[Library.KeySetRA.X.T]): Library.KeySetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr ksPair(Set[Library.KeySetRA.X.T],
        Set[Library.KeySetRA.X.T]): Library.KeySetRA.T */
[Debug] SymbolTbl.resolve_and_find: ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj1(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj1(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: a^109
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^109
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame.a^109
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^109
[Debug] Rewriter.Symbol.reify var a^109 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj1(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj1(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: b^82
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^82
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame.b^82
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^82
[Debug] Rewriter.Symbol.reify var b^82 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: ks_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj2(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj2(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: a^109
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^109
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame.a^109
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^109
[Debug] Rewriter.Symbol.reify var a^109 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: ks_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj2(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj2(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: b^82
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^82
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame.b^82
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^82
[Debug] Rewriter.Symbol.reify var b^82 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: ksTop
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ksTop
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ksTop
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.ksTop
[Debug] Rewriter.Symbol.reify /* constr ksTop(): Library.KeySetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ksTop
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, ksTop
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, ksTop
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, ksTop
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, ksTop
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ksTop
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: ksTop
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ksTop
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ksTop
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr ksTop(): Library.KeySetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: ksTop
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ksTop
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ksTop
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.ksTop
[Debug] Rewriter.Symbol.reify /* constr ksTop(): Library.KeySetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ksTop
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ksTop
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ksTop
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr ksTop(): Library.KeySetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frame
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 5
[Debug] old id a -> 109
[Debug] fresh id a -> 110
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Keyset: 5
[Debug] old id b -> 82
[Debug] fresh id b -> 83
[Debug] Keyset: 5
[Debug] old id ret -> 30
[Debug] fresh id ret -> 31
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.fpuAllowed.a^110
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.fpuAllowed.b^83
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.fpuAllowed.ret^31
[Debug] SymbolTbl.resolve_and_find: ks_proj1
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ks_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: ks_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ks_proj1; qual_ident = Library.KeySetRA.ks_proj1
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: ks_proj2
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ks_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: ks_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ks_proj2; qual_ident = Library.KeySetRA.ks_proj2
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: ksPair
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ksPair
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: ksPair
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ksPair; qual_ident = Library.KeySetRA.ksPair
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ks_proj1; qual_ident = Library.KeySetRA.ks_proj1
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: ks_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ks_proj2; qual_ident = Library.KeySetRA.ks_proj2
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: ksPair
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ksPair; qual_ident = Library.KeySetRA.ksPair
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.KeySetRA.valid
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.KeySetRA.valid
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ks_proj1; qual_ident = Library.KeySetRA.ks_proj1
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = ks_proj1; qual_ident = Library.KeySetRA.ks_proj1
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: a^110
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA.fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^110
[Debug] SymbolTbl.resolve.go_forward: scope_entries: ret^31, b^83, a^110
[Debug] SymbolTbl.resolve.go_forward: ids2: a^110
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^110
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuAllowed.a^110
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^110
[Debug] Rewriter.Symbol.reify var a^110 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^83
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA.fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^83
[Debug] SymbolTbl.resolve.go_forward: scope_entries: ret^31, b^83, a^110
[Debug] SymbolTbl.resolve.go_forward: ids2: b^83
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^83
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuAllowed.b^83
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^83
[Debug] Rewriter.Symbol.reify var b^83 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^110
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^110
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuAllowed.a^110
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^110
[Debug] Rewriter.Symbol.reify var a^110 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: ksPair
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.ksPair
[Debug] Rewriter.Symbol.reify /* constr ksPair(Set[Library.KeySetRA.X.T],
        Set[Library.KeySetRA.X.T]): Library.KeySetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, ksPair
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, ksPair
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, ksPair
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, ksPair
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ksPair
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: ksPair
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr ksPair(Set[Library.KeySetRA.X.T],
        Set[Library.KeySetRA.X.T]): Library.KeySetRA.T */
[Debug] SymbolTbl.resolve_and_find: ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj1(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, ks_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, ks_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, ks_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, ks_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ks_proj1
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: ks_proj1
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj1(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: a^110
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^110
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuAllowed.a^110
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^110
[Debug] Rewriter.Symbol.reify var a^110 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, X, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, X, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, X, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, X, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: X, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: X, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: found Alias: <Library.Type,  >
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Type, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Type, T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.KeySetRA.X
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Type, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Type, T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.KeySetRA.X
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Type
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: T
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: Library.Type -> Library.KeySetRA.X
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: ks_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj2(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, ks_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, ks_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, ks_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, ks_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: ks_proj2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: ks_proj2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj2(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: a^110
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^110
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuAllowed.a^110
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^110
[Debug] Rewriter.Symbol.reify var a^110 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^83
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^83
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuAllowed.b^83
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^83
[Debug] Rewriter.Symbol.reify var b^83 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: ksPair
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.ksPair
[Debug] Rewriter.Symbol.reify /* constr ksPair(Set[Library.KeySetRA.X.T],
        Set[Library.KeySetRA.X.T]): Library.KeySetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr ksPair(Set[Library.KeySetRA.X.T],
        Set[Library.KeySetRA.X.T]): Library.KeySetRA.T */
[Debug] SymbolTbl.resolve_and_find: ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj1(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj1(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: b^83
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^83
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuAllowed.b^83
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^83
[Debug] Rewriter.Symbol.reify var b^83 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: ks_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj2(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj2(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: b^83
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^83
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuAllowed.b^83
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^83
[Debug] Rewriter.Symbol.reify var b^83 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^110
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^110
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuAllowed.a^110
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^110
[Debug] Rewriter.Symbol.reify var a^110 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ksPair
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* constr ksPair(Set[Library.KeySetRA.X.T],
        Set[Library.KeySetRA.X.T]): Library.KeySetRA.T */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj1(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: a^110
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^110
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuAllowed.a^110
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^110
[Debug] Rewriter.Symbol.reify var a^110 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj2(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: a^110
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^110
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuAllowed.a^110
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^110
[Debug] Rewriter.Symbol.reify var a^110 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: a^110
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^110
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuAllowed.a^110
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^110
[Debug] Rewriter.Symbol.reify var a^110 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: b^83
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^83
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuAllowed.b^83
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^83
[Debug] Rewriter.Symbol.reify var b^83 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: a^110
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^110
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuAllowed.a^110
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^110
[Debug] Rewriter.Symbol.reify var a^110 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj1(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj1(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: b^83
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^83
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuAllowed.b^83
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^83
[Debug] Rewriter.Symbol.reify var b^83 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj1(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.ks_proj1
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify /* destr ks_proj1(Library.KeySetRA.T): Set[
        Library.KeySetRA.X.T] */
[Debug] SymbolTbl.resolve_and_find: a^110
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^110
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuAllowed.a^110
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^110
[Debug] Rewriter.Symbol.reify var a^110 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.X.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.Type -> Library.KeySetRA.X ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: a^110
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^110
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuAllowed.a^110
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^110
[Debug] Rewriter.Symbol.reify var a^110 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: b^83
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^83
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuAllowed.b^83
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^83
[Debug] Rewriter.Symbol.reify var b^83 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: a^110
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^110
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuAllowed.a^110
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^110
[Debug] Rewriter.Symbol.reify var a^110 : Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.fpuAllowed
[Debug] Keyset: 5
[Debug] old id a -> 110
[Debug] fresh id a -> 111
[Debug] Keyset: 5
[Debug] old id b -> 83
[Debug] fresh id b -> 84
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.KeySetRA.comp
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.KeySetRA.valid
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.KeySetRA.comp
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.KeySetRA.frame
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.frame
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.frameCompInv.a^111
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.frameCompInv.b^84
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.comp
[Debug] Rewriter.Symbol.reify func comp(a^108: Library.KeySetRA.T, b^81:
                                        Library.KeySetRA.T)
                                returns (ret^29: Library.KeySetRA.T)
        {
          ite(a^108 == Library.KeySetRA.id, b^81, ite(b^81 ==
          Library.KeySetRA.id, a^108, ite(a^108 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^108),
          Library.KeySetRA.ks_proj2(a^108)) && b^81 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(b^81),
          Library.KeySetRA.ks_proj2(b^81)),
          ite(Library.KeySetRA.valid(a^108) &&
          Library.KeySetRA.valid(b^81) && Library.KeySetRA.ks_proj1(a^108) **
          Library.KeySetRA.ks_proj1(b^81) == {||},
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^108) ++
          Library.KeySetRA.ks_proj1(b^81),
          Library.KeySetRA.ks_proj2(a^108) ++
          Library.KeySetRA.ks_proj2(b^81)), Library.KeySetRA.ksTop),
          Library.KeySetRA.ksTop)))
        }
[Debug] SymbolTbl.resolve_and_find: a^111
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA.frameCompInv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^111
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^111, b^84
[Debug] SymbolTbl.resolve.go_forward: ids2: a^111
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^111
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frameCompInv.a^111
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^111
[Debug] Rewriter.Symbol.reify var a^111 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^84
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA.frameCompInv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^84
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^111, b^84
[Debug] SymbolTbl.resolve.go_forward: ids2: b^84
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^84
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frameCompInv.b^84
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^84
[Debug] Rewriter.Symbol.reify var b^84 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.frame
[Debug] Rewriter.Symbol.reify func frame(a^109: Library.KeySetRA.T, b^82:
                                         Library.KeySetRA.T)
                                returns (ret^30: Library.KeySetRA.T)
        {
          ite(b^82 == Library.KeySetRA.id, a^109, ite(a^109 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^109),
          Library.KeySetRA.ks_proj2(a^109)) && b^82 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(b^82),
          Library.KeySetRA.ks_proj2(b^82)),
          ite(Library.KeySetRA.valid(a^109) &&
          Library.KeySetRA.valid(b^82) &&
          Library.KeySetRA.ks_proj1(b^82) subsetof
          Library.KeySetRA.ks_proj1(a^109) &&
          Library.KeySetRA.ks_proj2(b^82) subsetof
          Library.KeySetRA.ks_proj2(a^109),
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^109) --
          Library.KeySetRA.ks_proj1(b^82),
          Library.KeySetRA.ks_proj2(a^109) --
          Library.KeySetRA.ks_proj2(b^82)), Library.KeySetRA.ksTop),
          Library.KeySetRA.ksTop))
        }
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.comp
[Debug] Rewriter.Symbol.reify func comp(a^108: Library.KeySetRA.T, b^81:
                                        Library.KeySetRA.T)
                                returns (ret^29: Library.KeySetRA.T)
        {
          ite(a^108 == Library.KeySetRA.id, b^81, ite(b^81 ==
          Library.KeySetRA.id, a^108, ite(a^108 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^108),
          Library.KeySetRA.ks_proj2(a^108)) && b^81 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(b^81),
          Library.KeySetRA.ks_proj2(b^81)),
          ite(Library.KeySetRA.valid(a^108) &&
          Library.KeySetRA.valid(b^81) && Library.KeySetRA.ks_proj1(a^108) **
          Library.KeySetRA.ks_proj1(b^81) == {||},
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^108) ++
          Library.KeySetRA.ks_proj1(b^81),
          Library.KeySetRA.ks_proj2(a^108) ++
          Library.KeySetRA.ks_proj2(b^81)), Library.KeySetRA.ksTop),
          Library.KeySetRA.ksTop)))
        }
[Debug] SymbolTbl.resolve_and_find: a^111
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^111
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frameCompInv.a^111
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^111
[Debug] Rewriter.Symbol.reify var a^111 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^84
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^84
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frameCompInv.b^84
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^84
[Debug] Rewriter.Symbol.reify var b^84 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^84
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^84
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frameCompInv.b^84
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^84
[Debug] Rewriter.Symbol.reify var b^84 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^111
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^111
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frameCompInv.a^111
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^111
[Debug] Rewriter.Symbol.reify var a^111 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.comp
[Debug] Rewriter.Symbol.reify func comp(a^108: Library.KeySetRA.T, b^81:
                                        Library.KeySetRA.T)
                                returns (ret^29: Library.KeySetRA.T)
        {
          ite(a^108 == Library.KeySetRA.id, b^81, ite(b^81 ==
          Library.KeySetRA.id, a^108, ite(a^108 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^108),
          Library.KeySetRA.ks_proj2(a^108)) && b^81 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(b^81),
          Library.KeySetRA.ks_proj2(b^81)),
          ite(Library.KeySetRA.valid(a^108) &&
          Library.KeySetRA.valid(b^81) && Library.KeySetRA.ks_proj1(a^108) **
          Library.KeySetRA.ks_proj1(b^81) == {||},
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^108) ++
          Library.KeySetRA.ks_proj1(b^81),
          Library.KeySetRA.ks_proj2(a^108) ++
          Library.KeySetRA.ks_proj2(b^81)), Library.KeySetRA.ksTop),
          Library.KeySetRA.ksTop)))
        }
[Debug] SymbolTbl.resolve_and_find: a^111
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^111
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frameCompInv.a^111
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^111
[Debug] Rewriter.Symbol.reify var a^111 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^84
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^84
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frameCompInv.b^84
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^84
[Debug] Rewriter.Symbol.reify var b^84 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameCompInv
[Debug] Keyset: 5
[Debug] old id a -> 111
[Debug] fresh id a -> 112
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.KeySetRA.valid
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.KeySetRA.frame
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.frame
[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = id; qual_ident = Library.KeySetRA.id
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.id
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.frameReflexive.a^112
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: a^112
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA.frameReflexive
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^112
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^112
[Debug] SymbolTbl.resolve.go_forward: ids2: a^112
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^112
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frameReflexive.a^112
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^112
[Debug] Rewriter.Symbol.reify var a^112 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.frame
[Debug] Rewriter.Symbol.reify func frame(a^109: Library.KeySetRA.T, b^82:
                                         Library.KeySetRA.T)
                                returns (ret^30: Library.KeySetRA.T)
        {
          ite(b^82 == Library.KeySetRA.id, a^109, ite(a^109 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^109),
          Library.KeySetRA.ks_proj2(a^109)) && b^82 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(b^82),
          Library.KeySetRA.ks_proj2(b^82)),
          ite(Library.KeySetRA.valid(a^109) &&
          Library.KeySetRA.valid(b^82) &&
          Library.KeySetRA.ks_proj1(b^82) subsetof
          Library.KeySetRA.ks_proj1(a^109) &&
          Library.KeySetRA.ks_proj2(b^82) subsetof
          Library.KeySetRA.ks_proj2(a^109),
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^109) --
          Library.KeySetRA.ks_proj1(b^82),
          Library.KeySetRA.ks_proj2(a^109) --
          Library.KeySetRA.ks_proj2(b^82)), Library.KeySetRA.ksTop),
          Library.KeySetRA.ksTop))
        }
[Debug] SymbolTbl.resolve_and_find: a^112
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^112
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frameReflexive.a^112
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^112
[Debug] Rewriter.Symbol.reify var a^112 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^112
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^112
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frameReflexive.a^112
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^112
[Debug] Rewriter.Symbol.reify var a^112 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.id
[Debug] Rewriter.Symbol.reify val id : Library.KeySetRA.T =
                                    Library.KeySetRA.ksPair({||}, {||})
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: a^112
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^112
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frameReflexive.a^112
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^112
[Debug] Rewriter.Symbol.reify var a^112 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameReflexive
[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = id; qual_ident = Library.KeySetRA.id
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.id
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.KeySetRA.valid
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.id
[Debug] Rewriter.Symbol.reify val id : Library.KeySetRA.T =
                                    Library.KeySetRA.ksPair({||}, {||})
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.idValid
[Debug] Keyset: 5
[Debug] old id a -> 112
[Debug] fresh id a -> 113
[Debug] Keyset: 5
[Debug] old id b -> 84
[Debug] fresh id b -> 85
[Debug] Keyset: 5
[Debug] old id c -> 16
[Debug] fresh id c -> 17
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.KeySetRA.comp
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.KeySetRA.comp
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.KeySetRA.comp
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.KeySetRA.comp
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.compAssoc.a^113
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.compAssoc.b^85
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.compAssoc.c^17
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.comp
[Debug] Rewriter.Symbol.reify func comp(a^108: Library.KeySetRA.T, b^81:
                                        Library.KeySetRA.T)
                                returns (ret^29: Library.KeySetRA.T)
        {
          ite(a^108 == Library.KeySetRA.id, b^81, ite(b^81 ==
          Library.KeySetRA.id, a^108, ite(a^108 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^108),
          Library.KeySetRA.ks_proj2(a^108)) && b^81 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(b^81),
          Library.KeySetRA.ks_proj2(b^81)),
          ite(Library.KeySetRA.valid(a^108) &&
          Library.KeySetRA.valid(b^81) && Library.KeySetRA.ks_proj1(a^108) **
          Library.KeySetRA.ks_proj1(b^81) == {||},
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^108) ++
          Library.KeySetRA.ks_proj1(b^81),
          Library.KeySetRA.ks_proj2(a^108) ++
          Library.KeySetRA.ks_proj2(b^81)), Library.KeySetRA.ksTop),
          Library.KeySetRA.ksTop)))
        }
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.comp
[Debug] Rewriter.Symbol.reify func comp(a^108: Library.KeySetRA.T, b^81:
                                        Library.KeySetRA.T)
                                returns (ret^29: Library.KeySetRA.T)
        {
          ite(a^108 == Library.KeySetRA.id, b^81, ite(b^81 ==
          Library.KeySetRA.id, a^108, ite(a^108 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^108),
          Library.KeySetRA.ks_proj2(a^108)) && b^81 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(b^81),
          Library.KeySetRA.ks_proj2(b^81)),
          ite(Library.KeySetRA.valid(a^108) &&
          Library.KeySetRA.valid(b^81) && Library.KeySetRA.ks_proj1(a^108) **
          Library.KeySetRA.ks_proj1(b^81) == {||},
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^108) ++
          Library.KeySetRA.ks_proj1(b^81),
          Library.KeySetRA.ks_proj2(a^108) ++
          Library.KeySetRA.ks_proj2(b^81)), Library.KeySetRA.ksTop),
          Library.KeySetRA.ksTop)))
        }
[Debug] SymbolTbl.resolve_and_find: a^113
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA.compAssoc
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^113
[Debug] SymbolTbl.resolve.go_forward: scope_entries: c^17, b^85, a^113
[Debug] SymbolTbl.resolve.go_forward: ids2: a^113
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^113
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.compAssoc.a^113
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^113
[Debug] Rewriter.Symbol.reify var a^113 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^85
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA.compAssoc
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^85
[Debug] SymbolTbl.resolve.go_forward: scope_entries: c^17, b^85, a^113
[Debug] SymbolTbl.resolve.go_forward: ids2: b^85
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^85
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.compAssoc.b^85
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^85
[Debug] Rewriter.Symbol.reify var b^85 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^17
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA.compAssoc
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: c^17
[Debug] SymbolTbl.resolve.go_forward: scope_entries: c^17, b^85, a^113
[Debug] SymbolTbl.resolve.go_forward: ids2: c^17
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^17
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.compAssoc.c^17
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^17
[Debug] Rewriter.Symbol.reify var c^17 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.comp
[Debug] Rewriter.Symbol.reify func comp(a^108: Library.KeySetRA.T, b^81:
                                        Library.KeySetRA.T)
                                returns (ret^29: Library.KeySetRA.T)
        {
          ite(a^108 == Library.KeySetRA.id, b^81, ite(b^81 ==
          Library.KeySetRA.id, a^108, ite(a^108 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^108),
          Library.KeySetRA.ks_proj2(a^108)) && b^81 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(b^81),
          Library.KeySetRA.ks_proj2(b^81)),
          ite(Library.KeySetRA.valid(a^108) &&
          Library.KeySetRA.valid(b^81) && Library.KeySetRA.ks_proj1(a^108) **
          Library.KeySetRA.ks_proj1(b^81) == {||},
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^108) ++
          Library.KeySetRA.ks_proj1(b^81),
          Library.KeySetRA.ks_proj2(a^108) ++
          Library.KeySetRA.ks_proj2(b^81)), Library.KeySetRA.ksTop),
          Library.KeySetRA.ksTop)))
        }
[Debug] SymbolTbl.resolve_and_find: a^113
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^113
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.compAssoc.a^113
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^113
[Debug] Rewriter.Symbol.reify var a^113 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.comp
[Debug] Rewriter.Symbol.reify func comp(a^108: Library.KeySetRA.T, b^81:
                                        Library.KeySetRA.T)
                                returns (ret^29: Library.KeySetRA.T)
        {
          ite(a^108 == Library.KeySetRA.id, b^81, ite(b^81 ==
          Library.KeySetRA.id, a^108, ite(a^108 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^108),
          Library.KeySetRA.ks_proj2(a^108)) && b^81 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(b^81),
          Library.KeySetRA.ks_proj2(b^81)),
          ite(Library.KeySetRA.valid(a^108) &&
          Library.KeySetRA.valid(b^81) && Library.KeySetRA.ks_proj1(a^108) **
          Library.KeySetRA.ks_proj1(b^81) == {||},
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^108) ++
          Library.KeySetRA.ks_proj1(b^81),
          Library.KeySetRA.ks_proj2(a^108) ++
          Library.KeySetRA.ks_proj2(b^81)), Library.KeySetRA.ksTop),
          Library.KeySetRA.ksTop)))
        }
[Debug] SymbolTbl.resolve_and_find: b^85
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^85
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.compAssoc.b^85
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^85
[Debug] Rewriter.Symbol.reify var b^85 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^17
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^17
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.compAssoc.c^17
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^17
[Debug] Rewriter.Symbol.reify var c^17 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compAssoc
[Debug] Keyset: 5
[Debug] old id a -> 113
[Debug] fresh id a -> 114
[Debug] Keyset: 5
[Debug] old id b -> 85
[Debug] fresh id b -> 86
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.KeySetRA.comp
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.KeySetRA.comp
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.compCommute.a^114
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.compCommute.b^86
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.comp
[Debug] Rewriter.Symbol.reify func comp(a^108: Library.KeySetRA.T, b^81:
                                        Library.KeySetRA.T)
                                returns (ret^29: Library.KeySetRA.T)
        {
          ite(a^108 == Library.KeySetRA.id, b^81, ite(b^81 ==
          Library.KeySetRA.id, a^108, ite(a^108 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^108),
          Library.KeySetRA.ks_proj2(a^108)) && b^81 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(b^81),
          Library.KeySetRA.ks_proj2(b^81)),
          ite(Library.KeySetRA.valid(a^108) &&
          Library.KeySetRA.valid(b^81) && Library.KeySetRA.ks_proj1(a^108) **
          Library.KeySetRA.ks_proj1(b^81) == {||},
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^108) ++
          Library.KeySetRA.ks_proj1(b^81),
          Library.KeySetRA.ks_proj2(a^108) ++
          Library.KeySetRA.ks_proj2(b^81)), Library.KeySetRA.ksTop),
          Library.KeySetRA.ksTop)))
        }
[Debug] SymbolTbl.resolve_and_find: a^114
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA.compCommute
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^114
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^86, a^114
[Debug] SymbolTbl.resolve.go_forward: ids2: a^114
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^114
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.compCommute.a^114
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^114
[Debug] Rewriter.Symbol.reify var a^114 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^86
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA.compCommute
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^86
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^86, a^114
[Debug] SymbolTbl.resolve.go_forward: ids2: b^86
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^86
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.compCommute.b^86
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^86
[Debug] Rewriter.Symbol.reify var b^86 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.comp
[Debug] Rewriter.Symbol.reify func comp(a^108: Library.KeySetRA.T, b^81:
                                        Library.KeySetRA.T)
                                returns (ret^29: Library.KeySetRA.T)
        {
          ite(a^108 == Library.KeySetRA.id, b^81, ite(b^81 ==
          Library.KeySetRA.id, a^108, ite(a^108 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^108),
          Library.KeySetRA.ks_proj2(a^108)) && b^81 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(b^81),
          Library.KeySetRA.ks_proj2(b^81)),
          ite(Library.KeySetRA.valid(a^108) &&
          Library.KeySetRA.valid(b^81) && Library.KeySetRA.ks_proj1(a^108) **
          Library.KeySetRA.ks_proj1(b^81) == {||},
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^108) ++
          Library.KeySetRA.ks_proj1(b^81),
          Library.KeySetRA.ks_proj2(a^108) ++
          Library.KeySetRA.ks_proj2(b^81)), Library.KeySetRA.ksTop),
          Library.KeySetRA.ksTop)))
        }
[Debug] SymbolTbl.resolve_and_find: b^86
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^86
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.compCommute.b^86
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^86
[Debug] Rewriter.Symbol.reify var b^86 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^114
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^114
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.compCommute.a^114
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^114
[Debug] Rewriter.Symbol.reify var a^114 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compCommute
[Debug] Keyset: 5
[Debug] old id a -> 114
[Debug] fresh id a -> 115
[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = id; qual_ident = Library.KeySetRA.id
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.id
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.KeySetRA.comp
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.compId.a^115
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.comp
[Debug] Rewriter.Symbol.reify func comp(a^108: Library.KeySetRA.T, b^81:
                                        Library.KeySetRA.T)
                                returns (ret^29: Library.KeySetRA.T)
        {
          ite(a^108 == Library.KeySetRA.id, b^81, ite(b^81 ==
          Library.KeySetRA.id, a^108, ite(a^108 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^108),
          Library.KeySetRA.ks_proj2(a^108)) && b^81 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(b^81),
          Library.KeySetRA.ks_proj2(b^81)),
          ite(Library.KeySetRA.valid(a^108) &&
          Library.KeySetRA.valid(b^81) && Library.KeySetRA.ks_proj1(a^108) **
          Library.KeySetRA.ks_proj1(b^81) == {||},
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^108) ++
          Library.KeySetRA.ks_proj1(b^81),
          Library.KeySetRA.ks_proj2(a^108) ++
          Library.KeySetRA.ks_proj2(b^81)), Library.KeySetRA.ksTop),
          Library.KeySetRA.ksTop)))
        }
[Debug] SymbolTbl.resolve_and_find: a^115
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA.compId
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^115
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^115
[Debug] SymbolTbl.resolve.go_forward: ids2: a^115
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^115
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.compId.a^115
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^115
[Debug] Rewriter.Symbol.reify var a^115 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.id
[Debug] Rewriter.Symbol.reify val id : Library.KeySetRA.T =
                                    Library.KeySetRA.ksPair({||}, {||})
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^115
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^115
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.compId.a^115
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^115
[Debug] Rewriter.Symbol.reify var a^115 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compId
[Debug] Keyset: 5
[Debug] old id a -> 115
[Debug] fresh id a -> 116
[Debug] Keyset: 5
[Debug] old id b -> 86
[Debug] fresh id b -> 87
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.KeySetRA.comp
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.KeySetRA.valid
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.KeySetRA.valid
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.KeySetRA.valid
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.compValid.a^116
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.compValid.b^87
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.comp
[Debug] Rewriter.Symbol.reify func comp(a^108: Library.KeySetRA.T, b^81:
                                        Library.KeySetRA.T)
                                returns (ret^29: Library.KeySetRA.T)
        {
          ite(a^108 == Library.KeySetRA.id, b^81, ite(b^81 ==
          Library.KeySetRA.id, a^108, ite(a^108 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^108),
          Library.KeySetRA.ks_proj2(a^108)) && b^81 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(b^81),
          Library.KeySetRA.ks_proj2(b^81)),
          ite(Library.KeySetRA.valid(a^108) &&
          Library.KeySetRA.valid(b^81) && Library.KeySetRA.ks_proj1(a^108) **
          Library.KeySetRA.ks_proj1(b^81) == {||},
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^108) ++
          Library.KeySetRA.ks_proj1(b^81),
          Library.KeySetRA.ks_proj2(a^108) ++
          Library.KeySetRA.ks_proj2(b^81)), Library.KeySetRA.ksTop),
          Library.KeySetRA.ksTop)))
        }
[Debug] SymbolTbl.resolve_and_find: a^116
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA.compValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^116
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^87, a^116
[Debug] SymbolTbl.resolve.go_forward: ids2: a^116
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^116
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.compValid.a^116
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^116
[Debug] Rewriter.Symbol.reify var a^116 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^87
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA.compValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^87
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^87, a^116
[Debug] SymbolTbl.resolve.go_forward: ids2: b^87
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^87
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.compValid.b^87
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^87
[Debug] Rewriter.Symbol.reify var b^87 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: a^116
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^116
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.compValid.a^116
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^116
[Debug] Rewriter.Symbol.reify var a^116 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: b^87
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^87
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.compValid.b^87
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^87
[Debug] Rewriter.Symbol.reify var b^87 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: a^116
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^116
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.compValid.a^116
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^116
[Debug] Rewriter.Symbol.reify var a^116 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.comp
[Debug] Rewriter.Symbol.reify func comp(a^108: Library.KeySetRA.T, b^81:
                                        Library.KeySetRA.T)
                                returns (ret^29: Library.KeySetRA.T)
        {
          ite(a^108 == Library.KeySetRA.id, b^81, ite(b^81 ==
          Library.KeySetRA.id, a^108, ite(a^108 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^108),
          Library.KeySetRA.ks_proj2(a^108)) && b^81 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(b^81),
          Library.KeySetRA.ks_proj2(b^81)),
          ite(Library.KeySetRA.valid(a^108) &&
          Library.KeySetRA.valid(b^81) && Library.KeySetRA.ks_proj1(a^108) **
          Library.KeySetRA.ks_proj1(b^81) == {||},
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^108) ++
          Library.KeySetRA.ks_proj1(b^81),
          Library.KeySetRA.ks_proj2(a^108) ++
          Library.KeySetRA.ks_proj2(b^81)), Library.KeySetRA.ksTop),
          Library.KeySetRA.ksTop)))
        }
[Debug] SymbolTbl.resolve_and_find: a^116
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^116
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.compValid.a^116
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^116
[Debug] Rewriter.Symbol.reify var a^116 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^87
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^87
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.compValid.b^87
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^87
[Debug] Rewriter.Symbol.reify var b^87 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compValid
[Debug] Keyset: 5
[Debug] old id a -> 116
[Debug] fresh id a -> 117
[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = id; qual_ident = Library.KeySetRA.id
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.id
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.KeySetRA.frame
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.frame
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.frameId.a^117
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.frame
[Debug] Rewriter.Symbol.reify func frame(a^109: Library.KeySetRA.T, b^82:
                                         Library.KeySetRA.T)
                                returns (ret^30: Library.KeySetRA.T)
        {
          ite(b^82 == Library.KeySetRA.id, a^109, ite(a^109 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^109),
          Library.KeySetRA.ks_proj2(a^109)) && b^82 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(b^82),
          Library.KeySetRA.ks_proj2(b^82)),
          ite(Library.KeySetRA.valid(a^109) &&
          Library.KeySetRA.valid(b^82) &&
          Library.KeySetRA.ks_proj1(b^82) subsetof
          Library.KeySetRA.ks_proj1(a^109) &&
          Library.KeySetRA.ks_proj2(b^82) subsetof
          Library.KeySetRA.ks_proj2(a^109),
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^109) --
          Library.KeySetRA.ks_proj1(b^82),
          Library.KeySetRA.ks_proj2(a^109) --
          Library.KeySetRA.ks_proj2(b^82)), Library.KeySetRA.ksTop),
          Library.KeySetRA.ksTop))
        }
[Debug] SymbolTbl.resolve_and_find: a^117
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA.frameId
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^117
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^117
[Debug] SymbolTbl.resolve.go_forward: ids2: a^117
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^117
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frameId.a^117
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^117
[Debug] Rewriter.Symbol.reify var a^117 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.id
[Debug] Rewriter.Symbol.reify val id : Library.KeySetRA.T =
                                    Library.KeySetRA.ksPair({||}, {||})
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^117
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^117
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frameId.a^117
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^117
[Debug] Rewriter.Symbol.reify var a^117 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameId
[Debug] Keyset: 5
[Debug] old id a -> 117
[Debug] fresh id a -> 118
[Debug] Keyset: 5
[Debug] old id b -> 87
[Debug] fresh id b -> 88
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.KeySetRA.frame
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.frame
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.KeySetRA.valid
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.KeySetRA.frame
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.frame
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.KeySetRA.comp
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.compFrameInv.a^118
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.compFrameInv.b^88
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.frame
[Debug] Rewriter.Symbol.reify func frame(a^109: Library.KeySetRA.T, b^82:
                                         Library.KeySetRA.T)
                                returns (ret^30: Library.KeySetRA.T)
        {
          ite(b^82 == Library.KeySetRA.id, a^109, ite(a^109 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^109),
          Library.KeySetRA.ks_proj2(a^109)) && b^82 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(b^82),
          Library.KeySetRA.ks_proj2(b^82)),
          ite(Library.KeySetRA.valid(a^109) &&
          Library.KeySetRA.valid(b^82) &&
          Library.KeySetRA.ks_proj1(b^82) subsetof
          Library.KeySetRA.ks_proj1(a^109) &&
          Library.KeySetRA.ks_proj2(b^82) subsetof
          Library.KeySetRA.ks_proj2(a^109),
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^109) --
          Library.KeySetRA.ks_proj1(b^82),
          Library.KeySetRA.ks_proj2(a^109) --
          Library.KeySetRA.ks_proj2(b^82)), Library.KeySetRA.ksTop),
          Library.KeySetRA.ksTop))
        }
[Debug] SymbolTbl.resolve_and_find: a^118
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA.compFrameInv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^118
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^118, b^88
[Debug] SymbolTbl.resolve.go_forward: ids2: a^118
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^118
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.compFrameInv.a^118
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^118
[Debug] Rewriter.Symbol.reify var a^118 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^88
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA.compFrameInv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^88
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^118, b^88
[Debug] SymbolTbl.resolve.go_forward: ids2: b^88
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^88
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.compFrameInv.b^88
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^88
[Debug] Rewriter.Symbol.reify var b^88 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.comp
[Debug] Rewriter.Symbol.reify func comp(a^108: Library.KeySetRA.T, b^81:
                                        Library.KeySetRA.T)
                                returns (ret^29: Library.KeySetRA.T)
        {
          ite(a^108 == Library.KeySetRA.id, b^81, ite(b^81 ==
          Library.KeySetRA.id, a^108, ite(a^108 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^108),
          Library.KeySetRA.ks_proj2(a^108)) && b^81 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(b^81),
          Library.KeySetRA.ks_proj2(b^81)),
          ite(Library.KeySetRA.valid(a^108) &&
          Library.KeySetRA.valid(b^81) && Library.KeySetRA.ks_proj1(a^108) **
          Library.KeySetRA.ks_proj1(b^81) == {||},
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^108) ++
          Library.KeySetRA.ks_proj1(b^81),
          Library.KeySetRA.ks_proj2(a^108) ++
          Library.KeySetRA.ks_proj2(b^81)), Library.KeySetRA.ksTop),
          Library.KeySetRA.ksTop)))
        }
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.frame
[Debug] Rewriter.Symbol.reify func frame(a^109: Library.KeySetRA.T, b^82:
                                         Library.KeySetRA.T)
                                returns (ret^30: Library.KeySetRA.T)
        {
          ite(b^82 == Library.KeySetRA.id, a^109, ite(a^109 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^109),
          Library.KeySetRA.ks_proj2(a^109)) && b^82 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(b^82),
          Library.KeySetRA.ks_proj2(b^82)),
          ite(Library.KeySetRA.valid(a^109) &&
          Library.KeySetRA.valid(b^82) &&
          Library.KeySetRA.ks_proj1(b^82) subsetof
          Library.KeySetRA.ks_proj1(a^109) &&
          Library.KeySetRA.ks_proj2(b^82) subsetof
          Library.KeySetRA.ks_proj2(a^109),
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^109) --
          Library.KeySetRA.ks_proj1(b^82),
          Library.KeySetRA.ks_proj2(a^109) --
          Library.KeySetRA.ks_proj2(b^82)), Library.KeySetRA.ksTop),
          Library.KeySetRA.ksTop))
        }
[Debug] SymbolTbl.resolve_and_find: a^118
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^118
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.compFrameInv.a^118
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^118
[Debug] Rewriter.Symbol.reify var a^118 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^88
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^88
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.compFrameInv.b^88
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^88
[Debug] Rewriter.Symbol.reify var b^88 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^88
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^88
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.compFrameInv.b^88
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^88
[Debug] Rewriter.Symbol.reify var b^88 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^118
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^118
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.compFrameInv.a^118
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^118
[Debug] Rewriter.Symbol.reify var a^118 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.frame
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.frame
[Debug] Rewriter.Symbol.reify func frame(a^109: Library.KeySetRA.T, b^82:
                                         Library.KeySetRA.T)
                                returns (ret^30: Library.KeySetRA.T)
        {
          ite(b^82 == Library.KeySetRA.id, a^109, ite(a^109 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^109),
          Library.KeySetRA.ks_proj2(a^109)) && b^82 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(b^82),
          Library.KeySetRA.ks_proj2(b^82)),
          ite(Library.KeySetRA.valid(a^109) &&
          Library.KeySetRA.valid(b^82) &&
          Library.KeySetRA.ks_proj1(b^82) subsetof
          Library.KeySetRA.ks_proj1(a^109) &&
          Library.KeySetRA.ks_proj2(b^82) subsetof
          Library.KeySetRA.ks_proj2(a^109),
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^109) --
          Library.KeySetRA.ks_proj1(b^82),
          Library.KeySetRA.ks_proj2(a^109) --
          Library.KeySetRA.ks_proj2(b^82)), Library.KeySetRA.ksTop),
          Library.KeySetRA.ksTop))
        }
[Debug] SymbolTbl.resolve_and_find: a^118
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^118
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.compFrameInv.a^118
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^118
[Debug] Rewriter.Symbol.reify var a^118 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^88
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^88
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.compFrameInv.b^88
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^88
[Debug] Rewriter.Symbol.reify var b^88 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compFrameInv
[Debug] Keyset: 5
[Debug] old id a -> 118
[Debug] fresh id a -> 119
[Debug] Keyset: 5
[Debug] old id b -> 88
[Debug] fresh id b -> 89
[Debug] Keyset: 5
[Debug] old id c -> 17
[Debug] fresh id c -> 18
[Debug] SymbolTbl.resolve_and_find: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = fpuAllowed; qual_ident = Library.KeySetRA.fpuAllowed
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.KeySetRA.valid
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.KeySetRA.comp
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.KeySetRA.valid
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.KeySetRA.comp
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.KeySetRA.valid
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.fpuValid.a^119
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.fpuValid.b^89
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.fpuValid.c^18
[Debug] SymbolTbl.resolve_and_find: fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^110: Library.KeySetRA.T,
                                              b^83: Library.KeySetRA.T)
                                returns (ret^31: Bool)
        {
          ite(a^110 == b^83, true, ite(a^110 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^110),
          Library.KeySetRA.ks_proj2(a^110)) && b^83 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(b^83),
          Library.KeySetRA.ks_proj2(b^83)), Library.KeySetRA.valid(a^110) &&
          Library.KeySetRA.valid(b^83) &&
          Library.KeySetRA.ks_proj1(b^83) subsetof
          Library.KeySetRA.ks_proj1(a^110), false))
        }
[Debug] SymbolTbl.resolve_and_find: a^119
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA.fpuValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^119
[Debug] SymbolTbl.resolve.go_forward: scope_entries: c^18, b^89, a^119
[Debug] SymbolTbl.resolve.go_forward: ids2: a^119
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^119
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuValid.a^119
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^119
[Debug] Rewriter.Symbol.reify var a^119 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^89
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA.fpuValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^89
[Debug] SymbolTbl.resolve.go_forward: scope_entries: c^18, b^89, a^119
[Debug] SymbolTbl.resolve.go_forward: ids2: b^89
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^89
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuValid.b^89
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^89
[Debug] Rewriter.Symbol.reify var b^89 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: a^119
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^119
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuValid.a^119
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^119
[Debug] Rewriter.Symbol.reify var a^119 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^110: Library.KeySetRA.T,
                                              b^83: Library.KeySetRA.T)
                                returns (ret^31: Bool)
        {
          ite(a^110 == b^83, true, ite(a^110 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^110),
          Library.KeySetRA.ks_proj2(a^110)) && b^83 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(b^83),
          Library.KeySetRA.ks_proj2(b^83)), Library.KeySetRA.valid(a^110) &&
          Library.KeySetRA.valid(b^83) &&
          Library.KeySetRA.ks_proj1(b^83) subsetof
          Library.KeySetRA.ks_proj1(a^110), false))
        }
[Debug] SymbolTbl.resolve_and_find: a^119
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^119
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuValid.a^119
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^119
[Debug] Rewriter.Symbol.reify var a^119 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^89
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^89
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuValid.b^89
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^89
[Debug] Rewriter.Symbol.reify var b^89 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.comp
[Debug] Rewriter.Symbol.reify func comp(a^108: Library.KeySetRA.T, b^81:
                                        Library.KeySetRA.T)
                                returns (ret^29: Library.KeySetRA.T)
        {
          ite(a^108 == Library.KeySetRA.id, b^81, ite(b^81 ==
          Library.KeySetRA.id, a^108, ite(a^108 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^108),
          Library.KeySetRA.ks_proj2(a^108)) && b^81 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(b^81),
          Library.KeySetRA.ks_proj2(b^81)),
          ite(Library.KeySetRA.valid(a^108) &&
          Library.KeySetRA.valid(b^81) && Library.KeySetRA.ks_proj1(a^108) **
          Library.KeySetRA.ks_proj1(b^81) == {||},
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^108) ++
          Library.KeySetRA.ks_proj1(b^81),
          Library.KeySetRA.ks_proj2(a^108) ++
          Library.KeySetRA.ks_proj2(b^81)), Library.KeySetRA.ksTop),
          Library.KeySetRA.ksTop)))
        }
[Debug] SymbolTbl.resolve_and_find: a^119
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^119
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuValid.a^119
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^119
[Debug] Rewriter.Symbol.reify var a^119 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^18
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA.fpuValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: c^18
[Debug] SymbolTbl.resolve.go_forward: scope_entries: c^18, b^89, a^119
[Debug] SymbolTbl.resolve.go_forward: ids2: c^18
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^18
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuValid.c^18
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^18
[Debug] Rewriter.Symbol.reify var c^18 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^110: Library.KeySetRA.T,
                                              b^83: Library.KeySetRA.T)
                                returns (ret^31: Bool)
        {
          ite(a^110 == b^83, true, ite(a^110 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^110),
          Library.KeySetRA.ks_proj2(a^110)) && b^83 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(b^83),
          Library.KeySetRA.ks_proj2(b^83)), Library.KeySetRA.valid(a^110) &&
          Library.KeySetRA.valid(b^83) &&
          Library.KeySetRA.ks_proj1(b^83) subsetof
          Library.KeySetRA.ks_proj1(a^110), false))
        }
[Debug] SymbolTbl.resolve_and_find: a^119
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^119
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuValid.a^119
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^119
[Debug] Rewriter.Symbol.reify var a^119 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^89
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^89
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuValid.b^89
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^89
[Debug] Rewriter.Symbol.reify var b^89 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: a^119
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^119
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuValid.a^119
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^119
[Debug] Rewriter.Symbol.reify var a^119 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^110: Library.KeySetRA.T,
                                              b^83: Library.KeySetRA.T)
                                returns (ret^31: Bool)
        {
          ite(a^110 == b^83, true, ite(a^110 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^110),
          Library.KeySetRA.ks_proj2(a^110)) && b^83 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(b^83),
          Library.KeySetRA.ks_proj2(b^83)), Library.KeySetRA.valid(a^110) &&
          Library.KeySetRA.valid(b^83) &&
          Library.KeySetRA.ks_proj1(b^83) subsetof
          Library.KeySetRA.ks_proj1(a^110), false))
        }
[Debug] SymbolTbl.resolve_and_find: a^119
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^119
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuValid.a^119
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^119
[Debug] Rewriter.Symbol.reify var a^119 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^89
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^89
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuValid.b^89
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^89
[Debug] Rewriter.Symbol.reify var b^89 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.comp
[Debug] Rewriter.Symbol.reify func comp(a^108: Library.KeySetRA.T, b^81:
                                        Library.KeySetRA.T)
                                returns (ret^29: Library.KeySetRA.T)
        {
          ite(a^108 == Library.KeySetRA.id, b^81, ite(b^81 ==
          Library.KeySetRA.id, a^108, ite(a^108 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^108),
          Library.KeySetRA.ks_proj2(a^108)) && b^81 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(b^81),
          Library.KeySetRA.ks_proj2(b^81)),
          ite(Library.KeySetRA.valid(a^108) &&
          Library.KeySetRA.valid(b^81) && Library.KeySetRA.ks_proj1(a^108) **
          Library.KeySetRA.ks_proj1(b^81) == {||},
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^108) ++
          Library.KeySetRA.ks_proj1(b^81),
          Library.KeySetRA.ks_proj2(a^108) ++
          Library.KeySetRA.ks_proj2(b^81)), Library.KeySetRA.ksTop),
          Library.KeySetRA.ksTop)))
        }
[Debug] SymbolTbl.resolve_and_find: b^89
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^89
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuValid.b^89
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^89
[Debug] Rewriter.Symbol.reify var b^89 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^18
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^18
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuValid.c^18
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^18
[Debug] Rewriter.Symbol.reify var c^18 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^110: Library.KeySetRA.T,
                                              b^83: Library.KeySetRA.T)
                                returns (ret^31: Bool)
        {
          ite(a^110 == b^83, true, ite(a^110 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^110),
          Library.KeySetRA.ks_proj2(a^110)) && b^83 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(b^83),
          Library.KeySetRA.ks_proj2(b^83)), Library.KeySetRA.valid(a^110) &&
          Library.KeySetRA.valid(b^83) &&
          Library.KeySetRA.ks_proj1(b^83) subsetof
          Library.KeySetRA.ks_proj1(a^110), false))
        }
[Debug] SymbolTbl.resolve_and_find: a^119
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^119
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuValid.a^119
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^119
[Debug] Rewriter.Symbol.reify var a^119 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^89
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^89
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuValid.b^89
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^89
[Debug] Rewriter.Symbol.reify var b^89 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: a^119
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^119
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuValid.a^119
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^119
[Debug] Rewriter.Symbol.reify var a^119 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^110: Library.KeySetRA.T,
                                              b^83: Library.KeySetRA.T)
                                returns (ret^31: Bool)
        {
          ite(a^110 == b^83, true, ite(a^110 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^110),
          Library.KeySetRA.ks_proj2(a^110)) && b^83 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(b^83),
          Library.KeySetRA.ks_proj2(b^83)), Library.KeySetRA.valid(a^110) &&
          Library.KeySetRA.valid(b^83) &&
          Library.KeySetRA.ks_proj1(b^83) subsetof
          Library.KeySetRA.ks_proj1(a^110), false))
        }
[Debug] SymbolTbl.resolve_and_find: a^119
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^119
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuValid.a^119
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^119
[Debug] Rewriter.Symbol.reify var a^119 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^89
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^89
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuValid.b^89
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^89
[Debug] Rewriter.Symbol.reify var b^89 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.comp
[Debug] Rewriter.Symbol.reify func comp(a^108: Library.KeySetRA.T, b^81:
                                        Library.KeySetRA.T)
                                returns (ret^29: Library.KeySetRA.T)
        {
          ite(a^108 == Library.KeySetRA.id, b^81, ite(b^81 ==
          Library.KeySetRA.id, a^108, ite(a^108 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^108),
          Library.KeySetRA.ks_proj2(a^108)) && b^81 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(b^81),
          Library.KeySetRA.ks_proj2(b^81)),
          ite(Library.KeySetRA.valid(a^108) &&
          Library.KeySetRA.valid(b^81) && Library.KeySetRA.ks_proj1(a^108) **
          Library.KeySetRA.ks_proj1(b^81) == {||},
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^108) ++
          Library.KeySetRA.ks_proj1(b^81),
          Library.KeySetRA.ks_proj2(a^108) ++
          Library.KeySetRA.ks_proj2(b^81)), Library.KeySetRA.ksTop),
          Library.KeySetRA.ksTop)))
        }
[Debug] SymbolTbl.resolve_and_find: a^119
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^119
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuValid.a^119
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^119
[Debug] Rewriter.Symbol.reify var a^119 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: c^18
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: c^18
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuValid.c^18
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: c^18
[Debug] Rewriter.Symbol.reify var c^18 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^110: Library.KeySetRA.T,
                                              b^83: Library.KeySetRA.T)
                                returns (ret^31: Bool)
        {
          ite(a^110 == b^83, true, ite(a^110 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^110),
          Library.KeySetRA.ks_proj2(a^110)) && b^83 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(b^83),
          Library.KeySetRA.ks_proj2(b^83)), Library.KeySetRA.valid(a^110) &&
          Library.KeySetRA.valid(b^83) &&
          Library.KeySetRA.ks_proj1(b^83) subsetof
          Library.KeySetRA.ks_proj1(a^110), false))
        }
[Debug] SymbolTbl.resolve_and_find: a^119
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^119
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuValid.a^119
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^119
[Debug] Rewriter.Symbol.reify var a^119 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^89
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^89
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuValid.b^89
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^89
[Debug] Rewriter.Symbol.reify var b^89 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: a^119
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^119
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuValid.a^119
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^119
[Debug] Rewriter.Symbol.reify var a^119 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^110: Library.KeySetRA.T,
                                              b^83: Library.KeySetRA.T)
                                returns (ret^31: Bool)
        {
          ite(a^110 == b^83, true, ite(a^110 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^110),
          Library.KeySetRA.ks_proj2(a^110)) && b^83 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(b^83),
          Library.KeySetRA.ks_proj2(b^83)), Library.KeySetRA.valid(a^110) &&
          Library.KeySetRA.valid(b^83) &&
          Library.KeySetRA.ks_proj1(b^83) subsetof
          Library.KeySetRA.ks_proj1(a^110), false))
        }
[Debug] SymbolTbl.resolve_and_find: a^119
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^119
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuValid.a^119
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^119
[Debug] Rewriter.Symbol.reify var a^119 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^89
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^89
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuValid.b^89
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^89
[Debug] Rewriter.Symbol.reify var b^89 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.fpuValid
[Debug] Keyset: 5
[Debug] old id a -> 119
[Debug] fresh id a -> 120
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.KeySetRA.valid
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = fpuAllowed; qual_ident = Library.KeySetRA.fpuAllowed
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.fpuReflexive.a^120
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: a^120
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA.fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^120
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^120
[Debug] SymbolTbl.resolve.go_forward: ids2: a^120
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^120
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuReflexive.a^120
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^120
[Debug] Rewriter.Symbol.reify var a^120 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: fpuAllowed
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.fpuAllowed
[Debug] Rewriter.Symbol.reify func fpuAllowed(a^110: Library.KeySetRA.T,
                                              b^83: Library.KeySetRA.T)
                                returns (ret^31: Bool)
        {
          ite(a^110 == b^83, true, ite(a^110 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^110),
          Library.KeySetRA.ks_proj2(a^110)) && b^83 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(b^83),
          Library.KeySetRA.ks_proj2(b^83)), Library.KeySetRA.valid(a^110) &&
          Library.KeySetRA.valid(b^83) &&
          Library.KeySetRA.ks_proj1(b^83) subsetof
          Library.KeySetRA.ks_proj1(a^110), false))
        }
[Debug] SymbolTbl.resolve_and_find: a^120
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^120
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuReflexive.a^120
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^120
[Debug] Rewriter.Symbol.reify var a^120 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: a^120
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^120
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuReflexive.a^120
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^120
[Debug] Rewriter.Symbol.reify var a^120 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: a^120
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^120
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuReflexive.a^120
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^120
[Debug] Rewriter.Symbol.reify var a^120 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.fpuReflexive
[Debug] Keyset: 5
[Debug] old id a -> 120
[Debug] fresh id a -> 121
[Debug] Keyset: 5
[Debug] old id b -> 89
[Debug] fresh id b -> 90
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.KeySetRA.frame
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.frame
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.KeySetRA.valid
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.KeySetRA.valid
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.KeySetRA.valid
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.frameValid.a^121
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.frameValid.b^90
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.frame
[Debug] Rewriter.Symbol.reify func frame(a^109: Library.KeySetRA.T, b^82:
                                         Library.KeySetRA.T)
                                returns (ret^30: Library.KeySetRA.T)
        {
          ite(b^82 == Library.KeySetRA.id, a^109, ite(a^109 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^109),
          Library.KeySetRA.ks_proj2(a^109)) && b^82 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(b^82),
          Library.KeySetRA.ks_proj2(b^82)),
          ite(Library.KeySetRA.valid(a^109) &&
          Library.KeySetRA.valid(b^82) &&
          Library.KeySetRA.ks_proj1(b^82) subsetof
          Library.KeySetRA.ks_proj1(a^109) &&
          Library.KeySetRA.ks_proj2(b^82) subsetof
          Library.KeySetRA.ks_proj2(a^109),
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^109) --
          Library.KeySetRA.ks_proj1(b^82),
          Library.KeySetRA.ks_proj2(a^109) --
          Library.KeySetRA.ks_proj2(b^82)), Library.KeySetRA.ksTop),
          Library.KeySetRA.ksTop))
        }
[Debug] SymbolTbl.resolve_and_find: a^121
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA.frameValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^121
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^121, b^90
[Debug] SymbolTbl.resolve.go_forward: ids2: a^121
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^121
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frameValid.a^121
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^121
[Debug] Rewriter.Symbol.reify var a^121 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^90
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA.frameValid
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^90
[Debug] SymbolTbl.resolve.go_forward: scope_entries: a^121, b^90
[Debug] SymbolTbl.resolve.go_forward: ids2: b^90
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^90
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frameValid.b^90
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^90
[Debug] Rewriter.Symbol.reify var b^90 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: a^121
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^121
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frameValid.a^121
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^121
[Debug] Rewriter.Symbol.reify var a^121 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: b^90
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^90
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frameValid.b^90
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^90
[Debug] Rewriter.Symbol.reify var b^90 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: a^121
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^121
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frameValid.a^121
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^121
[Debug] Rewriter.Symbol.reify var a^121 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.frame
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.frame
[Debug] Rewriter.Symbol.reify func frame(a^109: Library.KeySetRA.T, b^82:
                                         Library.KeySetRA.T)
                                returns (ret^30: Library.KeySetRA.T)
        {
          ite(b^82 == Library.KeySetRA.id, a^109, ite(a^109 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^109),
          Library.KeySetRA.ks_proj2(a^109)) && b^82 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(b^82),
          Library.KeySetRA.ks_proj2(b^82)),
          ite(Library.KeySetRA.valid(a^109) &&
          Library.KeySetRA.valid(b^82) &&
          Library.KeySetRA.ks_proj1(b^82) subsetof
          Library.KeySetRA.ks_proj1(a^109) &&
          Library.KeySetRA.ks_proj2(b^82) subsetof
          Library.KeySetRA.ks_proj2(a^109),
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^109) --
          Library.KeySetRA.ks_proj1(b^82),
          Library.KeySetRA.ks_proj2(a^109) --
          Library.KeySetRA.ks_proj2(b^82)), Library.KeySetRA.ksTop),
          Library.KeySetRA.ksTop))
        }
[Debug] SymbolTbl.resolve_and_find: a^121
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^121
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frameValid.a^121
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^121
[Debug] Rewriter.Symbol.reify var a^121 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^90
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^90
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frameValid.b^90
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^90
[Debug] Rewriter.Symbol.reify var b^90 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameValid
[Debug] Keyset: 5
[Debug] old id a -> 121
[Debug] fresh id a -> 122
[Debug] Keyset: 5
[Debug] old id b -> 90
[Debug] fresh id b -> 91
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.KeySetRA.comp
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.KeySetRA.valid
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.KeySetRA.comp
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.KeySetRA.frame
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.frame
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.KeySetRA.valid
[Debug] Rewriter.is_local: qual_ident = Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.weak_frameCompInv.a^122
[Debug] SymbolTbl.add_symbol: symbol_qual_ident: Library.KeySetRA.weak_frameCompInv.b^91
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.comp
[Debug] Rewriter.Symbol.reify func comp(a^108: Library.KeySetRA.T, b^81:
                                        Library.KeySetRA.T)
                                returns (ret^29: Library.KeySetRA.T)
        {
          ite(a^108 == Library.KeySetRA.id, b^81, ite(b^81 ==
          Library.KeySetRA.id, a^108, ite(a^108 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^108),
          Library.KeySetRA.ks_proj2(a^108)) && b^81 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(b^81),
          Library.KeySetRA.ks_proj2(b^81)),
          ite(Library.KeySetRA.valid(a^108) &&
          Library.KeySetRA.valid(b^81) && Library.KeySetRA.ks_proj1(a^108) **
          Library.KeySetRA.ks_proj1(b^81) == {||},
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^108) ++
          Library.KeySetRA.ks_proj1(b^81),
          Library.KeySetRA.ks_proj2(a^108) ++
          Library.KeySetRA.ks_proj2(b^81)), Library.KeySetRA.ksTop),
          Library.KeySetRA.ksTop)))
        }
[Debug] SymbolTbl.resolve_and_find: a^122
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA.weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: a^122
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^91, a^122
[Debug] SymbolTbl.resolve.go_forward: ids2: a^122
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^122
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.weak_frameCompInv.a^122
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^122
[Debug] Rewriter.Symbol.reify var a^122 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^91
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA.weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: b^91
[Debug] SymbolTbl.resolve.go_forward: scope_entries: b^91, a^122
[Debug] SymbolTbl.resolve.go_forward: ids2: b^91
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^91
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.weak_frameCompInv.b^91
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^91
[Debug] Rewriter.Symbol.reify var b^91 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.frame
[Debug] Rewriter.Symbol.reify func frame(a^109: Library.KeySetRA.T, b^82:
                                         Library.KeySetRA.T)
                                returns (ret^30: Library.KeySetRA.T)
        {
          ite(b^82 == Library.KeySetRA.id, a^109, ite(a^109 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^109),
          Library.KeySetRA.ks_proj2(a^109)) && b^82 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(b^82),
          Library.KeySetRA.ks_proj2(b^82)),
          ite(Library.KeySetRA.valid(a^109) &&
          Library.KeySetRA.valid(b^82) &&
          Library.KeySetRA.ks_proj1(b^82) subsetof
          Library.KeySetRA.ks_proj1(a^109) &&
          Library.KeySetRA.ks_proj2(b^82) subsetof
          Library.KeySetRA.ks_proj2(a^109),
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^109) --
          Library.KeySetRA.ks_proj1(b^82),
          Library.KeySetRA.ks_proj2(a^109) --
          Library.KeySetRA.ks_proj2(b^82)), Library.KeySetRA.ksTop),
          Library.KeySetRA.ksTop))
        }
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.comp
[Debug] Rewriter.Symbol.reify func comp(a^108: Library.KeySetRA.T, b^81:
                                        Library.KeySetRA.T)
                                returns (ret^29: Library.KeySetRA.T)
        {
          ite(a^108 == Library.KeySetRA.id, b^81, ite(b^81 ==
          Library.KeySetRA.id, a^108, ite(a^108 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^108),
          Library.KeySetRA.ks_proj2(a^108)) && b^81 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(b^81),
          Library.KeySetRA.ks_proj2(b^81)),
          ite(Library.KeySetRA.valid(a^108) &&
          Library.KeySetRA.valid(b^81) && Library.KeySetRA.ks_proj1(a^108) **
          Library.KeySetRA.ks_proj1(b^81) == {||},
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^108) ++
          Library.KeySetRA.ks_proj1(b^81),
          Library.KeySetRA.ks_proj2(a^108) ++
          Library.KeySetRA.ks_proj2(b^81)), Library.KeySetRA.ksTop),
          Library.KeySetRA.ksTop)))
        }
[Debug] SymbolTbl.resolve_and_find: a^122
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^122
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.weak_frameCompInv.a^122
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^122
[Debug] Rewriter.Symbol.reify var a^122 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^91
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^91
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.weak_frameCompInv.b^91
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^91
[Debug] Rewriter.Symbol.reify var b^91 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^91
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^91
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.weak_frameCompInv.b^91
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^91
[Debug] Rewriter.Symbol.reify var b^91 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.valid
[Debug] Rewriter.Symbol.reify func valid(n^4: Library.KeySetRA.T)
                                returns (ret^28: Bool)
        {
          ite(n^4 == Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
          Library.KeySetRA.ks_proj2(n^4)),
          Library.KeySetRA.ks_proj2(n^4) subsetof
          Library.KeySetRA.ks_proj1(n^4), false)
        }
[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, KeySetRA, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, KeySetRA, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: KeySetRA, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: KeySetRA, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library.KeySetRA,
        Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: Library.KeySetRA.comp
[Debug] Rewriter.Symbol.reify func comp(a^108: Library.KeySetRA.T, b^81:
                                        Library.KeySetRA.T)
                                returns (ret^29: Library.KeySetRA.T)
        {
          ite(a^108 == Library.KeySetRA.id, b^81, ite(b^81 ==
          Library.KeySetRA.id, a^108, ite(a^108 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^108),
          Library.KeySetRA.ks_proj2(a^108)) && b^81 ==
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(b^81),
          Library.KeySetRA.ks_proj2(b^81)),
          ite(Library.KeySetRA.valid(a^108) &&
          Library.KeySetRA.valid(b^81) && Library.KeySetRA.ks_proj1(a^108) **
          Library.KeySetRA.ks_proj1(b^81) == {||},
          Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^108) ++
          Library.KeySetRA.ks_proj1(b^81),
          Library.KeySetRA.ks_proj2(a^108) ++
          Library.KeySetRA.ks_proj2(b^81)), Library.KeySetRA.ksTop),
          Library.KeySetRA.ksTop)))
        }
[Debug] SymbolTbl.resolve_and_find: a^122
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: a^122
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.weak_frameCompInv.a^122
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: a^122
[Debug] Rewriter.Symbol.reify var a^122 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: b^91
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: b^91
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.weak_frameCompInv.b^91
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] ident: b^91
[Debug] Rewriter.Symbol.reify var b^91 : T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] SymbolTbl.resolve_and_find: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.weak_frameCompInv
[Debug] Done with processing module KeySetRA
[Debug] Rewriter.set_symbol: symbol = KeySetRA
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA
[Debug] Done with processing module Library
[Debug] Rewriter.set_symbol: symbol = Type
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Type
[Debug] Rewriter.set_symbol: symbol = ResourceAlgebra
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra
[Debug] Rewriter.set_symbol: symbol = CancellativeResourceAlgebra
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra
[Debug] Rewriter.set_symbol: symbol = LatticeResourceAlgebra
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra
[Debug] Rewriter.set_symbol: symbol = Nat
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat
[Debug] Rewriter.set_symbol: symbol = Auth
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth
[Debug] Rewriter.set_symbol: symbol = Frac
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac
[Debug] Rewriter.set_symbol: symbol = SetRA
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA
[Debug] Rewriter.set_symbol: symbol = KeySetRA
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Type.T
[Debug] Rewriter.set_symbol: symbol = Type
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Type
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frame
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.valid
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = ResourceAlgebra
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuValid
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compFrameInv
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compValid
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compId
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compCommute
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compAssoc
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.idValid
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameReflexive
[Debug] Rewriter.set_symbol: symbol = CancellativeResourceAlgebra
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuValid
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compFrameInv
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compValid
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compId
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compCommute
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compAssoc
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.idValid
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameCompInv0
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv0
[Debug] Rewriter.set_symbol: symbol = frameCompInv2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv2
[Debug] Rewriter.set_symbol: symbol = frame_comp_inv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frame_comp_inv
[Debug] Rewriter.set_symbol: symbol = LatticeResourceAlgebra
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameReflexive
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = Nat
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat
[Debug] Rewriter.set_symbol: symbol = f_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.f_proj1
[Debug] Rewriter.set_symbol: symbol = frag
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frag
[Debug] Rewriter.set_symbol: symbol = af_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.af_proj1
[Debug] Rewriter.set_symbol: symbol = af_proj2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.af_proj2
[Debug] Rewriter.set_symbol: symbol = auth_frag
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.auth_frag
[Debug] Rewriter.set_symbol: symbol = top
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.top
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = Auth
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth
[Debug] Rewriter.set_symbol: symbol = frac_null
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_null
[Debug] Rewriter.set_symbol: symbol = frac_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_proj1
[Debug] Rewriter.set_symbol: symbol = frac_proj2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_proj2
[Debug] Rewriter.set_symbol: symbol = frac_chunk
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_chunk
[Debug] Rewriter.set_symbol: symbol = frac_top
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_top
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameReflexive
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = Frac
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac
[Debug] Rewriter.set_symbol: symbol = set_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.set_proj1
[Debug] Rewriter.set_symbol: symbol = set_constr
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.set_constr
[Debug] Rewriter.set_symbol: symbol = set_top
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.set_top
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameCompInv0
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameCompInv0
[Debug] Rewriter.set_symbol: symbol = frameCompInv2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameCompInv2
[Debug] Rewriter.set_symbol: symbol = frame_comp_inv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frame_comp_inv
[Debug] Rewriter.set_symbol: symbol = SetRA
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA
[Debug] Rewriter.set_symbol: symbol = ks_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ks_proj1
[Debug] Rewriter.set_symbol: symbol = ks_proj2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ks_proj2
[Debug] Rewriter.set_symbol: symbol = ksPair
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ksPair
[Debug] Rewriter.set_symbol: symbol = ksTop
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ksTop
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameReflexive
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = KeySetRA
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Type.T
[Debug] Rewriter.set_symbol: symbol = Type
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Type
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frame
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.valid
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = ResourceAlgebra
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuValid
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compFrameInv
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compValid
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compId
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compCommute
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compAssoc
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.idValid
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameReflexive
[Debug] Rewriter.set_symbol: symbol = CancellativeResourceAlgebra
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuValid
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compFrameInv
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compValid
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compId
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compCommute
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compAssoc
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.idValid
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameCompInv0
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv0
[Debug] Rewriter.set_symbol: symbol = frameCompInv2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv2
[Debug] Rewriter.set_symbol: symbol = frame_comp_inv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frame_comp_inv
[Debug] Rewriter.set_symbol: symbol = LatticeResourceAlgebra
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameReflexive
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = Nat
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat
[Debug] Rewriter.set_symbol: symbol = f_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.f_proj1
[Debug] Rewriter.set_symbol: symbol = frag
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frag
[Debug] Rewriter.set_symbol: symbol = af_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.af_proj1
[Debug] Rewriter.set_symbol: symbol = af_proj2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.af_proj2
[Debug] Rewriter.set_symbol: symbol = auth_frag
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.auth_frag
[Debug] Rewriter.set_symbol: symbol = top
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.top
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = Auth
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth
[Debug] Rewriter.set_symbol: symbol = frac_null
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_null
[Debug] Rewriter.set_symbol: symbol = frac_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_proj1
[Debug] Rewriter.set_symbol: symbol = frac_proj2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_proj2
[Debug] Rewriter.set_symbol: symbol = frac_chunk
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_chunk
[Debug] Rewriter.set_symbol: symbol = frac_top
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_top
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameReflexive
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = Frac
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac
[Debug] Rewriter.set_symbol: symbol = set_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.set_proj1
[Debug] Rewriter.set_symbol: symbol = set_constr
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.set_constr
[Debug] Rewriter.set_symbol: symbol = set_top
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.set_top
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameCompInv0
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameCompInv0
[Debug] Rewriter.set_symbol: symbol = frameCompInv2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameCompInv2
[Debug] Rewriter.set_symbol: symbol = frame_comp_inv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frame_comp_inv
[Debug] Rewriter.set_symbol: symbol = SetRA
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA
[Debug] Rewriter.set_symbol: symbol = ks_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ks_proj1
[Debug] Rewriter.set_symbol: symbol = ks_proj2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ks_proj2
[Debug] Rewriter.set_symbol: symbol = ksPair
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ksPair
[Debug] Rewriter.set_symbol: symbol = ksTop
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ksTop
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameReflexive
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = KeySetRA
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Type.T
[Debug] Rewriter.set_symbol: symbol = Type
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Type
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frame
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.valid
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = ResourceAlgebra
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuValid
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compFrameInv
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compValid
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compId
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compCommute
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compAssoc
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.idValid
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameReflexive
[Debug] Rewriter.set_symbol: symbol = CancellativeResourceAlgebra
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuValid
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compFrameInv
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compValid
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compId
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compCommute
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compAssoc
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.idValid
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameCompInv0
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv0
[Debug] Rewriter.set_symbol: symbol = frameCompInv2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv2
[Debug] Rewriter.set_symbol: symbol = frame_comp_inv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frame_comp_inv
[Debug] Rewriter.set_symbol: symbol = LatticeResourceAlgebra
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameReflexive
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = Nat
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat
[Debug] Rewriter.set_symbol: symbol = f_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.f_proj1
[Debug] Rewriter.set_symbol: symbol = frag
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frag
[Debug] Rewriter.set_symbol: symbol = af_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.af_proj1
[Debug] Rewriter.set_symbol: symbol = af_proj2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.af_proj2
[Debug] Rewriter.set_symbol: symbol = auth_frag
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.auth_frag
[Debug] Rewriter.set_symbol: symbol = top
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.top
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = Auth
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth
[Debug] Rewriter.set_symbol: symbol = frac_null
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_null
[Debug] Rewriter.set_symbol: symbol = frac_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_proj1
[Debug] Rewriter.set_symbol: symbol = frac_proj2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_proj2
[Debug] Rewriter.set_symbol: symbol = frac_chunk
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_chunk
[Debug] Rewriter.set_symbol: symbol = frac_top
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_top
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameReflexive
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = Frac
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac
[Debug] Rewriter.set_symbol: symbol = set_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.set_proj1
[Debug] Rewriter.set_symbol: symbol = set_constr
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.set_constr
[Debug] Rewriter.set_symbol: symbol = set_top
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.set_top
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameCompInv0
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameCompInv0
[Debug] Rewriter.set_symbol: symbol = frameCompInv2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameCompInv2
[Debug] Rewriter.set_symbol: symbol = frame_comp_inv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frame_comp_inv
[Debug] Rewriter.set_symbol: symbol = SetRA
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA
[Debug] Rewriter.set_symbol: symbol = ks_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ks_proj1
[Debug] Rewriter.set_symbol: symbol = ks_proj2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ks_proj2
[Debug] Rewriter.set_symbol: symbol = ksPair
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ksPair
[Debug] Rewriter.set_symbol: symbol = ksTop
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ksTop
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameReflexive
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = KeySetRA
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Type.T
[Debug] Rewriter.set_symbol: symbol = Type
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Type
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frame
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.valid
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = ResourceAlgebra
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuValid
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compFrameInv
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compValid
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compId
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compCommute
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compAssoc
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.idValid
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameReflexive
[Debug] Rewriter.set_symbol: symbol = CancellativeResourceAlgebra
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuValid
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compFrameInv
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compValid
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compId
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compCommute
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compAssoc
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.idValid
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameCompInv0
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv0
[Debug] Rewriter.set_symbol: symbol = frameCompInv2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv2
[Debug] Rewriter.set_symbol: symbol = frame_comp_inv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frame_comp_inv
[Debug] Rewriter.set_symbol: symbol = LatticeResourceAlgebra
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameReflexive
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = Nat
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat
[Debug] Rewriter.set_symbol: symbol = f_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.f_proj1
[Debug] Rewriter.set_symbol: symbol = frag
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frag
[Debug] Rewriter.set_symbol: symbol = af_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.af_proj1
[Debug] Rewriter.set_symbol: symbol = af_proj2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.af_proj2
[Debug] Rewriter.set_symbol: symbol = auth_frag
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.auth_frag
[Debug] Rewriter.set_symbol: symbol = top
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.top
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = Auth
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth
[Debug] Rewriter.set_symbol: symbol = frac_null
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_null
[Debug] Rewriter.set_symbol: symbol = frac_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_proj1
[Debug] Rewriter.set_symbol: symbol = frac_proj2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_proj2
[Debug] Rewriter.set_symbol: symbol = frac_chunk
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_chunk
[Debug] Rewriter.set_symbol: symbol = frac_top
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_top
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameReflexive
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = Frac
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac
[Debug] Rewriter.set_symbol: symbol = set_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.set_proj1
[Debug] Rewriter.set_symbol: symbol = set_constr
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.set_constr
[Debug] Rewriter.set_symbol: symbol = set_top
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.set_top
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameCompInv0
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameCompInv0
[Debug] Rewriter.set_symbol: symbol = frameCompInv2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameCompInv2
[Debug] Rewriter.set_symbol: symbol = frame_comp_inv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frame_comp_inv
[Debug] Rewriter.set_symbol: symbol = SetRA
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA
[Debug] Rewriter.set_symbol: symbol = ks_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ks_proj1
[Debug] Rewriter.set_symbol: symbol = ks_proj2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ks_proj2
[Debug] Rewriter.set_symbol: symbol = ksPair
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ksPair
[Debug] Rewriter.set_symbol: symbol = ksTop
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ksTop
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameReflexive
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = KeySetRA
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Type.T
[Debug] Rewriter.set_symbol: symbol = Type
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Type
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frame
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.valid
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = ResourceAlgebra
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuValid
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compFrameInv
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compValid
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compId
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compCommute
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compAssoc
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.idValid
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameReflexive
[Debug] Rewriter.set_symbol: symbol = CancellativeResourceAlgebra
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuValid
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compFrameInv
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compValid
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compId
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compCommute
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compAssoc
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.idValid
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameCompInv0
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv0
[Debug] Rewriter.set_symbol: symbol = frameCompInv2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv2
[Debug] Rewriter.set_symbol: symbol = frame_comp_inv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frame_comp_inv
[Debug] Rewriter.set_symbol: symbol = LatticeResourceAlgebra
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameReflexive
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = Nat
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat
[Debug] Rewriter.set_symbol: symbol = f_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.f_proj1
[Debug] Rewriter.set_symbol: symbol = frag
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frag
[Debug] Rewriter.set_symbol: symbol = af_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.af_proj1
[Debug] Rewriter.set_symbol: symbol = af_proj2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.af_proj2
[Debug] Rewriter.set_symbol: symbol = auth_frag
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.auth_frag
[Debug] Rewriter.set_symbol: symbol = top
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.top
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = Auth
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth
[Debug] Rewriter.set_symbol: symbol = frac_null
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_null
[Debug] Rewriter.set_symbol: symbol = frac_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_proj1
[Debug] Rewriter.set_symbol: symbol = frac_proj2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_proj2
[Debug] Rewriter.set_symbol: symbol = frac_chunk
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_chunk
[Debug] Rewriter.set_symbol: symbol = frac_top
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_top
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameReflexive
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = Frac
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac
[Debug] Rewriter.set_symbol: symbol = set_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.set_proj1
[Debug] Rewriter.set_symbol: symbol = set_constr
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.set_constr
[Debug] Rewriter.set_symbol: symbol = set_top
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.set_top
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameCompInv0
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameCompInv0
[Debug] Rewriter.set_symbol: symbol = frameCompInv2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameCompInv2
[Debug] Rewriter.set_symbol: symbol = frame_comp_inv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frame_comp_inv
[Debug] Rewriter.set_symbol: symbol = SetRA
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA
[Debug] Rewriter.set_symbol: symbol = ks_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ks_proj1
[Debug] Rewriter.set_symbol: symbol = ks_proj2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ks_proj2
[Debug] Rewriter.set_symbol: symbol = ksPair
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ksPair
[Debug] Rewriter.set_symbol: symbol = ksTop
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ksTop
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameReflexive
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = KeySetRA
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Type.T
[Debug] Rewriter.set_symbol: symbol = Type
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Type
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frame
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.valid
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = ResourceAlgebra
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuValid
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compFrameInv
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compValid
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compId
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compCommute
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compAssoc
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.idValid
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameReflexive
[Debug] Rewriter.set_symbol: symbol = CancellativeResourceAlgebra
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuValid
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compFrameInv
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compValid
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compId
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compCommute
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compAssoc
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.idValid
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameCompInv0
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv0
[Debug] Rewriter.set_symbol: symbol = frameCompInv2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv2
[Debug] Rewriter.set_symbol: symbol = frame_comp_inv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frame_comp_inv
[Debug] Rewriter.set_symbol: symbol = LatticeResourceAlgebra
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameReflexive
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = Nat
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat
[Debug] Rewriter.set_symbol: symbol = f_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.f_proj1
[Debug] Rewriter.set_symbol: symbol = frag
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frag
[Debug] Rewriter.set_symbol: symbol = af_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.af_proj1
[Debug] Rewriter.set_symbol: symbol = af_proj2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.af_proj2
[Debug] Rewriter.set_symbol: symbol = auth_frag
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.auth_frag
[Debug] Rewriter.set_symbol: symbol = top
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.top
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = Auth
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth
[Debug] Rewriter.set_symbol: symbol = frac_null
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_null
[Debug] Rewriter.set_symbol: symbol = frac_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_proj1
[Debug] Rewriter.set_symbol: symbol = frac_proj2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_proj2
[Debug] Rewriter.set_symbol: symbol = frac_chunk
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_chunk
[Debug] Rewriter.set_symbol: symbol = frac_top
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_top
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameReflexive
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = Frac
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac
[Debug] Rewriter.set_symbol: symbol = set_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.set_proj1
[Debug] Rewriter.set_symbol: symbol = set_constr
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.set_constr
[Debug] Rewriter.set_symbol: symbol = set_top
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.set_top
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameCompInv0
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameCompInv0
[Debug] Rewriter.set_symbol: symbol = frameCompInv2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameCompInv2
[Debug] Rewriter.set_symbol: symbol = frame_comp_inv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frame_comp_inv
[Debug] Rewriter.set_symbol: symbol = SetRA
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA
[Debug] Rewriter.set_symbol: symbol = ks_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ks_proj1
[Debug] Rewriter.set_symbol: symbol = ks_proj2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ks_proj2
[Debug] Rewriter.set_symbol: symbol = ksPair
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ksPair
[Debug] Rewriter.set_symbol: symbol = ksTop
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ksTop
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameReflexive
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = KeySetRA
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Type.T
[Debug] Rewriter.set_symbol: symbol = Type
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Type
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frame
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.valid
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = ResourceAlgebra
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuValid
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compFrameInv
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compValid
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compId
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compCommute
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compAssoc
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.idValid
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameReflexive
[Debug] Rewriter.set_symbol: symbol = CancellativeResourceAlgebra
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuValid
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compFrameInv
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compValid
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compId
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compCommute
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compAssoc
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.idValid
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameCompInv0
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv0
[Debug] Rewriter.set_symbol: symbol = frameCompInv2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv2
[Debug] Rewriter.set_symbol: symbol = frame_comp_inv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frame_comp_inv
[Debug] Rewriter.set_symbol: symbol = LatticeResourceAlgebra
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameReflexive
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = Nat
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat
[Debug] Rewriter.set_symbol: symbol = f_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.f_proj1
[Debug] Rewriter.set_symbol: symbol = frag
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frag
[Debug] Rewriter.set_symbol: symbol = af_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.af_proj1
[Debug] Rewriter.set_symbol: symbol = af_proj2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.af_proj2
[Debug] Rewriter.set_symbol: symbol = auth_frag
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.auth_frag
[Debug] Rewriter.set_symbol: symbol = top
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.top
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = Auth
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth
[Debug] Rewriter.set_symbol: symbol = frac_null
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_null
[Debug] Rewriter.set_symbol: symbol = frac_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_proj1
[Debug] Rewriter.set_symbol: symbol = frac_proj2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_proj2
[Debug] Rewriter.set_symbol: symbol = frac_chunk
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_chunk
[Debug] Rewriter.set_symbol: symbol = frac_top
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_top
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameReflexive
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = Frac
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac
[Debug] Rewriter.set_symbol: symbol = set_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.set_proj1
[Debug] Rewriter.set_symbol: symbol = set_constr
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.set_constr
[Debug] Rewriter.set_symbol: symbol = set_top
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.set_top
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameCompInv0
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameCompInv0
[Debug] Rewriter.set_symbol: symbol = frameCompInv2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameCompInv2
[Debug] Rewriter.set_symbol: symbol = frame_comp_inv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frame_comp_inv
[Debug] Rewriter.set_symbol: symbol = SetRA
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA
[Debug] Rewriter.set_symbol: symbol = ks_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ks_proj1
[Debug] Rewriter.set_symbol: symbol = ks_proj2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ks_proj2
[Debug] Rewriter.set_symbol: symbol = ksPair
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ksPair
[Debug] Rewriter.set_symbol: symbol = ksTop
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ksTop
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameReflexive
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = KeySetRA
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Type.T
[Debug] Rewriter.set_symbol: symbol = Type
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Type
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frame
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.valid
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = ResourceAlgebra
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuValid
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compFrameInv
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compValid
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compId
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compCommute
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compAssoc
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.idValid
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameReflexive
[Debug] Rewriter.set_symbol: symbol = CancellativeResourceAlgebra
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuValid
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compFrameInv
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compValid
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compId
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compCommute
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compAssoc
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.idValid
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameCompInv0
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv0
[Debug] Rewriter.set_symbol: symbol = frameCompInv2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv2
[Debug] Rewriter.set_symbol: symbol = frame_comp_inv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frame_comp_inv
[Debug] Rewriter.set_symbol: symbol = LatticeResourceAlgebra
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameReflexive
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = Nat
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat
[Debug] Rewriter.set_symbol: symbol = f_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.f_proj1
[Debug] Rewriter.set_symbol: symbol = frag
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frag
[Debug] Rewriter.set_symbol: symbol = af_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.af_proj1
[Debug] Rewriter.set_symbol: symbol = af_proj2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.af_proj2
[Debug] Rewriter.set_symbol: symbol = auth_frag
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.auth_frag
[Debug] Rewriter.set_symbol: symbol = top
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.top
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = Auth
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth
[Debug] Rewriter.set_symbol: symbol = frac_null
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_null
[Debug] Rewriter.set_symbol: symbol = frac_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_proj1
[Debug] Rewriter.set_symbol: symbol = frac_proj2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_proj2
[Debug] Rewriter.set_symbol: symbol = frac_chunk
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_chunk
[Debug] Rewriter.set_symbol: symbol = frac_top
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_top
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameReflexive
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = Frac
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac
[Debug] Rewriter.set_symbol: symbol = set_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.set_proj1
[Debug] Rewriter.set_symbol: symbol = set_constr
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.set_constr
[Debug] Rewriter.set_symbol: symbol = set_top
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.set_top
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameCompInv0
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameCompInv0
[Debug] Rewriter.set_symbol: symbol = frameCompInv2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameCompInv2
[Debug] Rewriter.set_symbol: symbol = frame_comp_inv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frame_comp_inv
[Debug] Rewriter.set_symbol: symbol = SetRA
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA
[Debug] Rewriter.set_symbol: symbol = ks_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ks_proj1
[Debug] Rewriter.set_symbol: symbol = ks_proj2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ks_proj2
[Debug] Rewriter.set_symbol: symbol = ksPair
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ksPair
[Debug] Rewriter.set_symbol: symbol = ksTop
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ksTop
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameReflexive
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = KeySetRA
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Type.T
[Debug] Rewriter.set_symbol: symbol = Type
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Type
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frame
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.valid
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = ResourceAlgebra
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuValid
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compFrameInv
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compValid
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compId
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compCommute
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compAssoc
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.idValid
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameReflexive
[Debug] Rewriter.set_symbol: symbol = CancellativeResourceAlgebra
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuValid
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compFrameInv
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compValid
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compId
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compCommute
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compAssoc
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.idValid
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameCompInv0
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv0
[Debug] Rewriter.set_symbol: symbol = frameCompInv2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv2
[Debug] Rewriter.set_symbol: symbol = frame_comp_inv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frame_comp_inv
[Debug] Rewriter.set_symbol: symbol = LatticeResourceAlgebra
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameReflexive
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = Nat
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat
[Debug] Rewriter.set_symbol: symbol = f_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.f_proj1
[Debug] Rewriter.set_symbol: symbol = frag
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frag
[Debug] Rewriter.set_symbol: symbol = af_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.af_proj1
[Debug] Rewriter.set_symbol: symbol = af_proj2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.af_proj2
[Debug] Rewriter.set_symbol: symbol = auth_frag
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.auth_frag
[Debug] Rewriter.set_symbol: symbol = top
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.top
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = Auth
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth
[Debug] Rewriter.set_symbol: symbol = frac_null
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_null
[Debug] Rewriter.set_symbol: symbol = frac_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_proj1
[Debug] Rewriter.set_symbol: symbol = frac_proj2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_proj2
[Debug] Rewriter.set_symbol: symbol = frac_chunk
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_chunk
[Debug] Rewriter.set_symbol: symbol = frac_top
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_top
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameReflexive
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = Frac
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac
[Debug] Rewriter.set_symbol: symbol = set_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.set_proj1
[Debug] Rewriter.set_symbol: symbol = set_constr
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.set_constr
[Debug] Rewriter.set_symbol: symbol = set_top
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.set_top
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameCompInv0
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameCompInv0
[Debug] Rewriter.set_symbol: symbol = frameCompInv2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameCompInv2
[Debug] Rewriter.set_symbol: symbol = frame_comp_inv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frame_comp_inv
[Debug] Rewriter.set_symbol: symbol = SetRA
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA
[Debug] Rewriter.set_symbol: symbol = ks_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ks_proj1
[Debug] Rewriter.set_symbol: symbol = ks_proj2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ks_proj2
[Debug] Rewriter.set_symbol: symbol = ksPair
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ksPair
[Debug] Rewriter.set_symbol: symbol = ksTop
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ksTop
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameReflexive
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = KeySetRA
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Type.T
[Debug] Rewriter.set_symbol: symbol = Type
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Type
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frame
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.valid
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = ResourceAlgebra
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuValid
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compFrameInv
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compValid
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compId
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compCommute
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compAssoc
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.idValid
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameReflexive
[Debug] Rewriter.set_symbol: symbol = CancellativeResourceAlgebra
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuValid
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compFrameInv
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compValid
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compId
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compCommute
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compAssoc
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.idValid
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameCompInv0
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv0
[Debug] Rewriter.set_symbol: symbol = frameCompInv2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv2
[Debug] Rewriter.set_symbol: symbol = frame_comp_inv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frame_comp_inv
[Debug] Rewriter.set_symbol: symbol = LatticeResourceAlgebra
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameReflexive
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = Nat
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat
[Debug] Rewriter.set_symbol: symbol = f_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.f_proj1
[Debug] Rewriter.set_symbol: symbol = frag
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frag
[Debug] Rewriter.set_symbol: symbol = af_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.af_proj1
[Debug] Rewriter.set_symbol: symbol = af_proj2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.af_proj2
[Debug] Rewriter.set_symbol: symbol = auth_frag
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.auth_frag
[Debug] Rewriter.set_symbol: symbol = top
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.top
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = Auth
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth
[Debug] Rewriter.set_symbol: symbol = frac_null
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_null
[Debug] Rewriter.set_symbol: symbol = frac_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_proj1
[Debug] Rewriter.set_symbol: symbol = frac_proj2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_proj2
[Debug] Rewriter.set_symbol: symbol = frac_chunk
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_chunk
[Debug] Rewriter.set_symbol: symbol = frac_top
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_top
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameReflexive
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = Frac
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac
[Debug] Rewriter.set_symbol: symbol = set_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.set_proj1
[Debug] Rewriter.set_symbol: symbol = set_constr
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.set_constr
[Debug] Rewriter.set_symbol: symbol = set_top
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.set_top
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameCompInv0
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameCompInv0
[Debug] Rewriter.set_symbol: symbol = frameCompInv2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameCompInv2
[Debug] Rewriter.set_symbol: symbol = frame_comp_inv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frame_comp_inv
[Debug] Rewriter.set_symbol: symbol = SetRA
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA
[Debug] Rewriter.set_symbol: symbol = ks_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ks_proj1
[Debug] Rewriter.set_symbol: symbol = ks_proj2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ks_proj2
[Debug] Rewriter.set_symbol: symbol = ksPair
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ksPair
[Debug] Rewriter.set_symbol: symbol = ksTop
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ksTop
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameReflexive
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = KeySetRA
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Type.T
[Debug] Rewriter.set_symbol: symbol = Type
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Type
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frame
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.valid
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = ResourceAlgebra
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuValid
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compFrameInv
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compValid
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compId
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compCommute
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compAssoc
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.idValid
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameReflexive
[Debug] Rewriter.set_symbol: symbol = CancellativeResourceAlgebra
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuValid
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compFrameInv
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compValid
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compId
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compCommute
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compAssoc
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.idValid
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameCompInv0
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv0
[Debug] Rewriter.set_symbol: symbol = frameCompInv2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv2
[Debug] Rewriter.set_symbol: symbol = frame_comp_inv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frame_comp_inv
[Debug] Rewriter.set_symbol: symbol = LatticeResourceAlgebra
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameReflexive
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = Nat
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat
[Debug] Rewriter.set_symbol: symbol = f_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.f_proj1
[Debug] Rewriter.set_symbol: symbol = frag
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frag
[Debug] Rewriter.set_symbol: symbol = af_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.af_proj1
[Debug] Rewriter.set_symbol: symbol = af_proj2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.af_proj2
[Debug] Rewriter.set_symbol: symbol = auth_frag
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.auth_frag
[Debug] Rewriter.set_symbol: symbol = top
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.top
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = Auth
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth
[Debug] Rewriter.set_symbol: symbol = frac_null
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_null
[Debug] Rewriter.set_symbol: symbol = frac_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_proj1
[Debug] Rewriter.set_symbol: symbol = frac_proj2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_proj2
[Debug] Rewriter.set_symbol: symbol = frac_chunk
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_chunk
[Debug] Rewriter.set_symbol: symbol = frac_top
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_top
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameReflexive
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = Frac
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac
[Debug] Rewriter.set_symbol: symbol = set_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.set_proj1
[Debug] Rewriter.set_symbol: symbol = set_constr
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.set_constr
[Debug] Rewriter.set_symbol: symbol = set_top
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.set_top
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameCompInv0
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameCompInv0
[Debug] Rewriter.set_symbol: symbol = frameCompInv2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameCompInv2
[Debug] Rewriter.set_symbol: symbol = frame_comp_inv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frame_comp_inv
[Debug] Rewriter.set_symbol: symbol = SetRA
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA
[Debug] Rewriter.set_symbol: symbol = ks_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ks_proj1
[Debug] Rewriter.set_symbol: symbol = ks_proj2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ks_proj2
[Debug] Rewriter.set_symbol: symbol = ksPair
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ksPair
[Debug] Rewriter.set_symbol: symbol = ksTop
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ksTop
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameReflexive
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = KeySetRA
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Type.T
[Debug] Rewriter.set_symbol: symbol = Type
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Type
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frame
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.valid
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = ResourceAlgebra
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.ResourceAlgebra
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuValid
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compFrameInv
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compValid
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compId
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compCommute
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.compAssoc
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.idValid
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra.frameReflexive
[Debug] Rewriter.set_symbol: symbol = CancellativeResourceAlgebra
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.CancellativeResourceAlgebra
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuValid
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compFrameInv
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compValid
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compId
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compCommute
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.compAssoc
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.idValid
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.id
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameCompInv0
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv0
[Debug] Rewriter.set_symbol: symbol = frameCompInv2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frameCompInv2
[Debug] Rewriter.set_symbol: symbol = frame_comp_inv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra.frame_comp_inv
[Debug] Rewriter.set_symbol: symbol = LatticeResourceAlgebra
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.LatticeResourceAlgebra
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameReflexive
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = Nat
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Nat
[Debug] Rewriter.set_symbol: symbol = f_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.f_proj1
[Debug] Rewriter.set_symbol: symbol = frag
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frag
[Debug] Rewriter.set_symbol: symbol = af_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.af_proj1
[Debug] Rewriter.set_symbol: symbol = af_proj2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.af_proj2
[Debug] Rewriter.set_symbol: symbol = auth_frag
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.auth_frag
[Debug] Rewriter.set_symbol: symbol = top
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.top
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = Auth
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Auth
[Debug] Rewriter.set_symbol: symbol = frac_null
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_null
[Debug] Rewriter.set_symbol: symbol = frac_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_proj1
[Debug] Rewriter.set_symbol: symbol = frac_proj2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_proj2
[Debug] Rewriter.set_symbol: symbol = frac_chunk
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_chunk
[Debug] Rewriter.set_symbol: symbol = frac_top
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frac_top
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameReflexive
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = Frac
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.Frac
[Debug] Rewriter.set_symbol: symbol = set_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.set_proj1
[Debug] Rewriter.set_symbol: symbol = set_constr
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.set_constr
[Debug] Rewriter.set_symbol: symbol = set_top
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.set_top
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameCompInv0
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameCompInv0
[Debug] Rewriter.set_symbol: symbol = frameCompInv2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frameCompInv2
[Debug] Rewriter.set_symbol: symbol = frame_comp_inv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA.frame_comp_inv
[Debug] Rewriter.set_symbol: symbol = SetRA
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.SetRA
[Debug] Rewriter.set_symbol: symbol = ks_proj1
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ks_proj1
[Debug] Rewriter.set_symbol: symbol = ks_proj2
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ks_proj2
[Debug] Rewriter.set_symbol: symbol = ksPair
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ksPair
[Debug] Rewriter.set_symbol: symbol = ksTop
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.ksTop
[Debug] Rewriter.set_symbol: symbol = T
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.T
[Debug] Rewriter.set_symbol: symbol = id
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.id
[Debug] Rewriter.set_symbol: symbol = valid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.valid
[Debug] Rewriter.set_symbol: symbol = comp
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.comp
[Debug] Rewriter.set_symbol: symbol = frame
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frame
[Debug] Rewriter.set_symbol: symbol = fpuAllowed
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.fpuAllowed
[Debug] Rewriter.set_symbol: symbol = frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameCompInv
[Debug] Rewriter.set_symbol: symbol = frameReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameReflexive
[Debug] Rewriter.set_symbol: symbol = idValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.idValid
[Debug] Rewriter.set_symbol: symbol = compAssoc
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compAssoc
[Debug] Rewriter.set_symbol: symbol = compCommute
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compCommute
[Debug] Rewriter.set_symbol: symbol = compId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compId
[Debug] Rewriter.set_symbol: symbol = compValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compValid
[Debug] Rewriter.set_symbol: symbol = frameId
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameId
[Debug] Rewriter.set_symbol: symbol = compFrameInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.compFrameInv
[Debug] Rewriter.set_symbol: symbol = fpuValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.fpuValid
[Debug] Rewriter.set_symbol: symbol = fpuReflexive
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.fpuReflexive
[Debug] Rewriter.set_symbol: symbol = frameValid
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.frameValid
[Debug] Rewriter.set_symbol: symbol = weak_frameCompInv
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA.weak_frameCompInv
[Debug] Rewriter.set_symbol: symbol = KeySetRA
[Debug] SymbolTbl.set_symbol: symbol_qual_ident: Library.KeySetRA
[Debug] module Library
        {
          interface Type
          {
            rep type T
          }
          
          interface ResourceAlgebra
          {
            rep type T
            
            val id : Library.ResourceAlgebra.T
            
            func comp(a: Library.ResourceAlgebra.T, b:
                      Library.ResourceAlgebra.T)
              returns (ret: Library.ResourceAlgebra.T)
            
            
            func frame(a^1: Library.ResourceAlgebra.T, b^1:
                       Library.ResourceAlgebra.T)
              returns (ret^1: Library.ResourceAlgebra.T)
            
            
            func valid(a^2: Library.ResourceAlgebra.T)
              returns (ret^2: Bool)
            
            
            func fpuAllowed(a^3: Library.ResourceAlgebra.T, b^2:
                            Library.ResourceAlgebra.T)
              returns (ret^3: Bool)
            
            
            lemma idValid()
              ensures Library.ResourceAlgebra.valid(Library.ResourceAlgebra.id)
            
            
            lemma compAssoc()
              ensures forall a^4: Library.ResourceAlgebra.T, b^3:
              Library.ResourceAlgebra.T, c: Library.ResourceAlgebra.T ::
              Library.ResourceAlgebra.comp(Library.ResourceAlgebra.comp(a^4,
              b^3), c) == Library.ResourceAlgebra.comp(a^4,
              Library.ResourceAlgebra.comp(b^3, c))
            
            
            lemma compCommute()
              ensures forall a^5: Library.ResourceAlgebra.T, b^4:
              Library.ResourceAlgebra.T :: Library.ResourceAlgebra.comp(a^5,
              b^4) == Library.ResourceAlgebra.comp(b^4, a^5)
            
            
            lemma compId()
              ensures forall a^6: Library.ResourceAlgebra.T ::
              Library.ResourceAlgebra.comp(a^6,
              Library.ResourceAlgebra.id) == a^6
            
            
            lemma compValid()
              ensures forall a^7: Library.ResourceAlgebra.T, b^5:
              Library.ResourceAlgebra.T ::
              Library.ResourceAlgebra.valid(Library.ResourceAlgebra.comp(a^7,
              b^5)) ==> Library.ResourceAlgebra.valid(a^7) &&
              Library.ResourceAlgebra.valid(b^5)
            
            
            lemma frameId()
              ensures forall a^8: Library.ResourceAlgebra.T ::
              Library.ResourceAlgebra.frame(a^8,
              Library.ResourceAlgebra.id) == a^8
            
            
            lemma compFrameInv()
              ensures forall a^9: Library.ResourceAlgebra.T, b^6:
              Library.ResourceAlgebra.T ::
              Library.ResourceAlgebra.valid(Library.ResourceAlgebra.frame(a^9,
              b^6)) ==>
              Library.ResourceAlgebra.comp(Library.ResourceAlgebra.frame(a^9,
              b^6), b^6) == a^9
            
            
            lemma fpuValid()
              ensures forall a^10: Library.ResourceAlgebra.T, b^7:
              Library.ResourceAlgebra.T, c^1: Library.ResourceAlgebra.T ::
              Library.ResourceAlgebra.fpuAllowed(a^10, b^7) &&
              Library.ResourceAlgebra.valid(a^10) &&
              Library.ResourceAlgebra.valid(Library.ResourceAlgebra.comp(a^10,
              c^1)) ==>
              Library.ResourceAlgebra.valid(Library.ResourceAlgebra.comp(b^7,
              c^1))
            
            
            lemma fpuReflexive()
              ensures forall a^11: Library.ResourceAlgebra.T ::
              Library.ResourceAlgebra.valid(a^11) ==>
              Library.ResourceAlgebra.fpuAllowed(a^11, a^11)
            
            
            lemma frameValid()
              ensures forall a^12: Library.ResourceAlgebra.T, b^8:
              Library.ResourceAlgebra.T ::
              Library.ResourceAlgebra.valid(Library.ResourceAlgebra.frame(a^12,
              b^8)) ==> Library.ResourceAlgebra.valid(a^12) &&
              Library.ResourceAlgebra.valid(b^8)
            
            
            lemma weak_frameCompInv()
              ensures forall a^13: Library.ResourceAlgebra.T, b^9:
              Library.ResourceAlgebra.T ::
              Library.ResourceAlgebra.valid(Library.ResourceAlgebra.comp(a^13,
              b^9)) ==>
              Library.ResourceAlgebra.valid(Library.ResourceAlgebra.frame(Library.ResourceAlgebra.comp(a^13,
              b^9), b^9))
            
          }
          
          interface CancellativeResourceAlgebra : Library.ResourceAlgebra
          {
            lemma weak_frameCompInv()
              ensures forall a^14: Library.CancellativeResourceAlgebra.T,
              b^10: Library.CancellativeResourceAlgebra.T ::
              Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.comp(a^14,
              b^10)) ==>
              Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.frame(Library.CancellativeResourceAlgebra.comp(a^14,
              b^10), b^10))
            
            
            lemma frameValid()
              ensures forall a^15: Library.CancellativeResourceAlgebra.T,
              b^11: Library.CancellativeResourceAlgebra.T ::
              Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.frame(a^15,
              b^11)) ==> Library.CancellativeResourceAlgebra.valid(a^15) &&
              Library.CancellativeResourceAlgebra.valid(b^11)
            
            
            lemma fpuReflexive()
              ensures forall a^16: Library.CancellativeResourceAlgebra.T ::
              Library.CancellativeResourceAlgebra.valid(a^16) ==>
              Library.CancellativeResourceAlgebra.fpuAllowed(a^16, a^16)
            
            
            lemma fpuValid()
              ensures forall a^17: Library.CancellativeResourceAlgebra.T,
              b^12: Library.CancellativeResourceAlgebra.T, c^2:
              Library.CancellativeResourceAlgebra.T ::
              Library.CancellativeResourceAlgebra.fpuAllowed(a^17, b^12) &&
              Library.CancellativeResourceAlgebra.valid(a^17) &&
              Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.comp(a^17,
              c^2)) ==>
              Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.comp(b^12,
              c^2))
            
            
            lemma compFrameInv()
              ensures forall a^18: Library.CancellativeResourceAlgebra.T,
              b^13: Library.CancellativeResourceAlgebra.T ::
              Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.frame(a^18,
              b^13)) ==>
              Library.CancellativeResourceAlgebra.comp(Library.CancellativeResourceAlgebra.frame(a^18,
              b^13), b^13) == a^18
            
            
            lemma frameId()
              ensures forall a^19: Library.CancellativeResourceAlgebra.T ::
              Library.CancellativeResourceAlgebra.frame(a^19,
              Library.CancellativeResourceAlgebra.id) == a^19
            
            
            lemma compValid()
              ensures forall a^20: Library.CancellativeResourceAlgebra.T,
              b^14: Library.CancellativeResourceAlgebra.T ::
              Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.comp(a^20,
              b^14)) ==> Library.CancellativeResourceAlgebra.valid(a^20) &&
              Library.CancellativeResourceAlgebra.valid(b^14)
            
            
            lemma compId()
              ensures forall a^21: Library.CancellativeResourceAlgebra.T ::
              Library.CancellativeResourceAlgebra.comp(a^21,
              Library.CancellativeResourceAlgebra.id) == a^21
            
            
            lemma compCommute()
              ensures forall a^22: Library.CancellativeResourceAlgebra.T,
              b^15: Library.CancellativeResourceAlgebra.T ::
              Library.CancellativeResourceAlgebra.comp(a^22, b^15) ==
              Library.CancellativeResourceAlgebra.comp(b^15, a^22)
            
            
            lemma compAssoc()
              ensures forall a^23: Library.CancellativeResourceAlgebra.T,
              b^16: Library.CancellativeResourceAlgebra.T, c^3:
              Library.CancellativeResourceAlgebra.T ::
              Library.CancellativeResourceAlgebra.comp(Library.CancellativeResourceAlgebra.comp(a^23,
              b^16), c^3) == Library.CancellativeResourceAlgebra.comp(a^23,
              Library.CancellativeResourceAlgebra.comp(b^16, c^3))
            
            
            lemma idValid()
              ensures Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.id)
            
            
            func fpuAllowed(a^24: Library.CancellativeResourceAlgebra.T,
                            b^17: Library.CancellativeResourceAlgebra.T)
              returns (ret^4: Bool)
            
            
            func valid(a^25: Library.CancellativeResourceAlgebra.T)
              returns (ret^5: Bool)
            
            
            func frame(a^26: Library.CancellativeResourceAlgebra.T, b^18:
                       Library.CancellativeResourceAlgebra.T)
              returns (ret^6: Library.CancellativeResourceAlgebra.T)
            
            
            func comp(a^27: Library.CancellativeResourceAlgebra.T, b^19:
                      Library.CancellativeResourceAlgebra.T)
              returns (ret^7: Library.CancellativeResourceAlgebra.T)
            
            
            val id : Library.CancellativeResourceAlgebra.T
            
            rep type T
            
            lemma frameCompInv()
              ensures forall a^28: Library.CancellativeResourceAlgebra.T,
              b^20: Library.CancellativeResourceAlgebra.T ::
              Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.comp(a^28,
              b^20)) ==>
              Library.CancellativeResourceAlgebra.frame(Library.CancellativeResourceAlgebra.comp(a^28,
              b^20), b^20) == a^28
            
            
            lemma frameReflexive()
              ensures forall a^29: Library.CancellativeResourceAlgebra.T ::
              Library.CancellativeResourceAlgebra.valid(a^29) ==>
              Library.CancellativeResourceAlgebra.frame(a^29, a^29) ==
              Library.CancellativeResourceAlgebra.id
            
          }
          
          interface LatticeResourceAlgebra : Library.ResourceAlgebra
          {
            lemma weak_frameCompInv()
              ensures forall a^30: Library.LatticeResourceAlgebra.T, b^21:
              Library.LatticeResourceAlgebra.T ::
              Library.LatticeResourceAlgebra.valid(Library.LatticeResourceAlgebra.comp(a^30,
              b^21)) ==>
              Library.LatticeResourceAlgebra.valid(Library.LatticeResourceAlgebra.frame(Library.LatticeResourceAlgebra.comp(a^30,
              b^21), b^21))
            
            
            lemma frameValid()
              ensures forall a^31: Library.LatticeResourceAlgebra.T, b^22:
              Library.LatticeResourceAlgebra.T ::
              Library.LatticeResourceAlgebra.valid(Library.LatticeResourceAlgebra.frame(a^31,
              b^22)) ==> Library.LatticeResourceAlgebra.valid(a^31) &&
              Library.LatticeResourceAlgebra.valid(b^22)
            
            
            lemma fpuReflexive()
              ensures forall a^32: Library.LatticeResourceAlgebra.T ::
              Library.LatticeResourceAlgebra.valid(a^32) ==>
              Library.LatticeResourceAlgebra.fpuAllowed(a^32, a^32)
            
            
            lemma fpuValid()
              ensures forall a^33: Library.LatticeResourceAlgebra.T, b^23:
              Library.LatticeResourceAlgebra.T, c^4:
              Library.LatticeResourceAlgebra.T ::
              Library.LatticeResourceAlgebra.fpuAllowed(a^33, b^23) &&
              Library.LatticeResourceAlgebra.valid(a^33) &&
              Library.LatticeResourceAlgebra.valid(Library.LatticeResourceAlgebra.comp(a^33,
              c^4)) ==>
              Library.LatticeResourceAlgebra.valid(Library.LatticeResourceAlgebra.comp(b^23,
              c^4))
            
            
            lemma compFrameInv()
              ensures forall a^34: Library.LatticeResourceAlgebra.T, b^24:
              Library.LatticeResourceAlgebra.T ::
              Library.LatticeResourceAlgebra.valid(Library.LatticeResourceAlgebra.frame(a^34,
              b^24)) ==>
              Library.LatticeResourceAlgebra.comp(Library.LatticeResourceAlgebra.frame(a^34,
              b^24), b^24) == a^34
            
            
            lemma frameId()
              ensures forall a^35: Library.LatticeResourceAlgebra.T ::
              Library.LatticeResourceAlgebra.frame(a^35,
              Library.LatticeResourceAlgebra.id) == a^35
            
            
            lemma compValid()
              ensures forall a^36: Library.LatticeResourceAlgebra.T, b^25:
              Library.LatticeResourceAlgebra.T ::
              Library.LatticeResourceAlgebra.valid(Library.LatticeResourceAlgebra.comp(a^36,
              b^25)) ==> Library.LatticeResourceAlgebra.valid(a^36) &&
              Library.LatticeResourceAlgebra.valid(b^25)
            
            
            lemma compId()
              ensures forall a^37: Library.LatticeResourceAlgebra.T ::
              Library.LatticeResourceAlgebra.comp(a^37,
              Library.LatticeResourceAlgebra.id) == a^37
            
            
            lemma compCommute()
              ensures forall a^38: Library.LatticeResourceAlgebra.T, b^26:
              Library.LatticeResourceAlgebra.T ::
              Library.LatticeResourceAlgebra.comp(a^38, b^26) ==
              Library.LatticeResourceAlgebra.comp(b^26, a^38)
            
            
            lemma compAssoc()
              ensures forall a^39: Library.LatticeResourceAlgebra.T, b^27:
              Library.LatticeResourceAlgebra.T, c^5:
              Library.LatticeResourceAlgebra.T ::
              Library.LatticeResourceAlgebra.comp(Library.LatticeResourceAlgebra.comp(a^39,
              b^27), c^5) == Library.LatticeResourceAlgebra.comp(a^39,
              Library.LatticeResourceAlgebra.comp(b^27, c^5))
            
            
            lemma idValid()
              ensures Library.LatticeResourceAlgebra.valid(Library.LatticeResourceAlgebra.id)
            
            
            func fpuAllowed(a^40: Library.LatticeResourceAlgebra.T, b^28:
                            Library.LatticeResourceAlgebra.T)
              returns (ret^8: Bool)
            
            
            func valid(a^41: Library.LatticeResourceAlgebra.T)
              returns (ret^9: Bool)
            
            
            func frame(a^42: Library.LatticeResourceAlgebra.T, b^29:
                       Library.LatticeResourceAlgebra.T)
              returns (ret^10: Library.LatticeResourceAlgebra.T)
            
            
            func comp(a^43: Library.LatticeResourceAlgebra.T, b^30:
                      Library.LatticeResourceAlgebra.T)
              returns (ret^11: Library.LatticeResourceAlgebra.T)
            
            
            val id : Library.LatticeResourceAlgebra.T
            
            rep type T
            
            lemma frameCompInv()
              ensures forall a^44: Library.LatticeResourceAlgebra.T, b^31:
              Library.LatticeResourceAlgebra.T ::
              Library.LatticeResourceAlgebra.valid(Library.LatticeResourceAlgebra.frame(a^44,
              b^31)) ==> Library.LatticeResourceAlgebra.frame(a^44, b^31) ==
              a^44
            
            
            lemma frameCompInv0()
              ensures forall a^45: Library.LatticeResourceAlgebra.T, b^32:
              Library.LatticeResourceAlgebra.T ::
              Library.LatticeResourceAlgebra.valid(Library.LatticeResourceAlgebra.comp(a^45,
              b^32)) ==>
              Library.LatticeResourceAlgebra.frame(Library.LatticeResourceAlgebra.comp(a^45,
              b^32), b^32) == Library.LatticeResourceAlgebra.comp(a^45, b^32)
            
            
            lemma frameCompInv2()
              ensures forall a^46: Library.LatticeResourceAlgebra.T, b^33:
              Library.LatticeResourceAlgebra.T ::
              Library.LatticeResourceAlgebra.comp(a^46, b^33) == a^46 &&
              Library.LatticeResourceAlgebra.valid(a^46) ==>
              Library.LatticeResourceAlgebra.frame(a^46, b^33) == a^46
            
            
            lemma frame_comp_inv()
              ensures forall a^47: Library.LatticeResourceAlgebra.T, b^34:
              Library.LatticeResourceAlgebra.T, c^6:
              Library.LatticeResourceAlgebra.T ::
              Library.LatticeResourceAlgebra.frame(a^47,
              Library.LatticeResourceAlgebra.comp(b^34, c^6)) ==
              Library.LatticeResourceAlgebra.frame(Library.LatticeResourceAlgebra.frame(a^47,
              b^34), c^6)
            
          }
          
          module Nat : Library.CancellativeResourceAlgebra
          {
            rep type T = Int
            
            val id : Library.Nat.T = 0
            
            func valid(n: Library.Nat.T)
              returns (ret^12: Bool)
            {
              n >= 0
            }
            
            func comp(a^48: Library.Nat.T, b^35: Library.Nat.T)
              returns (ret^13: Library.Nat.T)
            {
              ite(a^48 == Library.Nat.id, b^35, ite(b^35 == Library.Nat.id,
              a^48, ite(Library.Nat.valid(a^48) && Library.Nat.valid(b^35),
              a^48 + b^35, -(1))))
            }
            
            func frame(a^49: Library.Nat.T, b^36: Library.Nat.T)
              returns (ret^14: Library.Nat.T)
            {
              ite(b^36 == Library.Nat.id, a^49,
              ite(Library.Nat.valid(a^49) && Library.Nat.valid(b^36), a^49 -
              b^36, -(1)))
            }
            
            func fpuAllowed(a^50: Library.Nat.T, b^37: Library.Nat.T)
              returns (ret^15: Bool)
            {
              forall c^7: Library.Nat.T :: Library.Nat.valid(a^50) &&
              Library.Nat.valid(Library.Nat.comp(a^50, c^7)) ==>
              Library.Nat.valid(Library.Nat.comp(b^37, c^7))
            }
            
            lemma frameCompInv()
              ensures forall a^51: Library.Nat.T, b^38: Library.Nat.T ::
              Library.Nat.valid(Library.Nat.comp(a^51, b^38)) ==>
              Library.Nat.frame(Library.Nat.comp(a^51, b^38), b^38) == a^51
             { }
            
            lemma frameReflexive()
              ensures forall a^52: Library.Nat.T ::
              Library.Nat.valid(a^52) ==> Library.Nat.frame(a^52, a^52) ==
              Library.Nat.id
             { }
            
            lemma idValid()
              ensures Library.Nat.valid(Library.Nat.id)
             { }
            
            lemma compAssoc()
              ensures forall a^53: Library.Nat.T, b^39: Library.Nat.T, c^8:
              Library.Nat.T :: Library.Nat.comp(Library.Nat.comp(a^53, b^39),
              c^8) == Library.Nat.comp(a^53, Library.Nat.comp(b^39, c^8))
             { }
            
            lemma compCommute()
              ensures forall a^54: Library.Nat.T, b^40: Library.Nat.T ::
              Library.Nat.comp(a^54, b^40) == Library.Nat.comp(b^40, a^54)
             { }
            
            lemma compId()
              ensures forall a^55: Library.Nat.T :: Library.Nat.comp(a^55,
              Library.Nat.id) == a^55
             { }
            
            lemma compValid()
              ensures forall a^56: Library.Nat.T, b^41: Library.Nat.T ::
              Library.Nat.valid(Library.Nat.comp(a^56, b^41)) ==>
              Library.Nat.valid(a^56) && Library.Nat.valid(b^41)
             { }
            
            lemma frameId()
              ensures forall a^57: Library.Nat.T :: Library.Nat.frame(a^57,
              Library.Nat.id) == a^57
             { }
            
            lemma compFrameInv()
              ensures forall a^58: Library.Nat.T, b^42: Library.Nat.T ::
              Library.Nat.valid(Library.Nat.frame(a^58, b^42)) ==>
              Library.Nat.comp(Library.Nat.frame(a^58, b^42), b^42) == a^58
             { }
            
            lemma fpuValid()
              ensures forall a^59: Library.Nat.T, b^43: Library.Nat.T, c^9:
              Library.Nat.T :: Library.Nat.fpuAllowed(a^59, b^43) &&
              Library.Nat.valid(a^59) &&
              Library.Nat.valid(Library.Nat.comp(a^59, c^9)) ==>
              Library.Nat.valid(Library.Nat.comp(b^43, c^9))
             { }
            
            lemma fpuReflexive()
              ensures forall a^60: Library.Nat.T ::
              Library.Nat.valid(a^60) ==> Library.Nat.fpuAllowed(a^60, a^60)
             { }
            
            lemma frameValid()
              ensures forall a^61: Library.Nat.T, b^44: Library.Nat.T ::
              Library.Nat.valid(Library.Nat.frame(a^61, b^44)) ==>
              Library.Nat.valid(a^61) && Library.Nat.valid(b^44)
             { }
            
            lemma weak_frameCompInv()
              ensures forall a^62: Library.Nat.T, b^45: Library.Nat.T ::
              Library.Nat.valid(Library.Nat.comp(a^62, b^45)) ==>
              Library.Nat.valid(Library.Nat.frame(Library.Nat.comp(a^62,
              b^45), b^45))
             { }
          }
          
          module Auth[M: Library.CancellativeResourceAlgebra]
            : Library.ResourceAlgebra
          {
            /* destr f_proj1(Library.Auth.T): Library.Auth.M.T */
            
            /* constr frag(Library.Auth.M.T): Library.Auth.T */
            
            /* destr af_proj1(Library.Auth.T): Library.Auth.M.T */
            
            /* destr af_proj2(Library.Auth.T): Library.Auth.M.T */
            
            /* constr auth_frag(Library.Auth.M.T,
            Library.Auth.M.T): Library.Auth.T */
            
            /* constr top(): Library.Auth.T */
            
            rep type T = data Library.Auth.T {
              case frag(f_proj1: Library.Auth.M.T)
                case auth_frag(af_proj1: Library.Auth.M.T, af_proj2:
                               Library.Auth.M.T)
                case top()
            }
            
            val id : Library.Auth.T = Library.Auth.frag(Library.Auth.M.id)
            
            func valid(n^1: Library.Auth.T)
              returns (ret^16: Bool)
            {
              ite(n^1 == Library.Auth.frag(Library.Auth.f_proj1(n^1)),
              Library.Auth.M.valid(Library.Auth.f_proj1(n^1)), ite(n^1 ==
              Library.Auth.auth_frag(Library.Auth.af_proj1(n^1),
              Library.Auth.af_proj2(n^1)),
              Library.Auth.M.valid(Library.Auth.af_proj1(n^1)) &&
              Library.Auth.M.valid(Library.Auth.af_proj2(n^1)) &&
              Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.af_proj1(n^1),
              Library.Auth.af_proj2(n^1))), false))
            }
            
            func comp(a^63: Library.Auth.T, b^46: Library.Auth.T)
              returns (ret^17: Library.Auth.T)
            {
              ite(a^63 == Library.Auth.frag(Library.Auth.f_proj1(a^63)) &&
              b^46 == Library.Auth.frag(Library.Auth.f_proj1(b^46)),
              Library.Auth.frag(Library.Auth.M.comp(Library.Auth.f_proj1(a^63),
              Library.Auth.f_proj1(b^46))), ite(a^63 ==
              Library.Auth.frag(Library.Auth.f_proj1(a^63)) && b^46 ==
              Library.Auth.auth_frag(Library.Auth.af_proj1(b^46),
              Library.Auth.af_proj2(b^46)),
              Library.Auth.auth_frag(Library.Auth.af_proj1(b^46),
              Library.Auth.M.comp(Library.Auth.f_proj1(a^63),
              Library.Auth.af_proj2(b^46))), ite(a^63 ==
              Library.Auth.auth_frag(Library.Auth.af_proj1(a^63),
              Library.Auth.af_proj2(a^63)) && b^46 ==
              Library.Auth.frag(Library.Auth.f_proj1(b^46)),
              Library.Auth.auth_frag(Library.Auth.af_proj1(a^63),
              Library.Auth.M.comp(Library.Auth.f_proj1(b^46),
              Library.Auth.af_proj2(a^63))), Library.Auth.top)))
            }
            
            func frame(a^64: Library.Auth.T, b^47: Library.Auth.T)
              returns (ret^18: Library.Auth.T)
            {
              ite(b^47 == Library.Auth.id, a^64, ite(a^64 ==
              Library.Auth.frag(Library.Auth.f_proj1(a^64)) && b^47 ==
              Library.Auth.frag(Library.Auth.f_proj1(b^47)),
              Library.Auth.frag(Library.Auth.M.frame(Library.Auth.f_proj1(a^64),
              Library.Auth.f_proj1(b^47))), ite(a^64 ==
              Library.Auth.frag(Library.Auth.f_proj1(a^64)) && b^47 ==
              Library.Auth.auth_frag(Library.Auth.af_proj1(b^47),
              Library.Auth.af_proj2(b^47)), Library.Auth.top, ite(a^64 ==
              Library.Auth.auth_frag(Library.Auth.af_proj1(a^64),
              Library.Auth.af_proj2(a^64)) && Library.Auth.valid(a^64) &&
              b^47 == Library.Auth.frag(Library.Auth.f_proj1(b^47)),
              Library.Auth.auth_frag(Library.Auth.af_proj1(a^64),
              Library.Auth.M.frame(Library.Auth.af_proj2(a^64),
              Library.Auth.f_proj1(b^47))), ite(a^64 ==
              Library.Auth.auth_frag(Library.Auth.af_proj1(a^64),
              Library.Auth.af_proj2(a^64)) && Library.Auth.valid(a^64) &&
              b^47 == Library.Auth.auth_frag(Library.Auth.af_proj1(b^47),
              Library.Auth.af_proj2(b^47)),
              ite(Library.Auth.af_proj1(a^64) == Library.Auth.af_proj1(b^47),
              Library.Auth.frag(Library.Auth.M.frame(Library.Auth.af_proj2(a^64),
              Library.Auth.af_proj2(b^47))), Library.Auth.top),
              Library.Auth.top)))))
            }
            
            func fpuAllowed(a^65: Library.Auth.T, b^48: Library.Auth.T)
              returns (ret^19: Bool)
            {
              ite(a^65 == b^48, true, ite(a^65 ==
              Library.Auth.auth_frag(Library.Auth.af_proj1(a^65),
              Library.Auth.af_proj2(a^65)) && b^48 ==
              Library.Auth.auth_frag(Library.Auth.af_proj1(b^48),
              Library.Auth.af_proj2(b^48)),
              Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.af_proj1(b^48),
              Library.Auth.af_proj1(a^65))) &&
              Library.Auth.M.valid(Library.Auth.M.frame(Library.Auth.M.frame(Library.Auth.af_proj1(b^48),
              Library.Auth.af_proj2(b^48)),
              Library.Auth.M.frame(Library.Auth.af_proj1(a^65),
              Library.Auth.af_proj2(a^65)))), false))
            }
            
            lemma idValid()
              ensures Library.Auth.valid(Library.Auth.id)
             { }
            
            lemma compAssoc()
              ensures forall a^66: Library.Auth.T, b^49: Library.Auth.T,
              c^10: Library.Auth.T ::
              Library.Auth.comp(Library.Auth.comp(a^66, b^49), c^10) ==
              Library.Auth.comp(a^66, Library.Auth.comp(b^49, c^10))
             { }
            
            lemma compCommute()
              ensures forall a^67: Library.Auth.T, b^50: Library.Auth.T ::
              Library.Auth.comp(a^67, b^50) == Library.Auth.comp(b^50, a^67)
             { }
            
            lemma compId()
              ensures forall a^68: Library.Auth.T :: Library.Auth.comp(a^68,
              Library.Auth.id) == a^68
             { }
            
            lemma compValid()
              ensures forall a^69: Library.Auth.T, b^51: Library.Auth.T ::
              Library.Auth.valid(Library.Auth.comp(a^69, b^51)) ==>
              Library.Auth.valid(a^69) && Library.Auth.valid(b^51)
             { }
            
            lemma frameId()
              ensures forall a^70: Library.Auth.T :: Library.Auth.frame(a^70,
              Library.Auth.id) == a^70
             { }
            
            lemma compFrameInv()
              ensures forall a^71: Library.Auth.T, b^52: Library.Auth.T ::
              Library.Auth.valid(Library.Auth.frame(a^71, b^52)) ==>
              Library.Auth.comp(Library.Auth.frame(a^71, b^52), b^52) == a^71
             { }
            
            lemma fpuValid()
              ensures forall a^72: Library.Auth.T, b^53: Library.Auth.T,
              c^11: Library.Auth.T :: Library.Auth.fpuAllowed(a^72, b^53) &&
              Library.Auth.valid(a^72) &&
              Library.Auth.valid(Library.Auth.comp(a^72, c^11)) ==>
              Library.Auth.valid(Library.Auth.comp(b^53, c^11))
             { }
            
            lemma fpuReflexive()
              ensures forall a^73: Library.Auth.T ::
              Library.Auth.valid(a^73) ==> Library.Auth.fpuAllowed(a^73,
              a^73)
             { }
            
            lemma frameValid()
              ensures forall a^74: Library.Auth.T, b^54: Library.Auth.T ::
              Library.Auth.valid(Library.Auth.frame(a^74, b^54)) ==>
              Library.Auth.valid(a^74) && Library.Auth.valid(b^54)
             { }
            
            lemma weak_frameCompInv()
              ensures forall a^75: Library.Auth.T, b^55: Library.Auth.T ::
              Library.Auth.valid(Library.Auth.comp(a^75, b^55)) ==>
              Library.Auth.valid(Library.Auth.frame(Library.Auth.comp(a^75,
              b^55), b^55))
             { }
          }
          
          module Frac[X: Library.Type] : Library.CancellativeResourceAlgebra
          {
            /* constr frac_null(): Library.Frac.T */
            
            /* destr frac_proj1(Library.Frac.T): Library.Frac.X.T */
            
            /* destr frac_proj2(Library.Frac.T): Real */
            
            /* constr frac_chunk(Library.Frac.X.T,
            Real): Library.Frac.T */
            
            /* constr frac_top(): Library.Frac.T */
            
            rep type T = data Library.Frac.T {
              case frac_null()
                case frac_chunk(frac_proj1: Library.Frac.X.T, frac_proj2:
                                Real)
                case frac_top()
            }
            
            val id : Library.Frac.T = Library.Frac.frac_null
            
            func valid(n^2: Library.Frac.T)
              returns (ret^20: Bool)
            {
              ite(n^2 ==
              Library.Frac.frac_chunk(Library.Frac.frac_proj1(n^2),
              Library.Frac.frac_proj2(n^2)), Library.Frac.frac_proj2(n^2) >
              0. && Library.Frac.frac_proj2(n^2) <= 1., ite(n^2 ==
              Library.Frac.frac_null, true, false))
            }
            
            func comp(a^76: Library.Frac.T, b^56: Library.Frac.T)
              returns (ret^21: Library.Frac.T)
            {
              ite(a^76 == Library.Frac.frac_null, b^56, ite(b^56 ==
              Library.Frac.frac_null, a^76, ite(Library.Frac.valid(a^76) &&
              Library.Frac.valid(b^56), ite(Library.Frac.frac_proj1(a^76) ==
              Library.Frac.frac_proj1(b^56) &&
              Library.Frac.frac_proj2(a^76) + Library.Frac.frac_proj2(b^56) >
              0. && Library.Frac.frac_proj2(a^76) +
              Library.Frac.frac_proj2(b^56) <= 1.,
              Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^76),
              Library.Frac.frac_proj2(a^76) + Library.Frac.frac_proj2(b^56)),
              Library.Frac.frac_top), Library.Frac.frac_top)))
            }
            
            func frame(a^77: Library.Frac.T, b^57: Library.Frac.T)
              returns (ret^22: Library.Frac.T)
            {
              ite(b^57 == Library.Frac.frac_null, a^77, ite(a^77 ==
              Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^77),
              Library.Frac.frac_proj2(a^77)) && b^57 ==
              Library.Frac.frac_chunk(Library.Frac.frac_proj1(b^57),
              Library.Frac.frac_proj2(b^57)) && Library.Frac.valid(a^77) &&
              Library.Frac.valid(b^57), ite(Library.Frac.frac_proj1(a^77) ==
              Library.Frac.frac_proj1(b^57),
              ite(Library.Frac.frac_proj2(a^77) ==
              Library.Frac.frac_proj2(b^57), Library.Frac.frac_null,
              Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^77),
              Library.Frac.frac_proj2(a^77) -
              Library.Frac.frac_proj2(b^57))), Library.Frac.frac_top),
              Library.Frac.frac_top))
            }
            
            func fpuAllowed(a^78: Library.Frac.T, b^58: Library.Frac.T)
              returns (ret^23: Bool)
            {
              ite(a^78 == b^58, true, ite(a^78 ==
              Library.Frac.frac_chunk(Library.Frac.frac_proj1(a^78),
              Library.Frac.frac_proj2(a^78)),
              Library.Frac.frac_proj2(a^78) == 1. &&
              Library.Frac.valid(b^58), ite(a^78 == Library.Frac.frac_top,
              true, false)))
            }
            
            lemma frameCompInv()
              ensures forall a^79: Library.Frac.T, b^59: Library.Frac.T ::
              Library.Frac.valid(Library.Frac.comp(a^79, b^59)) ==>
              Library.Frac.frame(Library.Frac.comp(a^79, b^59), b^59) == a^79
             { }
            
            lemma frameReflexive()
              ensures forall a^80: Library.Frac.T ::
              Library.Frac.valid(a^80) ==> Library.Frac.frame(a^80, a^80) ==
              Library.Frac.id
             { }
            
            lemma idValid()
              ensures Library.Frac.valid(Library.Frac.id)
             { }
            
            lemma compAssoc()
              ensures forall a^81: Library.Frac.T, b^60: Library.Frac.T,
              c^12: Library.Frac.T ::
              Library.Frac.comp(Library.Frac.comp(a^81, b^60), c^12) ==
              Library.Frac.comp(a^81, Library.Frac.comp(b^60, c^12))
             { }
            
            lemma compCommute()
              ensures forall a^82: Library.Frac.T, b^61: Library.Frac.T ::
              Library.Frac.comp(a^82, b^61) == Library.Frac.comp(b^61, a^82)
             { }
            
            lemma compId()
              ensures forall a^83: Library.Frac.T :: Library.Frac.comp(a^83,
              Library.Frac.id) == a^83
             { }
            
            lemma compValid()
              ensures forall a^84: Library.Frac.T, b^62: Library.Frac.T ::
              Library.Frac.valid(Library.Frac.comp(a^84, b^62)) ==>
              Library.Frac.valid(a^84) && Library.Frac.valid(b^62)
             { }
            
            lemma frameId()
              ensures forall a^85: Library.Frac.T :: Library.Frac.frame(a^85,
              Library.Frac.id) == a^85
             { }
            
            lemma compFrameInv()
              ensures forall a^86: Library.Frac.T, b^63: Library.Frac.T ::
              Library.Frac.valid(Library.Frac.frame(a^86, b^63)) ==>
              Library.Frac.comp(Library.Frac.frame(a^86, b^63), b^63) == a^86
             { }
            
            lemma fpuValid()
              ensures forall a^87: Library.Frac.T, b^64: Library.Frac.T,
              c^13: Library.Frac.T :: Library.Frac.fpuAllowed(a^87, b^64) &&
              Library.Frac.valid(a^87) &&
              Library.Frac.valid(Library.Frac.comp(a^87, c^13)) ==>
              Library.Frac.valid(Library.Frac.comp(b^64, c^13))
             { }
            
            lemma fpuReflexive()
              ensures forall a^88: Library.Frac.T ::
              Library.Frac.valid(a^88) ==> Library.Frac.fpuAllowed(a^88,
              a^88)
             { }
            
            lemma frameValid()
              ensures forall a^89: Library.Frac.T, b^65: Library.Frac.T ::
              Library.Frac.valid(Library.Frac.frame(a^89, b^65)) ==>
              Library.Frac.valid(a^89) && Library.Frac.valid(b^65)
             { }
            
            lemma weak_frameCompInv()
              ensures forall a^90: Library.Frac.T, b^66: Library.Frac.T ::
              Library.Frac.valid(Library.Frac.comp(a^90, b^66)) ==>
              Library.Frac.valid(Library.Frac.frame(Library.Frac.comp(a^90,
              b^66), b^66))
             { }
          }
          
          module SetRA[X: Library.Type] : Library.LatticeResourceAlgebra
          {
            /* destr set_proj1(Library.SetRA.T): Set[Library.SetRA.X.T] */
            
            /* constr set_constr(Set[Library.SetRA.X.T]): Library.SetRA.T */
            
            /* constr set_top(): Library.SetRA.T */
            
            rep type T = data Library.SetRA.T {
              case set_constr(set_proj1: Set[Library.SetRA.X.T])
                case set_top()
            }
            
            val id : Library.SetRA.T = Library.SetRA.set_constr({||})
            
            func valid(n^3: Library.SetRA.T)
              returns (ret^24: Bool)
            {
              n^3 == Library.SetRA.set_constr(Library.SetRA.set_proj1(n^3))
            }
            
            func comp(a^91: Library.SetRA.T, b^67: Library.SetRA.T)
              returns (ret^25: Library.SetRA.T)
            {
              ite(a^91 ==
              Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91)) &&
              b^67 ==
              Library.SetRA.set_constr(Library.SetRA.set_proj1(b^67)),
              Library.SetRA.set_constr(Library.SetRA.set_proj1(a^91) ++
              Library.SetRA.set_proj1(b^67)), Library.SetRA.set_top)
            }
            
            func frame(a^92: Library.SetRA.T, b^68: Library.SetRA.T)
              returns (ret^26: Library.SetRA.T)
            {
              ite(a^92 ==
              Library.SetRA.set_constr(Library.SetRA.set_proj1(a^92)) &&
              b^68 ==
              Library.SetRA.set_constr(Library.SetRA.set_proj1(b^68)),
              ite(Library.SetRA.set_proj1(b^68) subsetof
              Library.SetRA.set_proj1(a^92), a^92, Library.SetRA.set_top),
              Library.SetRA.set_top)
            }
            
            func fpuAllowed(a^93: Library.SetRA.T, b^69: Library.SetRA.T)
              returns (ret^27: Bool)
            {
              ite(a^93 ==
              Library.SetRA.set_constr(Library.SetRA.set_proj1(a^93)) &&
              b^69 ==
              Library.SetRA.set_constr(Library.SetRA.set_proj1(b^69)),
              Library.SetRA.set_proj1(a^93) subsetof
              Library.SetRA.set_proj1(b^69), ite(a^93 ==
              Library.SetRA.set_top && b^69 == Library.SetRA.set_top, true,
              false))
            }
            
            lemma idValid()
              ensures Library.SetRA.valid(Library.SetRA.id)
             { }
            
            lemma compAssoc()
              ensures forall a^94: Library.SetRA.T, b^70: Library.SetRA.T,
              c^14: Library.SetRA.T ::
              Library.SetRA.comp(Library.SetRA.comp(a^94, b^70), c^14) ==
              Library.SetRA.comp(a^94, Library.SetRA.comp(b^70, c^14))
             { }
            
            lemma compCommute()
              ensures forall a^95: Library.SetRA.T, b^71: Library.SetRA.T ::
              Library.SetRA.comp(a^95, b^71) == Library.SetRA.comp(b^71,
              a^95)
             { }
            
            lemma compId()
              ensures forall a^96: Library.SetRA.T ::
              Library.SetRA.comp(a^96, Library.SetRA.id) == a^96
             { }
            
            lemma compValid()
              ensures forall a^97: Library.SetRA.T, b^72: Library.SetRA.T ::
              Library.SetRA.valid(Library.SetRA.comp(a^97, b^72)) ==>
              Library.SetRA.valid(a^97) && Library.SetRA.valid(b^72)
             { }
            
            lemma frameId()
              ensures forall a^98: Library.SetRA.T ::
              Library.SetRA.frame(a^98, Library.SetRA.id) == a^98
             { }
            
            lemma compFrameInv()
              ensures forall a^99: Library.SetRA.T, b^73: Library.SetRA.T ::
              Library.SetRA.valid(Library.SetRA.frame(a^99, b^73)) ==>
              Library.SetRA.comp(Library.SetRA.frame(a^99, b^73), b^73) ==
              a^99
             { }
            
            lemma fpuValid()
              ensures forall a^100: Library.SetRA.T, b^74: Library.SetRA.T,
              c^15: Library.SetRA.T :: Library.SetRA.fpuAllowed(a^100,
              b^74) && Library.SetRA.valid(a^100) &&
              Library.SetRA.valid(Library.SetRA.comp(a^100, c^15)) ==>
              Library.SetRA.valid(Library.SetRA.comp(b^74, c^15))
             { }
            
            lemma fpuReflexive()
              ensures forall a^101: Library.SetRA.T ::
              Library.SetRA.valid(a^101) ==> Library.SetRA.fpuAllowed(a^101,
              a^101)
             { }
            
            lemma frameValid()
              ensures forall a^102: Library.SetRA.T, b^75: Library.SetRA.T ::
              Library.SetRA.valid(Library.SetRA.frame(a^102, b^75)) ==>
              Library.SetRA.valid(a^102) && Library.SetRA.valid(b^75)
             { }
            
            lemma weak_frameCompInv()
              ensures forall a^103: Library.SetRA.T, b^76: Library.SetRA.T ::
              Library.SetRA.valid(Library.SetRA.comp(a^103, b^76)) ==>
              Library.SetRA.valid(Library.SetRA.frame(Library.SetRA.comp(a^103,
              b^76), b^76))
             { }
            
            lemma frameCompInv()
              ensures forall a^104: Library.SetRA.T, b^77: Library.SetRA.T ::
              Library.SetRA.valid(Library.SetRA.frame(a^104, b^77)) ==>
              Library.SetRA.frame(a^104, b^77) == a^104
             { }
            
            lemma frameCompInv0()
              ensures forall a^105: Library.SetRA.T, b^78: Library.SetRA.T ::
              Library.SetRA.valid(Library.SetRA.comp(a^105, b^78)) ==>
              Library.SetRA.frame(Library.SetRA.comp(a^105, b^78), b^78) ==
              Library.SetRA.comp(a^105, b^78)
             { }
            
            lemma frameCompInv2()
              ensures forall a^106: Library.SetRA.T, b^79: Library.SetRA.T ::
              Library.SetRA.comp(a^106, b^79) == a^106 &&
              Library.SetRA.valid(a^106) ==> Library.SetRA.frame(a^106,
              b^79) == a^106
             { }
            
            lemma frame_comp_inv()
              ensures forall a^107: Library.SetRA.T, b^80: Library.SetRA.T,
              c^16: Library.SetRA.T :: Library.SetRA.frame(a^107,
              Library.SetRA.comp(b^80, c^16)) ==
              Library.SetRA.frame(Library.SetRA.frame(a^107, b^80), c^16)
             { }
          }
          
          module KeySetRA[X: Library.Type]
            : Library.CancellativeResourceAlgebra
          {
            /* destr ks_proj1(Library.KeySetRA.T): Set[Library.KeySetRA.X.T] */
            
            /* destr ks_proj2(Library.KeySetRA.T): Set[Library.KeySetRA.X.T] */
            
            /* constr ksPair(Set[Library.KeySetRA.X.T],
            Set[Library.KeySetRA.X.T]): Library.KeySetRA.T */
            
            /* constr ksTop(): Library.KeySetRA.T */
            
            rep type T = data Library.KeySetRA.T {
              case ksPair(ks_proj1: Set[Library.KeySetRA.X.T], ks_proj2:
                          Set[Library.KeySetRA.X.T])
                case ksTop()
            }
            
            val id : Library.KeySetRA.T = Library.KeySetRA.ksPair({||}, {||})
            
            func valid(n^4: Library.KeySetRA.T)
              returns (ret^28: Bool)
            {
              ite(n^4 ==
              Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(n^4),
              Library.KeySetRA.ks_proj2(n^4)),
              Library.KeySetRA.ks_proj2(n^4) subsetof
              Library.KeySetRA.ks_proj1(n^4), false)
            }
            
            func comp(a^108: Library.KeySetRA.T, b^81: Library.KeySetRA.T)
              returns (ret^29: Library.KeySetRA.T)
            {
              ite(a^108 == Library.KeySetRA.id, b^81, ite(b^81 ==
              Library.KeySetRA.id, a^108, ite(a^108 ==
              Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^108),
              Library.KeySetRA.ks_proj2(a^108)) && b^81 ==
              Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(b^81),
              Library.KeySetRA.ks_proj2(b^81)),
              ite(Library.KeySetRA.valid(a^108) &&
              Library.KeySetRA.valid(b^81) &&
              Library.KeySetRA.ks_proj1(a^108) **
              Library.KeySetRA.ks_proj1(b^81) == {||},
              Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^108) ++
              Library.KeySetRA.ks_proj1(b^81),
              Library.KeySetRA.ks_proj2(a^108) ++
              Library.KeySetRA.ks_proj2(b^81)), Library.KeySetRA.ksTop),
              Library.KeySetRA.ksTop)))
            }
            
            func frame(a^109: Library.KeySetRA.T, b^82: Library.KeySetRA.T)
              returns (ret^30: Library.KeySetRA.T)
            {
              ite(b^82 == Library.KeySetRA.id, a^109, ite(a^109 ==
              Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^109),
              Library.KeySetRA.ks_proj2(a^109)) && b^82 ==
              Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(b^82),
              Library.KeySetRA.ks_proj2(b^82)),
              ite(Library.KeySetRA.valid(a^109) &&
              Library.KeySetRA.valid(b^82) &&
              Library.KeySetRA.ks_proj1(b^82) subsetof
              Library.KeySetRA.ks_proj1(a^109) &&
              Library.KeySetRA.ks_proj2(b^82) subsetof
              Library.KeySetRA.ks_proj2(a^109),
              Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^109) --
              Library.KeySetRA.ks_proj1(b^82),
              Library.KeySetRA.ks_proj2(a^109) --
              Library.KeySetRA.ks_proj2(b^82)), Library.KeySetRA.ksTop),
              Library.KeySetRA.ksTop))
            }
            
            func fpuAllowed(a^110: Library.KeySetRA.T, b^83:
                            Library.KeySetRA.T)
              returns (ret^31: Bool)
            {
              ite(a^110 == b^83, true, ite(a^110 ==
              Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(a^110),
              Library.KeySetRA.ks_proj2(a^110)) && b^83 ==
              Library.KeySetRA.ksPair(Library.KeySetRA.ks_proj1(b^83),
              Library.KeySetRA.ks_proj2(b^83)),
              Library.KeySetRA.valid(a^110) &&
              Library.KeySetRA.valid(b^83) &&
              Library.KeySetRA.ks_proj1(b^83) subsetof
              Library.KeySetRA.ks_proj1(a^110), false))
            }
            
            lemma frameCompInv()
              ensures forall a^111: Library.KeySetRA.T, b^84:
              Library.KeySetRA.T ::
              Library.KeySetRA.valid(Library.KeySetRA.comp(a^111, b^84)) ==>
              Library.KeySetRA.frame(Library.KeySetRA.comp(a^111, b^84),
              b^84) == a^111
             { }
            
            lemma frameReflexive()
              ensures forall a^112: Library.KeySetRA.T ::
              Library.KeySetRA.valid(a^112) ==> Library.KeySetRA.frame(a^112,
              a^112) == Library.KeySetRA.id
             { }
            
            lemma idValid()
              ensures Library.KeySetRA.valid(Library.KeySetRA.id)
             { }
            
            lemma compAssoc()
              ensures forall a^113: Library.KeySetRA.T, b^85:
              Library.KeySetRA.T, c^17: Library.KeySetRA.T ::
              Library.KeySetRA.comp(Library.KeySetRA.comp(a^113, b^85),
              c^17) == Library.KeySetRA.comp(a^113,
              Library.KeySetRA.comp(b^85, c^17))
             { }
            
            lemma compCommute()
              ensures forall a^114: Library.KeySetRA.T, b^86:
              Library.KeySetRA.T :: Library.KeySetRA.comp(a^114, b^86) ==
              Library.KeySetRA.comp(b^86, a^114)
             { }
            
            lemma compId()
              ensures forall a^115: Library.KeySetRA.T ::
              Library.KeySetRA.comp(a^115, Library.KeySetRA.id) == a^115
             { }
            
            lemma compValid()
              ensures forall a^116: Library.KeySetRA.T, b^87:
              Library.KeySetRA.T ::
              Library.KeySetRA.valid(Library.KeySetRA.comp(a^116, b^87)) ==>
              Library.KeySetRA.valid(a^116) && Library.KeySetRA.valid(b^87)
             { }
            
            lemma frameId()
              ensures forall a^117: Library.KeySetRA.T ::
              Library.KeySetRA.frame(a^117, Library.KeySetRA.id) == a^117
             { }
            
            lemma compFrameInv()
              ensures forall a^118: Library.KeySetRA.T, b^88:
              Library.KeySetRA.T ::
              Library.KeySetRA.valid(Library.KeySetRA.frame(a^118, b^88)) ==>
              Library.KeySetRA.comp(Library.KeySetRA.frame(a^118, b^88),
              b^88) == a^118
             { }
            
            lemma fpuValid()
              ensures forall a^119: Library.KeySetRA.T, b^89:
              Library.KeySetRA.T, c^18: Library.KeySetRA.T ::
              Library.KeySetRA.fpuAllowed(a^119, b^89) &&
              Library.KeySetRA.valid(a^119) &&
              Library.KeySetRA.valid(Library.KeySetRA.comp(a^119, c^18)) ==>
              Library.KeySetRA.valid(Library.KeySetRA.comp(b^89, c^18))
             { }
            
            lemma fpuReflexive()
              ensures forall a^120: Library.KeySetRA.T ::
              Library.KeySetRA.valid(a^120) ==>
              Library.KeySetRA.fpuAllowed(a^120, a^120)
             { }
            
            lemma frameValid()
              ensures forall a^121: Library.KeySetRA.T, b^90:
              Library.KeySetRA.T ::
              Library.KeySetRA.valid(Library.KeySetRA.frame(a^121, b^90)) ==>
              Library.KeySetRA.valid(a^121) && Library.KeySetRA.valid(b^90)
             { }
            
            lemma weak_frameCompInv()
              ensures forall a^122: Library.KeySetRA.T, b^91:
              Library.KeySetRA.T ::
              Library.KeySetRA.valid(Library.KeySetRA.comp(a^122, b^91)) ==>
              Library.KeySetRA.valid(Library.KeySetRA.frame(Library.KeySetRA.comp(a^122,
              b^91), b^91))
             { }
          }
        }
[Info] Front-end processing successful.
[Debug] Dependencies.analyze: Analyzing dependencies of module Library
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Type
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: T
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = T; qual_ident = Library.Type.T
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = T; qual_ident = Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = id; qual_ident = Library.ResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.ResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = fpuAllowed; qual_ident = Library.ResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: idValid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: idValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: idValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.idValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.idValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = idValid; qual_ident = Library.ResourceAlgebra.idValid
[Debug] SymbolTbl.resolve_and_find: compAssoc
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: compAssoc
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compAssoc
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.compAssoc
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.compAssoc
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = compAssoc; qual_ident = Library.ResourceAlgebra.compAssoc
[Debug] SymbolTbl.resolve_and_find: compCommute
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: compCommute
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compCommute
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.compCommute
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.compCommute
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = compCommute; qual_ident = Library.ResourceAlgebra.compCommute
[Debug] SymbolTbl.resolve_and_find: compId
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: compId
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compId
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.compId
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.compId
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = compId; qual_ident = Library.ResourceAlgebra.compId
[Debug] SymbolTbl.resolve_and_find: compValid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: compValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.compValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.compValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = compValid; qual_ident = Library.ResourceAlgebra.compValid
[Debug] SymbolTbl.resolve_and_find: frameId
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frameId
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameId
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.frameId
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.frameId
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frameId; qual_ident = Library.ResourceAlgebra.frameId
[Debug] SymbolTbl.resolve_and_find: compFrameInv
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: compFrameInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compFrameInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.compFrameInv
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.compFrameInv
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = compFrameInv; qual_ident = Library.ResourceAlgebra.compFrameInv
[Debug] SymbolTbl.resolve_and_find: fpuValid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.fpuValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = fpuValid; qual_ident = Library.ResourceAlgebra.fpuValid
[Debug] SymbolTbl.resolve_and_find: fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.fpuReflexive
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuReflexive
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = fpuReflexive; qual_ident = Library.ResourceAlgebra.fpuReflexive
[Debug] SymbolTbl.resolve_and_find: frameValid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frameValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.frameValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.frameValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frameValid; qual_ident = Library.ResourceAlgebra.frameValid
[Debug] SymbolTbl.resolve_and_find: weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.weak_frameCompInv
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.weak_frameCompInv
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = weak_frameCompInv; qual_ident = Library.ResourceAlgebra.weak_frameCompInv
[Debug] SymbolTbl.resolve_and_find: weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.weak_frameCompInv
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.weak_frameCompInv
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = weak_frameCompInv; qual_ident = Library.CancellativeResourceAlgebra.weak_frameCompInv
[Debug] SymbolTbl.resolve_and_find: frameValid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frameValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.frameValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frameValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frameValid; qual_ident = Library.CancellativeResourceAlgebra.frameValid
[Debug] SymbolTbl.resolve_and_find: fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.fpuReflexive
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuReflexive
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = fpuReflexive; qual_ident = Library.CancellativeResourceAlgebra.fpuReflexive
[Debug] SymbolTbl.resolve_and_find: fpuValid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.fpuValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = fpuValid; qual_ident = Library.CancellativeResourceAlgebra.fpuValid
[Debug] SymbolTbl.resolve_and_find: compFrameInv
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: compFrameInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compFrameInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.compFrameInv
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.compFrameInv
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = compFrameInv; qual_ident = Library.CancellativeResourceAlgebra.compFrameInv
[Debug] SymbolTbl.resolve_and_find: frameId
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frameId
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameId
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.frameId
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frameId
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frameId; qual_ident = Library.CancellativeResourceAlgebra.frameId
[Debug] SymbolTbl.resolve_and_find: compValid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: compValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.compValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.compValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = compValid; qual_ident = Library.CancellativeResourceAlgebra.compValid
[Debug] SymbolTbl.resolve_and_find: compId
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: compId
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compId
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.compId
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.compId
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = compId; qual_ident = Library.CancellativeResourceAlgebra.compId
[Debug] SymbolTbl.resolve_and_find: compCommute
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: compCommute
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compCommute
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.compCommute
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.compCommute
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = compCommute; qual_ident = Library.CancellativeResourceAlgebra.compCommute
[Debug] SymbolTbl.resolve_and_find: compAssoc
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: compAssoc
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compAssoc
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.compAssoc
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.compAssoc
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = compAssoc; qual_ident = Library.CancellativeResourceAlgebra.compAssoc
[Debug] SymbolTbl.resolve_and_find: idValid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: idValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: idValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.idValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.idValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = idValid; qual_ident = Library.CancellativeResourceAlgebra.idValid
[Debug] SymbolTbl.resolve_and_find: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = fpuAllowed; qual_ident = Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = id; qual_ident = Library.CancellativeResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = T; qual_ident = Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameCompInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.frameCompInv
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frameCompInv
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frameCompInv; qual_ident = Library.CancellativeResourceAlgebra.frameCompInv
[Debug] SymbolTbl.resolve_and_find: frameReflexive
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frameReflexive
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameReflexive
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.frameReflexive
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frameReflexive
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frameReflexive; qual_ident = Library.CancellativeResourceAlgebra.frameReflexive
[Debug] SymbolTbl.resolve_and_find: weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.weak_frameCompInv
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.weak_frameCompInv
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = weak_frameCompInv; qual_ident = Library.LatticeResourceAlgebra.weak_frameCompInv
[Debug] SymbolTbl.resolve_and_find: frameValid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frameValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.frameValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frameValid; qual_ident = Library.LatticeResourceAlgebra.frameValid
[Debug] SymbolTbl.resolve_and_find: fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.fpuReflexive
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuReflexive
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = fpuReflexive; qual_ident = Library.LatticeResourceAlgebra.fpuReflexive
[Debug] SymbolTbl.resolve_and_find: fpuValid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.fpuValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = fpuValid; qual_ident = Library.LatticeResourceAlgebra.fpuValid
[Debug] SymbolTbl.resolve_and_find: compFrameInv
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: compFrameInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compFrameInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.compFrameInv
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.compFrameInv
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = compFrameInv; qual_ident = Library.LatticeResourceAlgebra.compFrameInv
[Debug] SymbolTbl.resolve_and_find: frameId
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frameId
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameId
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.frameId
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameId
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frameId; qual_ident = Library.LatticeResourceAlgebra.frameId
[Debug] SymbolTbl.resolve_and_find: compValid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: compValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.compValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.compValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = compValid; qual_ident = Library.LatticeResourceAlgebra.compValid
[Debug] SymbolTbl.resolve_and_find: compId
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: compId
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compId
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.compId
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.compId
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = compId; qual_ident = Library.LatticeResourceAlgebra.compId
[Debug] SymbolTbl.resolve_and_find: compCommute
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: compCommute
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compCommute
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.compCommute
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.compCommute
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = compCommute; qual_ident = Library.LatticeResourceAlgebra.compCommute
[Debug] SymbolTbl.resolve_and_find: compAssoc
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: compAssoc
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compAssoc
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.compAssoc
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.compAssoc
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = compAssoc; qual_ident = Library.LatticeResourceAlgebra.compAssoc
[Debug] SymbolTbl.resolve_and_find: idValid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: idValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: idValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.idValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.idValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = idValid; qual_ident = Library.LatticeResourceAlgebra.idValid
[Debug] SymbolTbl.resolve_and_find: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = fpuAllowed; qual_ident = Library.LatticeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = id; qual_ident = Library.LatticeResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = T; qual_ident = Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameCompInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.frameCompInv
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameCompInv
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frameCompInv; qual_ident = Library.LatticeResourceAlgebra.frameCompInv
[Debug] SymbolTbl.resolve_and_find: frameCompInv0
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frameCompInv0
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameCompInv0
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.frameCompInv0
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameCompInv0
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frameCompInv0; qual_ident = Library.LatticeResourceAlgebra.frameCompInv0
[Debug] SymbolTbl.resolve_and_find: frameCompInv2
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frameCompInv2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameCompInv2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.frameCompInv2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameCompInv2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frameCompInv2; qual_ident = Library.LatticeResourceAlgebra.frameCompInv2
[Debug] SymbolTbl.resolve_and_find: frame_comp_inv
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame_comp_inv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame_comp_inv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.frame_comp_inv
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frame_comp_inv
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame_comp_inv; qual_ident = Library.LatticeResourceAlgebra.frame_comp_inv
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = T; qual_ident = Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = id; qual_ident = Library.Nat.id
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = fpuAllowed; qual_ident = Library.Nat.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameCompInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.frameCompInv
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frameCompInv
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frameCompInv; qual_ident = Library.Nat.frameCompInv
[Debug] SymbolTbl.resolve_and_find: frameReflexive
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frameReflexive
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameReflexive
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.frameReflexive
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frameReflexive
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frameReflexive; qual_ident = Library.Nat.frameReflexive
[Debug] SymbolTbl.resolve_and_find: idValid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: idValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: idValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.idValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.idValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = idValid; qual_ident = Library.Nat.idValid
[Debug] SymbolTbl.resolve_and_find: compAssoc
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: compAssoc
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compAssoc
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.compAssoc
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.compAssoc
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = compAssoc; qual_ident = Library.Nat.compAssoc
[Debug] SymbolTbl.resolve_and_find: compCommute
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: compCommute
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compCommute
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.compCommute
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.compCommute
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = compCommute; qual_ident = Library.Nat.compCommute
[Debug] SymbolTbl.resolve_and_find: compId
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: compId
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compId
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.compId
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.compId
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = compId; qual_ident = Library.Nat.compId
[Debug] SymbolTbl.resolve_and_find: compValid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: compValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.compValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.compValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = compValid; qual_ident = Library.Nat.compValid
[Debug] SymbolTbl.resolve_and_find: frameId
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frameId
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameId
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.frameId
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frameId
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frameId; qual_ident = Library.Nat.frameId
[Debug] SymbolTbl.resolve_and_find: compFrameInv
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: compFrameInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compFrameInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.compFrameInv
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.compFrameInv
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = compFrameInv; qual_ident = Library.Nat.compFrameInv
[Debug] SymbolTbl.resolve_and_find: fpuValid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.fpuValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = fpuValid; qual_ident = Library.Nat.fpuValid
[Debug] SymbolTbl.resolve_and_find: fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.fpuReflexive
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuReflexive
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = fpuReflexive; qual_ident = Library.Nat.fpuReflexive
[Debug] SymbolTbl.resolve_and_find: frameValid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frameValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.frameValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frameValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frameValid; qual_ident = Library.Nat.frameValid
[Debug] SymbolTbl.resolve_and_find: weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.weak_frameCompInv
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.weak_frameCompInv
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = weak_frameCompInv; qual_ident = Library.Nat.weak_frameCompInv
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = T; qual_ident = Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = id; qual_ident = Library.Auth.id
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Auth.valid
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Auth.comp
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.Auth.frame
[Debug] SymbolTbl.resolve_and_find: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = fpuAllowed; qual_ident = Library.Auth.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: idValid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: idValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: idValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.idValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.idValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = idValid; qual_ident = Library.Auth.idValid
[Debug] SymbolTbl.resolve_and_find: compAssoc
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: compAssoc
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compAssoc
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.compAssoc
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.compAssoc
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = compAssoc; qual_ident = Library.Auth.compAssoc
[Debug] SymbolTbl.resolve_and_find: compCommute
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: compCommute
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compCommute
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.compCommute
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.compCommute
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = compCommute; qual_ident = Library.Auth.compCommute
[Debug] SymbolTbl.resolve_and_find: compId
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: compId
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compId
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.compId
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.compId
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = compId; qual_ident = Library.Auth.compId
[Debug] SymbolTbl.resolve_and_find: compValid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: compValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.compValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.compValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = compValid; qual_ident = Library.Auth.compValid
[Debug] SymbolTbl.resolve_and_find: frameId
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frameId
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameId
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frameId
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frameId
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frameId; qual_ident = Library.Auth.frameId
[Debug] SymbolTbl.resolve_and_find: compFrameInv
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: compFrameInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compFrameInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.compFrameInv
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.compFrameInv
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = compFrameInv; qual_ident = Library.Auth.compFrameInv
[Debug] SymbolTbl.resolve_and_find: fpuValid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.fpuValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = fpuValid; qual_ident = Library.Auth.fpuValid
[Debug] SymbolTbl.resolve_and_find: fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.fpuReflexive
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.fpuReflexive
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = fpuReflexive; qual_ident = Library.Auth.fpuReflexive
[Debug] SymbolTbl.resolve_and_find: frameValid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frameValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.frameValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.frameValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frameValid; qual_ident = Library.Auth.frameValid
[Debug] SymbolTbl.resolve_and_find: weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.weak_frameCompInv
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.weak_frameCompInv
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = weak_frameCompInv; qual_ident = Library.Auth.weak_frameCompInv
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = T; qual_ident = Library.Frac.T
[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = id; qual_ident = Library.Frac.id
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.Frac.valid
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.Frac.comp
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.Frac.frame
[Debug] SymbolTbl.resolve_and_find: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = fpuAllowed; qual_ident = Library.Frac.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameCompInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frameCompInv
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frameCompInv
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frameCompInv; qual_ident = Library.Frac.frameCompInv
[Debug] SymbolTbl.resolve_and_find: frameReflexive
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frameReflexive
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameReflexive
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frameReflexive
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frameReflexive
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frameReflexive; qual_ident = Library.Frac.frameReflexive
[Debug] SymbolTbl.resolve_and_find: idValid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: idValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: idValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.idValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.idValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = idValid; qual_ident = Library.Frac.idValid
[Debug] SymbolTbl.resolve_and_find: compAssoc
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: compAssoc
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compAssoc
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.compAssoc
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.compAssoc
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = compAssoc; qual_ident = Library.Frac.compAssoc
[Debug] SymbolTbl.resolve_and_find: compCommute
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: compCommute
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compCommute
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.compCommute
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.compCommute
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = compCommute; qual_ident = Library.Frac.compCommute
[Debug] SymbolTbl.resolve_and_find: compId
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: compId
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compId
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.compId
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.compId
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = compId; qual_ident = Library.Frac.compId
[Debug] SymbolTbl.resolve_and_find: compValid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: compValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.compValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.compValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = compValid; qual_ident = Library.Frac.compValid
[Debug] SymbolTbl.resolve_and_find: frameId
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frameId
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameId
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frameId
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frameId
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frameId; qual_ident = Library.Frac.frameId
[Debug] SymbolTbl.resolve_and_find: compFrameInv
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: compFrameInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compFrameInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.compFrameInv
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.compFrameInv
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = compFrameInv; qual_ident = Library.Frac.compFrameInv
[Debug] SymbolTbl.resolve_and_find: fpuValid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.fpuValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = fpuValid; qual_ident = Library.Frac.fpuValid
[Debug] SymbolTbl.resolve_and_find: fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.fpuReflexive
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.fpuReflexive
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = fpuReflexive; qual_ident = Library.Frac.fpuReflexive
[Debug] SymbolTbl.resolve_and_find: frameValid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frameValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.frameValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.frameValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frameValid; qual_ident = Library.Frac.frameValid
[Debug] SymbolTbl.resolve_and_find: weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Frac
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, frac_proj2, T,
        weak_frameCompInv, frac_null, fpuValid, frac_chunk, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid,
        frameReflexive, comp, frac_proj1, compValid, X, frac_top, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Frac.weak_frameCompInv
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Frac.weak_frameCompInv
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = weak_frameCompInv; qual_ident = Library.Frac.weak_frameCompInv
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = T; qual_ident = Library.SetRA.T
[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = id; qual_ident = Library.SetRA.id
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.SetRA.valid
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.SetRA.comp
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.SetRA.frame
[Debug] SymbolTbl.resolve_and_find: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = fpuAllowed; qual_ident = Library.SetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: idValid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: idValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: idValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.idValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.idValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = idValid; qual_ident = Library.SetRA.idValid
[Debug] SymbolTbl.resolve_and_find: compAssoc
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: compAssoc
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compAssoc
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.compAssoc
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.compAssoc
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = compAssoc; qual_ident = Library.SetRA.compAssoc
[Debug] SymbolTbl.resolve_and_find: compCommute
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: compCommute
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compCommute
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.compCommute
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.compCommute
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = compCommute; qual_ident = Library.SetRA.compCommute
[Debug] SymbolTbl.resolve_and_find: compId
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: compId
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compId
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.compId
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.compId
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = compId; qual_ident = Library.SetRA.compId
[Debug] SymbolTbl.resolve_and_find: compValid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: compValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.compValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.compValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = compValid; qual_ident = Library.SetRA.compValid
[Debug] SymbolTbl.resolve_and_find: frameId
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frameId
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameId
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.frameId
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameId
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frameId; qual_ident = Library.SetRA.frameId
[Debug] SymbolTbl.resolve_and_find: compFrameInv
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: compFrameInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compFrameInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.compFrameInv
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.compFrameInv
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = compFrameInv; qual_ident = Library.SetRA.compFrameInv
[Debug] SymbolTbl.resolve_and_find: fpuValid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.fpuValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = fpuValid; qual_ident = Library.SetRA.fpuValid
[Debug] SymbolTbl.resolve_and_find: fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.fpuReflexive
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.fpuReflexive
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = fpuReflexive; qual_ident = Library.SetRA.fpuReflexive
[Debug] SymbolTbl.resolve_and_find: frameValid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frameValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.frameValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frameValid; qual_ident = Library.SetRA.frameValid
[Debug] SymbolTbl.resolve_and_find: weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.weak_frameCompInv
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.weak_frameCompInv
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = weak_frameCompInv; qual_ident = Library.SetRA.weak_frameCompInv
[Debug] SymbolTbl.resolve_and_find: frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameCompInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.frameCompInv
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameCompInv
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frameCompInv; qual_ident = Library.SetRA.frameCompInv
[Debug] SymbolTbl.resolve_and_find: frameCompInv0
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frameCompInv0
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameCompInv0
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.frameCompInv0
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameCompInv0
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frameCompInv0; qual_ident = Library.SetRA.frameCompInv0
[Debug] SymbolTbl.resolve_and_find: frameCompInv2
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frameCompInv2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameCompInv2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.frameCompInv2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frameCompInv2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frameCompInv2; qual_ident = Library.SetRA.frameCompInv2
[Debug] SymbolTbl.resolve_and_find: frame_comp_inv
[Debug] SymbolTbl.resolve.go_forward: scope: Library.SetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame_comp_inv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, set_proj1, frameValid, set_top, frameCompInv0, comp,
        frameCompInv2, compValid, X, set_constr, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame_comp_inv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.SetRA.frame_comp_inv
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.SetRA.frame_comp_inv
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame_comp_inv; qual_ident = Library.SetRA.frame_comp_inv
[Debug] SymbolTbl.resolve_and_find: T
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = T; qual_ident = Library.KeySetRA.T
[Debug] SymbolTbl.resolve_and_find: id
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = id; qual_ident = Library.KeySetRA.id
[Debug] SymbolTbl.resolve_and_find: valid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = valid; qual_ident = Library.KeySetRA.valid
[Debug] SymbolTbl.resolve_and_find: comp
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = comp; qual_ident = Library.KeySetRA.comp
[Debug] SymbolTbl.resolve_and_find: frame
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frame; qual_ident = Library.KeySetRA.frame
[Debug] SymbolTbl.resolve_and_find: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = fpuAllowed; qual_ident = Library.KeySetRA.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameCompInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.frameCompInv
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frameCompInv
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frameCompInv; qual_ident = Library.KeySetRA.frameCompInv
[Debug] SymbolTbl.resolve_and_find: frameReflexive
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frameReflexive
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameReflexive
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.frameReflexive
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frameReflexive
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frameReflexive; qual_ident = Library.KeySetRA.frameReflexive
[Debug] SymbolTbl.resolve_and_find: idValid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: idValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: idValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.idValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.idValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = idValid; qual_ident = Library.KeySetRA.idValid
[Debug] SymbolTbl.resolve_and_find: compAssoc
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: compAssoc
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compAssoc
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.compAssoc
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.compAssoc
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = compAssoc; qual_ident = Library.KeySetRA.compAssoc
[Debug] SymbolTbl.resolve_and_find: compCommute
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: compCommute
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compCommute
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.compCommute
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.compCommute
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = compCommute; qual_ident = Library.KeySetRA.compCommute
[Debug] SymbolTbl.resolve_and_find: compId
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: compId
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compId
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.compId
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.compId
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = compId; qual_ident = Library.KeySetRA.compId
[Debug] SymbolTbl.resolve_and_find: compValid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: compValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.compValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.compValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = compValid; qual_ident = Library.KeySetRA.compValid
[Debug] SymbolTbl.resolve_and_find: frameId
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frameId
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameId
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.frameId
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frameId
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frameId; qual_ident = Library.KeySetRA.frameId
[Debug] SymbolTbl.resolve_and_find: compFrameInv
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: compFrameInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compFrameInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.compFrameInv
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.compFrameInv
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = compFrameInv; qual_ident = Library.KeySetRA.compFrameInv
[Debug] SymbolTbl.resolve_and_find: fpuValid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.fpuValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = fpuValid; qual_ident = Library.KeySetRA.fpuValid
[Debug] SymbolTbl.resolve_and_find: fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.fpuReflexive
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.fpuReflexive
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = fpuReflexive; qual_ident = Library.KeySetRA.fpuReflexive
[Debug] SymbolTbl.resolve_and_find: frameValid
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: frameValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.frameValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.frameValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = frameValid; qual_ident = Library.KeySetRA.frameValid
[Debug] SymbolTbl.resolve_and_find: weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope: Library.KeySetRA
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: Library, $Root
[Debug] SymbolTbl.resolve.go_forward: ids1: weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, ksPair,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameReflexive, ksTop, comp, ks_proj2,
        ks_proj1, compValid, X, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.KeySetRA.weak_frameCompInv
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.KeySetRA.weak_frameCompInv
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.resolve: name = weak_frameCompInv; qual_ident = Library.KeySetRA.weak_frameCompInv
[Debug] Dependencies.analyze: Root Dependencies done for module Library
[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, M, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, M, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, M, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, M, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: M, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: M, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: found Alias: <Library.CancellativeResourceAlgebra,  >
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.frame
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, M, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, M, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, M, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, M, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: M, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: M, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: found Alias: <Library.CancellativeResourceAlgebra,  >
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, frame
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra,
        frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra,
        frame
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, M, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, M, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, M, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, M, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: M, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: M, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: found Alias: <Library.CancellativeResourceAlgebra,  >
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] SymbolTbl.resolve_and_find: Library.Auth.M.id
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, M, id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, M, id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, M, id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, M, id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: M, id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: M, id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: found Alias: <Library.CancellativeResourceAlgebra,  >
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, id
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra, id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra, id
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: Library.CancellativeResourceAlgebra -> Library.Auth.M
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.M.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: subst: [ Library.CancellativeResourceAlgebra -> Library.Auth.M ]

[Debug] Dependencies: Library.Type.T ]]
Library.ResourceAlgebra.T ]]
Library.ResourceAlgebra.id ]]
Library.ResourceAlgebra.comp ]]
Library.ResourceAlgebra.frame ]]
Library.ResourceAlgebra.valid ]]
Library.ResourceAlgebra.fpuAllowed ]]
Library.ResourceAlgebra.idValid ]]
Library.ResourceAlgebra.compAssoc ]]
Library.ResourceAlgebra.compCommute ]]
Library.ResourceAlgebra.compId ]]
Library.ResourceAlgebra.compValid ]]
Library.ResourceAlgebra.frameId ]]
Library.ResourceAlgebra.compFrameInv ]]
Library.ResourceAlgebra.fpuValid ]]
Library.ResourceAlgebra.fpuReflexive ]]
Library.ResourceAlgebra.frameValid ]]
Library.ResourceAlgebra.weak_frameCompInv ]]
Library.CancellativeResourceAlgebra.T ]]
Library.CancellativeResourceAlgebra.id ]]
Library.CancellativeResourceAlgebra.valid ]]
Library.CancellativeResourceAlgebra.comp ]]
Library.CancellativeResourceAlgebra.frame ]]
Library.CancellativeResourceAlgebra.fpuAllowed ]]
Library.CancellativeResourceAlgebra.weak_frameCompInv ]]
Library.CancellativeResourceAlgebra.frameValid ]]
Library.CancellativeResourceAlgebra.fpuReflexive ]]
Library.CancellativeResourceAlgebra.fpuValid ]]
Library.CancellativeResourceAlgebra.compFrameInv ]]
Library.CancellativeResourceAlgebra.frameId ]]
Library.CancellativeResourceAlgebra.compValid ]]
Library.CancellativeResourceAlgebra.compId ]]
Library.CancellativeResourceAlgebra.compCommute ]]
Library.CancellativeResourceAlgebra.compAssoc ]]
Library.CancellativeResourceAlgebra.idValid ]]
Library.CancellativeResourceAlgebra.frameCompInv ]]
Library.CancellativeResourceAlgebra.frameReflexive ]]
Library.LatticeResourceAlgebra.T ]]
Library.LatticeResourceAlgebra.id ]]
Library.LatticeResourceAlgebra.valid ]]
Library.LatticeResourceAlgebra.comp ]]
Library.LatticeResourceAlgebra.frame ]]
Library.LatticeResourceAlgebra.fpuAllowed ]]
Library.LatticeResourceAlgebra.weak_frameCompInv ]]
Library.LatticeResourceAlgebra.frameValid ]]
Library.LatticeResourceAlgebra.fpuReflexive ]]
Library.LatticeResourceAlgebra.fpuValid ]]
Library.LatticeResourceAlgebra.compFrameInv ]]
Library.LatticeResourceAlgebra.frameId ]]
Library.LatticeResourceAlgebra.compValid ]]
Library.LatticeResourceAlgebra.compId ]]
Library.LatticeResourceAlgebra.compCommute ]]
Library.LatticeResourceAlgebra.compAssoc ]]
Library.LatticeResourceAlgebra.idValid ]]
Library.LatticeResourceAlgebra.frameCompInv ]]
Library.LatticeResourceAlgebra.frameCompInv0 ]]
Library.LatticeResourceAlgebra.frameCompInv2 ]]
Library.LatticeResourceAlgebra.frame_comp_inv ]]
Library.Nat.T ]]
Library.Nat.valid ]]
Library.Nat.id ]]
Library.Nat.comp ]]
Library.Nat.frame ]]
Library.Nat.fpuAllowed ]]
Library.Nat.frameCompInv ]]
Library.Nat.frameReflexive ]]
Library.Nat.idValid ]]
Library.Nat.compAssoc ]]
Library.Nat.compCommute ]]
Library.Nat.compId ]]
Library.Nat.compValid ]]
Library.Nat.frameId ]]
Library.Nat.compFrameInv ]]
Library.Nat.fpuValid ]]
Library.Nat.fpuReflexive ]]
Library.Nat.frameValid ]]
Library.Nat.weak_frameCompInv ]]
Library.Auth.T ]]
Library.Auth.M.id ]]
Library.Auth.id ]]
Library.Auth.M.valid ]]
Library.Auth.M.frame ]]
Library.Auth.valid ]]
Library.Auth.M.comp ]]
Library.Auth.comp ]]
Library.Auth.frame ]]
Library.Auth.fpuAllowed ]]
Library.Auth.idValid ]]
Library.Auth.compAssoc ]]
Library.Auth.compCommute ]]
Library.Auth.compId ]]
Library.Auth.compValid ]]
Library.Auth.frameId ]]
Library.Auth.compFrameInv ]]
Library.Auth.fpuValid ]]
Library.Auth.fpuReflexive ]]
Library.Auth.frameValid ]]
Library.Auth.weak_frameCompInv ]]
Library.Frac.T ]]
Library.Frac.valid ]]
Library.Frac.comp ]]
Library.Frac.frame ]]
Library.Frac.fpuAllowed ]]
Library.Frac.id ]]
Library.Frac.frameCompInv ]]
Library.Frac.frameReflexive ]]
Library.Frac.idValid ]]
Library.Frac.compAssoc ]]
Library.Frac.compCommute ]]
Library.Frac.compId ]]
Library.Frac.compValid ]]
Library.Frac.frameId ]]
Library.Frac.compFrameInv ]]
Library.Frac.fpuValid ]]
Library.Frac.fpuReflexive ]]
Library.Frac.frameValid ]]
Library.Frac.weak_frameCompInv ]]
Library.SetRA.T ]]
Library.SetRA.comp ]]
Library.SetRA.valid ]]
Library.SetRA.frame ]]
Library.SetRA.fpuAllowed ]]
Library.SetRA.id ]]
Library.SetRA.idValid ]]
Library.SetRA.compAssoc ]]
Library.SetRA.compCommute ]]
Library.SetRA.compId ]]
Library.SetRA.compValid ]]
Library.SetRA.frameId ]]
Library.SetRA.compFrameInv ]]
Library.SetRA.fpuValid ]]
Library.SetRA.fpuReflexive ]]
Library.SetRA.frameValid ]]
Library.SetRA.weak_frameCompInv ]]
Library.SetRA.frameCompInv ]]
Library.SetRA.frameCompInv0 ]]
Library.SetRA.frameCompInv2 ]]
Library.SetRA.frame_comp_inv ]]
Library.KeySetRA.T ]]
Library.KeySetRA.valid ]]
Library.KeySetRA.id ]]
Library.KeySetRA.comp ]]
Library.KeySetRA.frame ]]
Library.KeySetRA.fpuAllowed ]]
Library.KeySetRA.frameCompInv ]]
Library.KeySetRA.frameReflexive ]]
Library.KeySetRA.idValid ]]
Library.KeySetRA.compAssoc ]]
Library.KeySetRA.compCommute ]]
Library.KeySetRA.compId ]]
Library.KeySetRA.compValid ]]
Library.KeySetRA.frameId ]]
Library.KeySetRA.compFrameInv ]]
Library.KeySetRA.fpuValid ]]
Library.KeySetRA.fpuReflexive ]]
Library.KeySetRA.frameValid ]]
Library.KeySetRA.weak_frameCompInv
[Debug] SymbolTbl.resolve_and_find: Library.Type.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Type, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Type, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Type, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Type, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Type
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: T
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Type.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify rep type T
[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify rep type T
[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.id
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra, id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra, id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra, id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra, id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify val id : Library.ResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify func comp(a: Library.ResourceAlgebra.T, b:
                                        Library.ResourceAlgebra.T)
                                returns (ret: Library.ResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.frame
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify func frame(a^1: Library.ResourceAlgebra.T, b^1:
                                         Library.ResourceAlgebra.T)
                                returns (ret^1: Library.ResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify func valid(a^2: Library.ResourceAlgebra.T)
                                returns (ret^2: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra,
        fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra,
        fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra, fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra, fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify func fpuAllowed(a^3: Library.ResourceAlgebra.T,
                                              b^2: Library.ResourceAlgebra.T)
                                returns (ret^3: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.idValid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra, idValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra, idValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra, idValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra, idValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: idValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: idValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.idValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.idValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma idValid()
                                ensures Library.ResourceAlgebra.valid(Library.ResourceAlgebra.id)
        
[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.compAssoc
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra,
        compAssoc
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra,
        compAssoc
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra, compAssoc
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra, compAssoc
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: compAssoc
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compAssoc
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.compAssoc
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.compAssoc
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma compAssoc()
                                ensures forall a^4:
                                Library.ResourceAlgebra.T, b^3:
                                Library.ResourceAlgebra.T, c:
                                Library.ResourceAlgebra.T ::
                                Library.ResourceAlgebra.comp(Library.ResourceAlgebra.comp(a^4,
                                b^3), c) == Library.ResourceAlgebra.comp(a^4,
                                Library.ResourceAlgebra.comp(b^3, c))
        
[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.compCommute
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra,
        compCommute
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra,
        compCommute
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra, compCommute
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra, compCommute
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: compCommute
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compCommute
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.compCommute
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.compCommute
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma compCommute()
                                ensures forall a^5:
                                Library.ResourceAlgebra.T, b^4:
                                Library.ResourceAlgebra.T ::
                                Library.ResourceAlgebra.comp(a^5, b^4) ==
                                Library.ResourceAlgebra.comp(b^4, a^5)
        
[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.compId
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra, compId
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra, compId
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra, compId
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra, compId
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: compId
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compId
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.compId
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.compId
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma compId()
                                ensures forall a^6: Library.ResourceAlgebra.T
                                :: Library.ResourceAlgebra.comp(a^6,
                                Library.ResourceAlgebra.id) == a^6
        
[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.compValid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra,
        compValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra,
        compValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra, compValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra, compValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: compValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.compValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.compValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma compValid()
                                ensures forall a^7:
                                Library.ResourceAlgebra.T, b^5:
                                Library.ResourceAlgebra.T ::
                                Library.ResourceAlgebra.valid(Library.ResourceAlgebra.comp(a^7,
                                b^5)) ==>
                                Library.ResourceAlgebra.valid(a^7) &&
                                Library.ResourceAlgebra.valid(b^5)
        
[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.frameId
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra, frameId
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra, frameId
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra, frameId
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra, frameId
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: frameId
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameId
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.frameId
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.frameId
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma frameId()
                                ensures forall a^8: Library.ResourceAlgebra.T
                                :: Library.ResourceAlgebra.frame(a^8,
                                Library.ResourceAlgebra.id) == a^8
        
[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.compFrameInv
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra,
        compFrameInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra,
        compFrameInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra, compFrameInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra, compFrameInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: compFrameInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compFrameInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.compFrameInv
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.compFrameInv
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma compFrameInv()
                                ensures forall a^9:
                                Library.ResourceAlgebra.T, b^6:
                                Library.ResourceAlgebra.T ::
                                Library.ResourceAlgebra.valid(Library.ResourceAlgebra.frame(a^9,
                                b^6)) ==>
                                Library.ResourceAlgebra.comp(Library.ResourceAlgebra.frame(a^9,
                                b^6), b^6) == a^9
        
[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.fpuValid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra,
        fpuValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra,
        fpuValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra, fpuValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra, fpuValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.fpuValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma fpuValid()
                                ensures forall a^10:
                                Library.ResourceAlgebra.T, b^7:
                                Library.ResourceAlgebra.T, c^1:
                                Library.ResourceAlgebra.T ::
                                Library.ResourceAlgebra.fpuAllowed(a^10,
                                b^7) &&
                                Library.ResourceAlgebra.valid(a^10) &&
                                Library.ResourceAlgebra.valid(Library.ResourceAlgebra.comp(a^10,
                                c^1)) ==>
                                Library.ResourceAlgebra.valid(Library.ResourceAlgebra.comp(b^7,
                                c^1))
        
[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra,
        fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra,
        fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra, fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra, fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.fpuReflexive
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.fpuReflexive
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma fpuReflexive()
                                ensures forall a^11:
                                Library.ResourceAlgebra.T ::
                                Library.ResourceAlgebra.valid(a^11) ==>
                                Library.ResourceAlgebra.fpuAllowed(a^11,
                                a^11)
        
[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.frameValid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra,
        frameValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra,
        frameValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra, frameValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra, frameValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: frameValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.frameValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.frameValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma frameValid()
                                ensures forall a^12:
                                Library.ResourceAlgebra.T, b^8:
                                Library.ResourceAlgebra.T ::
                                Library.ResourceAlgebra.valid(Library.ResourceAlgebra.frame(a^12,
                                b^8)) ==>
                                Library.ResourceAlgebra.valid(a^12) &&
                                Library.ResourceAlgebra.valid(b^8)
        
[Debug] SymbolTbl.resolve_and_find: Library.ResourceAlgebra.weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, ResourceAlgebra,
        weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, ResourceAlgebra,
        weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: ResourceAlgebra,
        weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: ResourceAlgebra,
        weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.ResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: compFrameInv, compId,
        id, idValid, compAssoc, T, weak_frameCompInv, fpuValid, frameId,
        fpuAllowed, compCommute, valid, fpuReflexive, frameValid, comp,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.ResourceAlgebra.weak_frameCompInv
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.ResourceAlgebra.weak_frameCompInv
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma weak_frameCompInv()
                                ensures forall a^13:
                                Library.ResourceAlgebra.T, b^9:
                                Library.ResourceAlgebra.T ::
                                Library.ResourceAlgebra.valid(Library.ResourceAlgebra.comp(a^13,
                                b^9)) ==>
                                Library.ResourceAlgebra.valid(Library.ResourceAlgebra.frame(Library.ResourceAlgebra.comp(a^13,
                                b^9), b^9))
        
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify rep type T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.id
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra, id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra, id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify val id : Library.CancellativeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify func valid(a^25:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^5: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify func comp(a^27:
                                        Library.CancellativeResourceAlgebra.T,
                                        b^19:
                                        Library.CancellativeResourceAlgebra.T)
                                returns (ret^7:
                                         Library.CancellativeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra,
        frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra,
        frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify func frame(a^26:
                                         Library.CancellativeResourceAlgebra.T,
                                         b^18:
                                         Library.CancellativeResourceAlgebra.T)
                                returns (ret^6:
                                         Library.CancellativeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra,
        fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra,
        fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify func fpuAllowed(a^24:
                                              Library.CancellativeResourceAlgebra.T,
                                              b^17:
                                              Library.CancellativeResourceAlgebra.T)
                                returns (ret^4: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra,
        weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra,
        weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.weak_frameCompInv
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.weak_frameCompInv
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma weak_frameCompInv()
                                ensures forall a^14:
                                Library.CancellativeResourceAlgebra.T, b^10:
                                Library.CancellativeResourceAlgebra.T ::
                                Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.comp(a^14,
                                b^10)) ==>
                                Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.frame(Library.CancellativeResourceAlgebra.comp(a^14,
                                b^10), b^10))
        
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.frameValid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, frameValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, frameValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra,
        frameValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra,
        frameValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: frameValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.frameValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frameValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma frameValid()
                                ensures forall a^15:
                                Library.CancellativeResourceAlgebra.T, b^11:
                                Library.CancellativeResourceAlgebra.T ::
                                Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.frame(a^15,
                                b^11)) ==>
                                Library.CancellativeResourceAlgebra.valid(a^15) &&
                                Library.CancellativeResourceAlgebra.valid(b^11)
        
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra,
        fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra,
        fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.fpuReflexive
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuReflexive
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma fpuReflexive()
                                ensures forall a^16:
                                Library.CancellativeResourceAlgebra.T ::
                                Library.CancellativeResourceAlgebra.valid(a^16) ==>
                                Library.CancellativeResourceAlgebra.fpuAllowed(a^16,
                                a^16)
        
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.fpuValid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, fpuValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, fpuValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra,
        fpuValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra,
        fpuValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.fpuValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.fpuValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma fpuValid()
                                ensures forall a^17:
                                Library.CancellativeResourceAlgebra.T, b^12:
                                Library.CancellativeResourceAlgebra.T, c^2:
                                Library.CancellativeResourceAlgebra.T ::
                                Library.CancellativeResourceAlgebra.fpuAllowed(a^17,
                                b^12) &&
                                Library.CancellativeResourceAlgebra.valid(a^17) &&
                                Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.comp(a^17,
                                c^2)) ==>
                                Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.comp(b^12,
                                c^2))
        
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.compFrameInv
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, compFrameInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, compFrameInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra,
        compFrameInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra,
        compFrameInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: compFrameInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compFrameInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.compFrameInv
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.compFrameInv
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma compFrameInv()
                                ensures forall a^18:
                                Library.CancellativeResourceAlgebra.T, b^13:
                                Library.CancellativeResourceAlgebra.T ::
                                Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.frame(a^18,
                                b^13)) ==>
                                Library.CancellativeResourceAlgebra.comp(Library.CancellativeResourceAlgebra.frame(a^18,
                                b^13), b^13) == a^18
        
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.frameId
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, frameId
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, frameId
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra,
        frameId
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra,
        frameId
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: frameId
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameId
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.frameId
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frameId
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma frameId()
                                ensures forall a^19:
                                Library.CancellativeResourceAlgebra.T ::
                                Library.CancellativeResourceAlgebra.frame(a^19,
                                Library.CancellativeResourceAlgebra.id) ==
                                a^19
        
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.compValid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, compValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, compValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra,
        compValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra,
        compValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: compValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.compValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.compValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma compValid()
                                ensures forall a^20:
                                Library.CancellativeResourceAlgebra.T, b^14:
                                Library.CancellativeResourceAlgebra.T ::
                                Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.comp(a^20,
                                b^14)) ==>
                                Library.CancellativeResourceAlgebra.valid(a^20) &&
                                Library.CancellativeResourceAlgebra.valid(b^14)
        
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.compId
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, compId
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, compId
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra,
        compId
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra,
        compId
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: compId
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compId
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.compId
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.compId
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma compId()
                                ensures forall a^21:
                                Library.CancellativeResourceAlgebra.T ::
                                Library.CancellativeResourceAlgebra.comp(a^21,
                                Library.CancellativeResourceAlgebra.id) ==
                                a^21
        
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.compCommute
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, compCommute
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, compCommute
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra,
        compCommute
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra,
        compCommute
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: compCommute
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compCommute
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.compCommute
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.compCommute
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma compCommute()
                                ensures forall a^22:
                                Library.CancellativeResourceAlgebra.T, b^15:
                                Library.CancellativeResourceAlgebra.T ::
                                Library.CancellativeResourceAlgebra.comp(a^22,
                                b^15) ==
                                Library.CancellativeResourceAlgebra.comp(b^15,
                                a^22)
        
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.compAssoc
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, compAssoc
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, compAssoc
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra,
        compAssoc
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra,
        compAssoc
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: compAssoc
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compAssoc
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.compAssoc
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.compAssoc
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma compAssoc()
                                ensures forall a^23:
                                Library.CancellativeResourceAlgebra.T, b^16:
                                Library.CancellativeResourceAlgebra.T, c^3:
                                Library.CancellativeResourceAlgebra.T ::
                                Library.CancellativeResourceAlgebra.comp(Library.CancellativeResourceAlgebra.comp(a^23,
                                b^16), c^3) ==
                                Library.CancellativeResourceAlgebra.comp(a^23,
                                Library.CancellativeResourceAlgebra.comp(b^16,
                                c^3))
        
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.idValid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, idValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, idValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra,
        idValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra,
        idValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: idValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: idValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.idValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.idValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma idValid()
                                ensures Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.id)
        
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, frameCompInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra,
        frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra,
        frameCompInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameCompInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.frameCompInv
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frameCompInv
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma frameCompInv()
                                ensures forall a^28:
                                Library.CancellativeResourceAlgebra.T, b^20:
                                Library.CancellativeResourceAlgebra.T ::
                                Library.CancellativeResourceAlgebra.valid(Library.CancellativeResourceAlgebra.comp(a^28,
                                b^20)) ==>
                                Library.CancellativeResourceAlgebra.frame(Library.CancellativeResourceAlgebra.comp(a^28,
                                b^20), b^20) == a^28
        
[Debug] SymbolTbl.resolve_and_find: Library.CancellativeResourceAlgebra.frameReflexive
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library,
        CancellativeResourceAlgebra, frameReflexive
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library,
        CancellativeResourceAlgebra, frameReflexive
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: CancellativeResourceAlgebra,
        frameReflexive
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: CancellativeResourceAlgebra,
        frameReflexive
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.CancellativeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: frameReflexive
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameReflexive
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.CancellativeResourceAlgebra.frameReflexive
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.CancellativeResourceAlgebra.frameReflexive
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma frameReflexive()
                                ensures forall a^29:
                                Library.CancellativeResourceAlgebra.T ::
                                Library.CancellativeResourceAlgebra.valid(a^29) ==>
                                Library.CancellativeResourceAlgebra.frame(a^29,
                                a^29) ==
                                Library.CancellativeResourceAlgebra.id
        
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify rep type T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.id
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify val id : Library.LatticeResourceAlgebra.T
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify func valid(a^41:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^9: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify func comp(a^43:
                                        Library.LatticeResourceAlgebra.T,
                                        b^30:
                                        Library.LatticeResourceAlgebra.T)
                                returns (ret^11:
                                         Library.LatticeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify func frame(a^42:
                                         Library.LatticeResourceAlgebra.T,
                                         b^29:
                                         Library.LatticeResourceAlgebra.T)
                                returns (ret^10:
                                         Library.LatticeResourceAlgebra.T)
        
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra,
        fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra,
        fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify func fpuAllowed(a^40:
                                              Library.LatticeResourceAlgebra.T,
                                              b^28:
                                              Library.LatticeResourceAlgebra.T)
                                returns (ret^8: Bool)
        
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra,
        weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra,
        weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.weak_frameCompInv
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.weak_frameCompInv
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma weak_frameCompInv()
                                ensures forall a^30:
                                Library.LatticeResourceAlgebra.T, b^21:
                                Library.LatticeResourceAlgebra.T ::
                                Library.LatticeResourceAlgebra.valid(Library.LatticeResourceAlgebra.comp(a^30,
                                b^21)) ==>
                                Library.LatticeResourceAlgebra.valid(Library.LatticeResourceAlgebra.frame(Library.LatticeResourceAlgebra.comp(a^30,
                                b^21), b^21))
        
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.frameValid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        frameValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        frameValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra,
        frameValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra,
        frameValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: frameValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.frameValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma frameValid()
                                ensures forall a^31:
                                Library.LatticeResourceAlgebra.T, b^22:
                                Library.LatticeResourceAlgebra.T ::
                                Library.LatticeResourceAlgebra.valid(Library.LatticeResourceAlgebra.frame(a^31,
                                b^22)) ==>
                                Library.LatticeResourceAlgebra.valid(a^31) &&
                                Library.LatticeResourceAlgebra.valid(b^22)
        
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra,
        fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra,
        fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.fpuReflexive
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuReflexive
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma fpuReflexive()
                                ensures forall a^32:
                                Library.LatticeResourceAlgebra.T ::
                                Library.LatticeResourceAlgebra.valid(a^32) ==>
                                Library.LatticeResourceAlgebra.fpuAllowed(a^32,
                                a^32)
        
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.fpuValid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        fpuValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        fpuValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, fpuValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, fpuValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.fpuValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.fpuValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma fpuValid()
                                ensures forall a^33:
                                Library.LatticeResourceAlgebra.T, b^23:
                                Library.LatticeResourceAlgebra.T, c^4:
                                Library.LatticeResourceAlgebra.T ::
                                Library.LatticeResourceAlgebra.fpuAllowed(a^33,
                                b^23) &&
                                Library.LatticeResourceAlgebra.valid(a^33) &&
                                Library.LatticeResourceAlgebra.valid(Library.LatticeResourceAlgebra.comp(a^33,
                                c^4)) ==>
                                Library.LatticeResourceAlgebra.valid(Library.LatticeResourceAlgebra.comp(b^23,
                                c^4))
        
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.compFrameInv
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        compFrameInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        compFrameInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra,
        compFrameInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra,
        compFrameInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: compFrameInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compFrameInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.compFrameInv
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.compFrameInv
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma compFrameInv()
                                ensures forall a^34:
                                Library.LatticeResourceAlgebra.T, b^24:
                                Library.LatticeResourceAlgebra.T ::
                                Library.LatticeResourceAlgebra.valid(Library.LatticeResourceAlgebra.frame(a^34,
                                b^24)) ==>
                                Library.LatticeResourceAlgebra.comp(Library.LatticeResourceAlgebra.frame(a^34,
                                b^24), b^24) == a^34
        
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.frameId
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        frameId
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        frameId
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, frameId
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, frameId
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: frameId
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameId
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.frameId
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameId
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma frameId()
                                ensures forall a^35:
                                Library.LatticeResourceAlgebra.T ::
                                Library.LatticeResourceAlgebra.frame(a^35,
                                Library.LatticeResourceAlgebra.id) == a^35
        
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.compValid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        compValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        compValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, compValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, compValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: compValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.compValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.compValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma compValid()
                                ensures forall a^36:
                                Library.LatticeResourceAlgebra.T, b^25:
                                Library.LatticeResourceAlgebra.T ::
                                Library.LatticeResourceAlgebra.valid(Library.LatticeResourceAlgebra.comp(a^36,
                                b^25)) ==>
                                Library.LatticeResourceAlgebra.valid(a^36) &&
                                Library.LatticeResourceAlgebra.valid(b^25)
        
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.compId
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        compId
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        compId
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, compId
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, compId
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: compId
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compId
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.compId
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.compId
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma compId()
                                ensures forall a^37:
                                Library.LatticeResourceAlgebra.T ::
                                Library.LatticeResourceAlgebra.comp(a^37,
                                Library.LatticeResourceAlgebra.id) == a^37
        
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.compCommute
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        compCommute
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        compCommute
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra,
        compCommute
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra,
        compCommute
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: compCommute
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compCommute
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.compCommute
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.compCommute
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma compCommute()
                                ensures forall a^38:
                                Library.LatticeResourceAlgebra.T, b^26:
                                Library.LatticeResourceAlgebra.T ::
                                Library.LatticeResourceAlgebra.comp(a^38,
                                b^26) ==
                                Library.LatticeResourceAlgebra.comp(b^26,
                                a^38)
        
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.compAssoc
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        compAssoc
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        compAssoc
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, compAssoc
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, compAssoc
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: compAssoc
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compAssoc
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.compAssoc
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.compAssoc
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma compAssoc()
                                ensures forall a^39:
                                Library.LatticeResourceAlgebra.T, b^27:
                                Library.LatticeResourceAlgebra.T, c^5:
                                Library.LatticeResourceAlgebra.T ::
                                Library.LatticeResourceAlgebra.comp(Library.LatticeResourceAlgebra.comp(a^39,
                                b^27), c^5) ==
                                Library.LatticeResourceAlgebra.comp(a^39,
                                Library.LatticeResourceAlgebra.comp(b^27,
                                c^5))
        
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.idValid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        idValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        idValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra, idValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra, idValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: idValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: idValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.idValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.idValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma idValid()
                                ensures Library.LatticeResourceAlgebra.valid(Library.LatticeResourceAlgebra.id)
        
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        frameCompInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra,
        frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra,
        frameCompInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameCompInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.frameCompInv
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameCompInv
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma frameCompInv()
                                ensures forall a^44:
                                Library.LatticeResourceAlgebra.T, b^31:
                                Library.LatticeResourceAlgebra.T ::
                                Library.LatticeResourceAlgebra.valid(Library.LatticeResourceAlgebra.frame(a^44,
                                b^31)) ==>
                                Library.LatticeResourceAlgebra.frame(a^44,
                                b^31) == a^44
        
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.frameCompInv0
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        frameCompInv0
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        frameCompInv0
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra,
        frameCompInv0
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra,
        frameCompInv0
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: frameCompInv0
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameCompInv0
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.frameCompInv0
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameCompInv0
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma frameCompInv0()
                                ensures forall a^45:
                                Library.LatticeResourceAlgebra.T, b^32:
                                Library.LatticeResourceAlgebra.T ::
                                Library.LatticeResourceAlgebra.valid(Library.LatticeResourceAlgebra.comp(a^45,
                                b^32)) ==>
                                Library.LatticeResourceAlgebra.frame(Library.LatticeResourceAlgebra.comp(a^45,
                                b^32), b^32) ==
                                Library.LatticeResourceAlgebra.comp(a^45,
                                b^32)
        
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.frameCompInv2
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        frameCompInv2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        frameCompInv2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra,
        frameCompInv2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra,
        frameCompInv2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: frameCompInv2
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameCompInv2
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.frameCompInv2
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frameCompInv2
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma frameCompInv2()
                                ensures forall a^46:
                                Library.LatticeResourceAlgebra.T, b^33:
                                Library.LatticeResourceAlgebra.T ::
                                Library.LatticeResourceAlgebra.comp(a^46,
                                b^33) == a^46 &&
                                Library.LatticeResourceAlgebra.valid(a^46) ==>
                                Library.LatticeResourceAlgebra.frame(a^46,
                                b^33) == a^46
        
[Debug] SymbolTbl.resolve_and_find: Library.LatticeResourceAlgebra.frame_comp_inv
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, LatticeResourceAlgebra,
        frame_comp_inv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, LatticeResourceAlgebra,
        frame_comp_inv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: LatticeResourceAlgebra,
        frame_comp_inv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: LatticeResourceAlgebra,
        frame_comp_inv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.LatticeResourceAlgebra
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: frame_comp_inv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, frame_comp_inv, id, idValid, compAssoc, T,
        weak_frameCompInv, fpuValid, frameId, fpuAllowed, compCommute, valid,
        fpuReflexive, frameValid, frameCompInv0, comp, frameCompInv2,
        compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame_comp_inv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.LatticeResourceAlgebra.frame_comp_inv
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.LatticeResourceAlgebra.frame_comp_inv
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma frame_comp_inv()
                                ensures forall a^47:
                                Library.LatticeResourceAlgebra.T, b^34:
                                Library.LatticeResourceAlgebra.T, c^6:
                                Library.LatticeResourceAlgebra.T ::
                                Library.LatticeResourceAlgebra.frame(a^47,
                                Library.LatticeResourceAlgebra.comp(b^34,
                                c^6)) ==
                                Library.LatticeResourceAlgebra.frame(Library.LatticeResourceAlgebra.frame(a^47,
                                b^34), c^6)
        
[Debug] SymbolTbl.resolve_and_find: Library.Nat.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify rep type T = Int
[Debug] SymbolTbl.resolve_and_find: Library.Nat.valid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: valid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: valid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.valid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify func valid(n: Library.Nat.T)
                                returns (ret^12: Bool)
        {
          n >= 0
        }
[Debug] Checking validity of (forall n: Library.Nat.T, ret^12: Bool ::
                             ret^12 == Library.Nat.valid(n) ==>
                             true [35m :Bool [0m)
[Debug] SymbolTbl.resolve_and_find: Library.Nat.id
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: id
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: id
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.id
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.id
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify val id : Library.Nat.T = 0
[Debug] SymbolTbl.resolve_and_find: Library.Nat.comp
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: comp
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: comp
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.comp
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify func comp(a^48: Library.Nat.T, b^35:
                                        Library.Nat.T)
                                returns (ret^13: Library.Nat.T)
        {
          ite(a^48 == Library.Nat.id, b^35, ite(b^35 == Library.Nat.id, a^48,
          ite(Library.Nat.valid(a^48) && Library.Nat.valid(b^35), a^48 +
          b^35, -(1))))
        }
[Debug] Checking validity of (forall a^48: Library.Nat.T, b^35:
                             Library.Nat.T, ret^13: Library.Nat.T ::
                             ret^13 == Library.Nat.comp(a^48, b^35) ==>
                             true [35m :Bool [0m)
[Debug] SymbolTbl.resolve_and_find: Library.Nat.frame
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: frame
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frame
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frame
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify func frame(a^49: Library.Nat.T, b^36:
                                         Library.Nat.T)
                                returns (ret^14: Library.Nat.T)
        {
          ite(b^36 == Library.Nat.id, a^49, ite(Library.Nat.valid(a^49) &&
          Library.Nat.valid(b^36), a^49 - b^36, -(1)))
        }
[Debug] Checking validity of (forall a^49: Library.Nat.T, b^36:
                             Library.Nat.T, ret^14: Library.Nat.T ::
                             ret^14 == Library.Nat.frame(a^49, b^36) ==>
                             true [35m :Bool [0m)
[Debug] SymbolTbl.resolve_and_find: Library.Nat.fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuAllowed
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuAllowed
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify func fpuAllowed(a^50: Library.Nat.T, b^37:
                                              Library.Nat.T)
                                returns (ret^15: Bool)
        {
          forall c^7: Library.Nat.T :: Library.Nat.valid(a^50) &&
          Library.Nat.valid(Library.Nat.comp(a^50, c^7)) ==>
          Library.Nat.valid(Library.Nat.comp(b^37, c^7))
        }
[Debug] Checking validity of (forall a^50: Library.Nat.T, b^37:
                             Library.Nat.T, ret^15: Bool :: ret^15 ==
                             Library.Nat.fpuAllowed(a^50, b^37) ==>
                             true [35m :Bool [0m)
[Debug] SymbolTbl.resolve_and_find: Library.Nat.frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, frameCompInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, frameCompInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameCompInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.frameCompInv
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frameCompInv
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma frameCompInv()
                                ensures forall a^51: Library.Nat.T, b^38:
                                Library.Nat.T ::
                                Library.Nat.valid(Library.Nat.comp(a^51,
                                b^38)) ==>
                                Library.Nat.frame(Library.Nat.comp(a^51,
                                b^38), b^38) == a^51
         { }
[Debug] SymbolTbl.resolve_and_find: Library.Nat.frameReflexive
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, frameReflexive
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, frameReflexive
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, frameReflexive
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, frameReflexive
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: frameReflexive
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameReflexive
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.frameReflexive
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frameReflexive
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma frameReflexive()
                                ensures forall a^52: Library.Nat.T ::
                                Library.Nat.valid(a^52) ==>
                                Library.Nat.frame(a^52, a^52) ==
                                Library.Nat.id
         { }
[Debug] SymbolTbl.resolve_and_find: Library.Nat.idValid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, idValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, idValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, idValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, idValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: idValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: idValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.idValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.idValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma idValid()
                                ensures Library.Nat.valid(Library.Nat.id)
         { }
[Debug] SymbolTbl.resolve_and_find: Library.Nat.compAssoc
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, compAssoc
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, compAssoc
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, compAssoc
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, compAssoc
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: compAssoc
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compAssoc
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.compAssoc
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.compAssoc
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma compAssoc()
                                ensures forall a^53: Library.Nat.T, b^39:
                                Library.Nat.T, c^8: Library.Nat.T ::
                                Library.Nat.comp(Library.Nat.comp(a^53,
                                b^39), c^8) == Library.Nat.comp(a^53,
                                Library.Nat.comp(b^39, c^8))
         { }
[Debug] SymbolTbl.resolve_and_find: Library.Nat.compCommute
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, compCommute
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, compCommute
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, compCommute
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, compCommute
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: compCommute
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compCommute
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.compCommute
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.compCommute
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma compCommute()
                                ensures forall a^54: Library.Nat.T, b^40:
                                Library.Nat.T :: Library.Nat.comp(a^54,
                                b^40) == Library.Nat.comp(b^40, a^54)
         { }
[Debug] SymbolTbl.resolve_and_find: Library.Nat.compId
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, compId
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, compId
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, compId
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, compId
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: compId
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compId
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.compId
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.compId
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma compId()
                                ensures forall a^55: Library.Nat.T ::
                                Library.Nat.comp(a^55, Library.Nat.id) ==
                                a^55
         { }
[Debug] SymbolTbl.resolve_and_find: Library.Nat.compValid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, compValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, compValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, compValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, compValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: compValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.compValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.compValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma compValid()
                                ensures forall a^56: Library.Nat.T, b^41:
                                Library.Nat.T ::
                                Library.Nat.valid(Library.Nat.comp(a^56,
                                b^41)) ==> Library.Nat.valid(a^56) &&
                                Library.Nat.valid(b^41)
         { }
[Debug] SymbolTbl.resolve_and_find: Library.Nat.frameId
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, frameId
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, frameId
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, frameId
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, frameId
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: frameId
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameId
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.frameId
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frameId
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma frameId()
                                ensures forall a^57: Library.Nat.T ::
                                Library.Nat.frame(a^57, Library.Nat.id) ==
                                a^57
         { }
[Debug] SymbolTbl.resolve_and_find: Library.Nat.compFrameInv
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, compFrameInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, compFrameInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, compFrameInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, compFrameInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: compFrameInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: compFrameInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.compFrameInv
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.compFrameInv
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma compFrameInv()
                                ensures forall a^58: Library.Nat.T, b^42:
                                Library.Nat.T ::
                                Library.Nat.valid(Library.Nat.frame(a^58,
                                b^42)) ==>
                                Library.Nat.comp(Library.Nat.frame(a^58,
                                b^42), b^42) == a^58
         { }
[Debug] SymbolTbl.resolve_and_find: Library.Nat.fpuValid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, fpuValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, fpuValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, fpuValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, fpuValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.fpuValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma fpuValid()
                                ensures forall a^59: Library.Nat.T, b^43:
                                Library.Nat.T, c^9: Library.Nat.T ::
                                Library.Nat.fpuAllowed(a^59, b^43) &&
                                Library.Nat.valid(a^59) &&
                                Library.Nat.valid(Library.Nat.comp(a^59,
                                c^9)) ==>
                                Library.Nat.valid(Library.Nat.comp(b^43,
                                c^9))
         { }
[Debug] SymbolTbl.resolve_and_find: Library.Nat.fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: fpuReflexive
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.fpuReflexive
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.fpuReflexive
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma fpuReflexive()
                                ensures forall a^60: Library.Nat.T ::
                                Library.Nat.valid(a^60) ==>
                                Library.Nat.fpuAllowed(a^60, a^60)
         { }
[Debug] SymbolTbl.resolve_and_find: Library.Nat.frameValid
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, frameValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, frameValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, frameValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, frameValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: frameValid
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: frameValid
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.frameValid
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.frameValid
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma frameValid()
                                ensures forall a^61: Library.Nat.T, b^44:
                                Library.Nat.T ::
                                Library.Nat.valid(Library.Nat.frame(a^61,
                                b^44)) ==> Library.Nat.valid(a^61) &&
                                Library.Nat.valid(b^44)
         { }
[Debug] SymbolTbl.resolve_and_find: Library.Nat.weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Nat, weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Nat, weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Nat, weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Nat, weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Nat
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: scope_entries: frameCompInv,
        compFrameInv, compId, id, idValid, compAssoc, T, weak_frameCompInv,
        fpuValid, frameId, fpuAllowed, compCommute, valid, fpuReflexive,
        frameValid, frameReflexive, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: weak_frameCompInv
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Nat.weak_frameCompInv
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Nat.weak_frameCompInv
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify lemma weak_frameCompInv()
                                ensures forall a^62: Library.Nat.T, b^45:
                                Library.Nat.T ::
                                Library.Nat.valid(Library.Nat.comp(a^62,
                                b^45)) ==>
                                Library.Nat.valid(Library.Nat.frame(Library.Nat.comp(a^62,
                                b^45), b^45))
         { }
[Debug] SymbolTbl.resolve_and_find: Library.Auth.T
[Debug] SymbolTbl.resolve.go_forward: scope: $Root
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Library, Auth, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Library
[Debug] SymbolTbl.resolve.go_forward: ids2: Library, Auth, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: Auth, T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: Type,
        CancellativeResourceAlgebra, SetRA, ResourceAlgebra,
        LatticeResourceAlgebra, Frac, Nat, Auth, KeySetRA
[Debug] SymbolTbl.resolve.go_forward: ids2: Auth, T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve.go_forward: scope: Library.Auth
[Debug] SymbolTbl.resolve.go_forward: tbl.tbl_path: 
[Debug] SymbolTbl.resolve.go_forward: ids1: T
[Debug] SymbolTbl.resolve.go_forward: scope_entries: top, compFrameInv,
        compId, id, idValid, compAssoc, af_proj1, T, M, weak_frameCompInv,
        fpuValid, f_proj1, frameId, frag, fpuAllowed, af_proj2, compCommute,
        auth_frag, valid, fpuReflexive, frameValid, comp, compValid, frame
[Debug] SymbolTbl.resolve.go_forward: ids2: T
[Debug] SymbolTbl.resolve.go_forward: subst: 
[Debug] SymbolTbl.resolve_and_find: orig_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: alias_qual_ident: Library.Auth.T
[Debug] SymbolTbl.resolve_and_find: subst: [  ]

[Debug] Rewriter.Symbol.reify rep type T = data Library.Auth.T {
          case frag(f_proj1: Library.Auth.M.T)
            case auth_frag(af_proj1: Library.Auth.M.T, af_proj2:
                           Library.Auth.M.T)
            case top()
        }
[Debug] SymbolTbl.resolve_and_find: frag
[Debug] SymbolTbl.resolve_and_find_exn fail: tbl_curr: $Root
[Error] File "lib/library/resource_algebra.rav", line 175, columns 4-14:
175 |     rep type T = data { 
          ^^^^^^^^^^
Error: Unknown identifier frag.
[Debug] 
---------
Raised at Util__Error.fail in file "lib/util/error.ml", line 10, characters 24-51
Called from Ast__Rewriter.resolve_and_find in file "lib/ast/rewriter.ml", line 934, characters 52-95
Called from Ast__Rewriter.Syntax.Let_syntax.map in file "lib/ast/rewriter.ml", line 31, characters 13-18
Called from Ast__Rewriter.Syntax.Let_syntax.map in file "lib/ast/rewriter.ml", line 30, characters 22-27
Called from Ast__Rewriter.Syntax.Let_syntax.bind in file "lib/ast/rewriter.ml", line 24, characters 22-27
Called from Base__List.fold_map.(fun) in file "src/list.ml", line 524, characters 23-31
Called from Base__List.count_map in file "src/list.ml", line 486, characters 13-17
Called from Base__List.map in file "src/list.ml" (inlined), line 510, characters 15-31
Called from Base__List.fold_map in file "src/list.ml", line 523, characters 4-88
Called from Ast__Rewriter.Syntax.Let_syntax.bind in file "lib/ast/rewriter.ml", line 24, characters 22-27
Called from Ast__Rewriter.Syntax.Let_syntax.bind in file "lib/ast/rewriter.ml", line 24, characters 22-27
Called from Ast__Rewriter.List.iter.(fun) in file "lib/ast/rewriter.ml", line 373, characters 59-64
Called from Base__List0.fold in file "src/list0.ml", line 37, characters 27-37
Called from Ast__Rewriter.List.iter in file "lib/ast/rewriter.ml", line 373, characters 4-72
Called from Ast__Rewriter.Syntax.Let_syntax.bind in file "lib/ast/rewriter.ml", line 24, characters 22-27
Called from Ast__Rewriter.eval_with_user_state in file "lib/ast/rewriter.ml", line 65, characters 16-52
Called from Ast__Rewriter.eval in file "lib/ast/rewriter.ml", line 57, characters 18-23
Called from Backend__Checker.check_module in file "lib/backend/checker.ml", line 218, characters 22-138
Called from Dune__exe__Raven.parse_and_check_cu in file "bin/raven.ml", line 38, characters 15-67
Called from Dune__exe__Raven.parse_and_check_all in file "bin/raven.ml", line 52, characters 20-77

