;; This buffer is for text that is not saved, and for Lisp evaluation.
;; To create a file, visit it with C-x C-f and enter text in its buffer.

interface D { type T }

interface C {
  type T1
  module X[D1: D] {
    type T = D1.T
    type T2 = T1
  }
}

module A[B: C] {
  module E { type T = Int } : D
  module F = B.X[E]
}

module C1 { type T1 = Bool } : C

module G = A[C1]

symbols
D -> ...
D.T -> ...
C -> ...
C.T1 -> ...
A -> ...
A.E -> ...
A.E.T -> ...
C1 -> ... 
C1.T1 -> ...

Root:
D -> D
C -> C
A -> A
C1 -> C1
G -> Alias(A, A.B -> C1)

C1:
T1 -> C1.T1
C1.X -> Alias(C.X)

A:
B -> Alias(C)
E -> A.E
F -> Alias(A.B.X, A.B.X.D -> A.E)

A.E:
T -> A.E.T

initial subst:
[empty]

initial path:
G.B.T1

follow alias G -> A[B -> C1]
add subst:

A.B -> C1
---
A -> G

new path after alias:

A.B.T1

apply subst:

C1.T1


-----

initial subst:
[empty]

initial path:
G.F.T

follow alias G -> A[B -> C1]
add subst:

A.B -> C1
---
A -> G

apply old subst to new subst:

A.B -> C1
---
A -> G

new paths after alias:

A.F.T

apply subst:

A.F.T

follow alias A.F -> A.B.X[D1 -> A.E]
add subst:

A.B.X.D1 -> A.E
---
A.B.X -> A.F

apply old subst to new subst:

C1.X.D1 -> A.E
---
C1.X -> A.F

new path after alias:

C1.X.T

apply subst:

C1.X.T

follow alias C1.X -> C.X

add subst:
---
C.X -> C1.X

apply old subst to new subst:
---
C.X -> C1.X

new path after alias:

C.X.T

apply subst:

C.X.T

found symbol:
type C.X.T = C.X.D1.T

found subst:
[ C.X -> C1.X,
  C1.X.D1 -> A.E,
  C1.X -> A.F,
  A.B.X.D1 -> A.E
  A.B.X -> A.F
  A.B -> C1
  A -> G

apply subst to symbol name:
C.X.T -> C1.X.T -> A.F.T -> G.F.T

apply subst to symbol:
C.X.D1.T -> C1.X.D1.T -> A.E.T -> G.E.T

type C.X.T = G.E.T