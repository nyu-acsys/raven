pred p1(x: Int) {
  x % 2 == 0
}

inv p2(x: Int) {
  x % 2 == 0
}

proc p(implicit ghost x: Int)
  returns (y: Int)
  atomic requires p1(x)
  atomic requires p2(x)
  atomic ensures p1(y)
{
  var phi: AtomicToken := bindAU();

  var x0: Int := openAU(phi);

  var m: Int = 5;
  abortAU(phi);


  var x1: Int := openAU(phi);
  unfold p1(x1);
  unfold p2(x1);
  fold p1(x1);
  commitAU(phi, x1);
  y := x1;
  fold p2(x1);
  // return x1+4;

}