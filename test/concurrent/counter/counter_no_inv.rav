module IntTp : Library.Type {
  rep type T = Int
}

module IntSetRA = Library.SetRA[IntTp]

type T = Int

field c: T

type Something = data { case onething(a: Int); case nothing } 

pred counter(x: Ref; v: Int) {
  own(x, c, 0, 1.0)
}

proc incr(x: Ref) 
  requires counter(x, 0)
  ensures counter(x, 1)
{
  var v: Something = onething(5);
  // var res: Bool := CAS(x.c, IntSetRA.set_constr({||}), IntSetRA.set_constr({||}));
  var res: Bool := CAS(x.c, 0, 1);
}