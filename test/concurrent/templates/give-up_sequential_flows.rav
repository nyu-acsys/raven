include "./flows_ra.rav"
include "./ccm_instances.rav"

import Library.KeysetRA


import Library.Type
import Library.CancellativeResourceAlgebra

interface Keyspace {
  rep type T

  val ks: Set[T]
}

module IntKeyspace : Keyspace {
  rep type T = Int

  val ks: Set[T] = {| k: Int :: true |}
}

interface SearchStructureSpec {
  type K
  val keyspace: Set[K]

  type Op = data { case searchOp ; case insertOp ; case deleteOp }

	pred opSpec(op: Op, k: K, c_in: Set[K], c_out: Set[K], res: Bool) {
    op == searchOp() ? 
      c_in == c_out && res == (k in c_in) :
    (op == insertOp() ?
      c_out == c_in ++ {| k |} && res == (k !in c_in) :
      c_out == c_in -- {| k |} && res == (k in c_in))
	}
}

interface Node {
  rep type T
}

interface NodeImpl {

  module Spec : SearchStructureSpec
  import Spec._

  module K_Type : Library.Type {
    rep type T = K
  }

  module Multiset_K = Multiset[K_Type]
  module Flow_K = FlowsRA[Multiset_K]

  import Flow_K._
  import Multiset_K.elem

  pred node(n: Ref; c: Set[K], flow_int: Flow_K)

  // func outsets(outset: Map[Ref, Set[K]]) returns (ret: Set[K])
  // {
  //   {| k: K :: exists r: Ref :: k in outset[r] |}
  // }

  // func keyset(inset: Set[K], outset: Map[Ref, Set[K]]) returns (ret: Set[K])
  // {
  //   inset -- outsets(outset)
  // }

  func inset(i: Flow_K.T, n: Ref) returns (ret: Set[K])
  {
    {| k : K :: (i.inf[n])[k] > 0 |}
  }

  func insets(i: Flow_K.T) returns (ret: Set[K])
  {
    {| k : K :: exists n: Ref :: n in i.dom && k in inset(i, n) |}
  }

  func outset(i: Flow_K.T, n: Ref) returns (ret: Set[K])
  {
    {| k : K :: (i.out[n])[k] > 0 |}
  }

  func outsets(i: Flow_K.T) returns (ret: Set[K])
  {
    {| k: K :: exists n: Ref :: n !in i.dom && k in outset(i,n) |}
  }

  func keyset(i: Flow_K.T) returns (ret: Set[K])
  {
    insets(i) -- outsets(i)
  }

  proc createRoot()
    returns (r: Ref)
    ensures node(r, {||}, 
    Flow_K.int({| l:Ref :: l == r ? Multiset_K.fromSet(keyspace) : Multiset_K.id |}, zeroFlow, {| r |}))

  proc decisiveOp(dop: Op, n: Ref, k: K, implicit ghost c: Set[K], implicit ghost i_n: Flow_K)
    returns (succ: Bool, res: Bool, implicit ghost c1: Set[K])
    requires k in keyset(i_n)
    requires node(n, c, i_n)
    ensures node(n, c1, i_n)
    ensures succ ==> opSpec(dop, k, c, c1, res) 
    ensures !succ ==> c == c1

  proc findNext(n: Ref, k: K, implicit ghost c: Set[K], implicit ghost i_n: Flow_K)
    returns (ret: Bool, n1: Ref)
    requires k in inset(i_n, n)
    requires node(n, c, i_n)
    ensures node(n, c, i_n) && 
      (ret ?   
        k in outset(i_n, n1) :
        k !in outsets(i_n))

  proc inRange(n: Ref, k: K, implicit ghost c: Set[K], implicit ghost i_n: Flow_K)
    returns (ret: Bool)
    requires node(n, c, i_n)
    ensures node(n, c, i_n) && (ret ==> k in inset(i_n, n))


  lemma nodeSepStar(n: Ref, c1: Set[K], c2: Set[K], i_n1: Flow_K, i_n2: Flow_K)
    requires node(n, c1, i_n1) && node(n, c2, i_n2)
    ensures false
}

// interface SearchStructure {
//   module Spec: SearchStructureSpec
//   import Spec._

//   pred css(r: Ref, c: Set[K])

//   // inv cssInv(r: Ref)

//   proc create()
//     returns (r: Ref)
//     ensures css(r, {||})

//   // proc cssOp(dop: Op, r: Ref, k: K, implicit ghost c: Set[K])
//   //   returns (res: Bool, implicit ghost c1: Set[K])
//   //   requires k in keyset
//   //   // requires cssInv(r)
//   //   atomic requires cssR(r, c)
//   //   atomic ensures cssR(r, c1) && opSpec(dop, k, c, c1, res)
// }


module GiveUpTemplate[Node: NodeImpl] {
  module Spec: SearchStructureSpec = Node.Spec
  import Node.Spec._
  import Node._
  import Node.Flow_K._
  import Node.Multiset_K.elem
  import Node.Multiset_K.fromSet

  module Ref_Type : Library.Type {
    rep type T = Ref
  }

  module SetRefRA = Library.SetRA[Ref_Type]

  module AuthSetRef = Library.Auth[SetRefRA]
  
  // module K_Type : Library.Type {
  //   rep type T = K
  // }
  
  module Keyset_K = KeysetRA[K_Type]
  module AuthKeyset_K = Library.Auth[Keyset_K]
  // module Multiset_K = Multiset[K_Type]
  // module Flow_K = FlowsRA[Multiset_K]
  module AuthFlow_K = Library.Auth[Flow_K]

  field authSet: AuthSetRef
  field authKS: AuthKeyset_K
  field authFlow: AuthFlow_K

  // lemma autoLemmas() {
  //   AuthKeyset_K.autoLemmas();
  //   AuthFlow_K.autoLemmas();
  // }

  pred globalinv(g_i: Flow_K, r: Ref) {
      Flow_K.valid(g_i) &&
      r in g_i.dom &&
      outsets(g_i) == {||} &&
      inset(g_i, r) == keyspace  
  }

  pred globalRes(r: Ref, c: Set[K], g_i: Flow_K) {
    own(r, authKS, AuthKeyset_K.auth( Keyset_K.ksPair( keyspace, c ))) &&
    own(r, authSet, AuthSetRef.auth(SetRefRA.set_constr(g_i.dom))) && 
    own(r, authFlow, AuthFlow_K.auth(g_i)) &&
    globalinv(g_i, r)
  }

  pred nodePred(r: Ref, n: Ref; c: Set[K], i_n: Flow_K) {
    own(r, authKS, AuthKeyset_K.frag( Keyset_K.ksPair( keyset(i_n), c ) )) &&
    own(r, authFlow, AuthFlow_K.frag(i_n)) &&
    i_n.dom == {|n|} && 
    node(n, c, i_n)
  }

  pred inFP(r: Ref, n: Ref) {
    own(r, authSet, AuthSetRef.frag(SetRefRA.set_constr({|n|})) )
  }

  pred cssR(r: Ref, c: Set[K], g_i: Flow_K, contents: Map[Ref, Set[K]], i: Map[Ref, Flow_K]) {
    (forall n: Ref :: n in g_i.dom ==> 
        (nodePred(r, n, contents[n], i[n]))) 
      && 
      globalRes(r, c, g_i)
      
  }

  pred css(r: Ref, c: Set[K]) {
    exists contents: Map[Ref, Set[K]], i: Map[Ref, Flow_K], g_i: Flow_K :: 
      cssR(r, c, g_i, contents, i)
  }

  proc create()
    returns (r: Ref)
    ensures css(r, {||})
  {
    // autoLemmas();
    r := Node.createRoot();

    var root_flow_int: Flow_K := int(
        {| l:Ref :: l == r ? fromSet(keyspace) : fromSet({||})  |},
        zeroFlow(),
        {|r|}
      );

    r := new(
      authKS: AuthKeyset_K.auth_frag(
        Keyset_K.ksPair(keyspace, {||}),
        Keyset_K.ksPair(keyspace, {||})
      ),
      authSet:AuthSetRef.auth(SetRefRA.set_constr({|r|})),
      authFlow: AuthFlow_K.auth_frag(
        root_flow_int, root_flow_int
      )
    );

    assert own(r, authKS, AuthKeyset_K.auth_frag(Keyset_K.ksPair(keyspace, {||}), Keyset_K.ksPair(keyspace, {||})));

    fold globalinv(root_flow_int, r);
    fold globalRes(r, {||}, root_flow_int);

    // assert keyset(root_flow_int) == keyspace;
    fold nodePred(r, r, {||}, root_flow_int);
    fold cssR(r, {||}, root_flow_int, {| r:Ref :: {||} |}, {| l:Ref :: l == r ? root_flow_int : Flow_K.id |});

    assert cssR(r, {||}, root_flow_int, {| r:Ref :: {||} |}, {| l:Ref :: l == r ? root_flow_int : Flow_K.id |});
    fold css(r, {||});
  }

  lemma cssInFp(r: Ref, n:Ref, c: Set[K], g_i: Flow_K, contents: Map[Ref, Set[K]], i: Map[Ref, Flow_K])
    requires cssR(r, c, g_i, contents, i)
    requires inFP(r, n)
    ensures n in g_i.dom
    ensures cssR(r, c, g_i, contents, i)
    ensures inFP(r, n)
  {
    // autoLemmas();
    unfold cssR(r, c, g_i, contents, i);
    unfold globalRes(r, c, g_i);
    unfold inFP(r, n);

    assert own(r, authSet, AuthSetRef.auth(SetRefRA.set_constr(g_i.dom)));
    
    assert n in g_i.dom;

    fold globalRes(r, c, g_i);
    fold inFP(r, n);
    fold cssR(r, c, g_i, contents, i);
  }

  lemma fpInCss(r: Ref, n:Ref, c: Set[K], g_i: Flow_K, contents: Map[Ref, Set[K]], i: Map[Ref, Flow_K])
    requires cssR(r, c, g_i, contents, i)
    requires n in g_i.dom
    ensures inFP(r, n)
    ensures cssR(r, c, g_i, contents, i)
  {
    // autoLemmas();
    unfold cssR(r, c, g_i, contents, i);
    unfold globalRes(r, c, g_i);

    fpu(r, authSet, AuthSetRef.auth(SetRefRA.set_constr(g_i.dom)), AuthSetRef.auth_frag(SetRefRA.set_constr(g_i.dom), SetRefRA.set_constr(g_i.dom)));

    fold globalRes(r, c, g_i);
    fold inFP(r, n);
    fold cssR(r, c, g_i, contents, i);
  }

  lemma flowIntStep(r: Ref, n: Ref, k: K, n1: Ref, c: Set[K], contents: Map[Ref, Set[K]], i: Map[Ref, Flow_K], g_i: Flow_K)
    requires cssR(r, c, g_i, contents, i)
    requires k in outset(i[n], n1)
    ensures cssR(r, c, g_i, contents, i)
    ensures k in inset(i[n1], n1)
    ensures n1 in g_i.dom
  {
    assume false;
  }

  lemma root_fp(r: Ref, implicit ghost c: Set[K], implicit ghost contents: Map[Ref, Set[K]], implicit ghost i: Map[Ref, Flow_K], implicit ghost g_i: Flow_K)
    requires cssR(r, c, g_i, contents, i)
    ensures cssR(r, c, g_i, contents, i)
    ensures r in g_i.dom
  {
    // autoLemmas();
    unfold cssR(r, c, g_i, contents, i);
    unfold globalRes(r, c, g_i);
    unfold globalinv(g_i, r);

    // assert own(r, authSet, AuthSetRef.auth(SetRefRA.set_constr(g_i.dom)));
    
    assert r in g_i.dom;

    fold globalinv(g_i, r);
    fold globalRes(r, c, g_i);
    fold cssR(r, c, g_i, contents, i);
  }

  lemma inset_root_keyspace(r: Ref, c: Set[K], g_i: Flow_K, contents: Map[Ref, Set[K]], i: Map[Ref, Flow_K])
    requires cssR(r, c, g_i, contents, i)
    ensures cssR(r, c, g_i, contents, i)
    ensures keyspace subseteq inset(i[r], r)
  {
    // autoLemmas();
    unfold cssR(r, c, g_i, contents, i);
    unfold globalRes(r, c, g_i);

    unfold globalinv(g_i, r);

    assert r in g_i.dom;

    unfold nodePred(r, r, contents[r], i[r]);

    AuthFlow_K.compFrameInv();
    AuthFlow_K.compValid();
    AuthFlow_K.weak_frameCompInv();

    assert own(r, authFlow, AuthFlow_K.frag(i[r]));
    // assert own(r, authFlow, AuthFlow_K.auth(g_i));

    assert own(r, authFlow, AuthFlow_K.auth_frag( 
        g_i, i[r]
        ));

    // assert AuthFlow_K.valid(AuthFlow_K.auth_frag(g_i, i[r]));
    // assert AuthFlow_K.valid(AuthFlow_K.frag(i[r]));
    
    assert inset(g_i, r) == keyspace;
    assert Flow_K.valid(Flow_K.frame(g_i, i[r]));

    assert r !in Flow_K.frame(g_i, i[r]).dom;

    assert inset(Flow_K.frame(g_i, i[r]), r) == {||};

    // assert valid(Flow_K.frame(g_i, i[r]).out[r]);

    // Flow_K.frame_inflow_unfold(g_i, i[r], r);

    assert keyspace subseteq inset(i[r], r);

    fold nodePred(r, r, contents[r], i[r]);

    fold globalinv(g_i, r);
    fold globalRes(r, c, g_i);
    fold cssR(r, c, g_i, contents, i);
  }

  proc traverse(r: Ref, n: Ref, k: K, implicit ghost c: Set[K], implicit ghost contents: Map[Ref, Set[K]], implicit ghost i: Map[Ref, Flow_K], implicit ghost g_i: Flow_K)
    returns (ret: Ref)
    requires inFP(r, n)
    requires k in inset(i[n], n)
    requires k in keyspace
    requires cssR(r, c, g_i, contents, i)
    ensures cssR(r, c, g_i, contents, i)
    ensures k in keyset(i[ret])
    ensures inFP(r, ret)
  {
    // autoLemmas();
    cssInFp(r, n, c, g_i, contents, i);

    unfold cssR(r, c, g_i, contents, i);

    unfold nodePred(r, n, contents[n], i[n]);

    var in_range: Bool := Node.inRange(n, k, contents[n], i[n]);

    if (in_range) {
      var succ: Bool;
      var n1: Ref;
      succ, n1 := Node.findNext(n, k, contents[n], i[n]);

      assert own(r, authKS, AuthKeyset_K.frag( Keyset_K.ksPair( keyset(i[n]), contents[n] ) ));
      assert node(n, contents[n], i[n]);
      fold nodePred(r, n, contents[n], i[n]);
      fold cssR(r, c, g_i, contents, i);

      if (succ) {
        // assert k in outset
        flowIntStep(r, n, k, n1, c, contents, i, g_i);

        fpInCss(r, n1, c, g_i, contents, i);

        var n2: Ref := traverse(r, n1, k, c, contents, i, g_i);
        // assert false;
        return n2;
      } else {
        // assert false;
        return n;
      }

    } else {
      assert own(r, authKS, AuthKeyset_K.frag( Keyset_K.ksPair( keyset(i[n]), contents[n] ) ));
      // assert own(r, authFlow, AuthFlow_K.frag(i[n]));

      fold nodePred(r, n, contents[n], i[n]);
      fold cssR(r, c, g_i, contents, i);


      inset_root_keyspace(r, c, g_i, contents, i);

      root_fp(r, c, contents, i, g_i);
      fpInCss(r, r, c, g_i, contents, i);

      var n3: Ref := traverse(r, r, k, c, contents, i, g_i);

      // assert false;
      return n3;
    }

    
  }


  lemma keyset_theorem(r: Ref, dop: Op, k: K, c_n: Set[K], c_n1: Set[K], c: Set[K], res: Bool, k_n: Set[K])
    returns (c1: Set[K])
    requires opSpec(dop, k, c_n, c_n1, res)
    requires own(r, authKS, AuthKeyset_K.auth(Keyset_K.ksPair(keyspace, c)))
    requires own(r, authKS, AuthKeyset_K.frag(Keyset_K.ksPair(k_n, c_n)))
    // requires own(r, authFlow, AuthFlow_K.auth(g_i))requires own(r, authFlow, AuthFlow_K.frag(g_i))
    requires c_n1 subseteq k_n
    requires k in k_n
    requires k in keyspace

    ensures opSpec(dop, k, c, c1, res)
    ensures own(r, authKS, AuthKeyset_K.auth(Keyset_K.ksPair(keyspace, c1)))
    ensures own(r, authKS, AuthKeyset_K.frag(Keyset_K.ksPair(k_n, c_n1)))
  {
    // autoLemmas();

    unfold opSpec(dop, k, c_n, c_n1, res);

    if (dop == searchOp() || !res) {
      c1 := c;
      assert own(r, authKS, AuthKeyset_K.auth_frag(Keyset_K.ksPair(keyspace, c), Keyset_K.ksPair(k_n, c_n)));
      assert AuthKeyset_K.valid(AuthKeyset_K.auth_frag(Keyset_K.ksPair(keyspace, c), Keyset_K.ksPair(k_n, c_n)));
      assert Keyset_K.valid(Keyset_K.frame(Keyset_K.ksPair(keyspace, c), Keyset_K.ksPair(k_n, c_n)));
      assert c_n subseteq c;
      fold opSpec(dop, k, c, c1, res);
    } else {
      if (dop == insertOp()) {
        c1 := c ++ {| k |};

        assert own(r, authKS, AuthKeyset_K.auth_frag(Keyset_K.ksPair(keyspace, c), Keyset_K.ksPair(k_n, c_n)));
        assert Keyset_K.valid(Keyset_K.frame(Keyset_K.ksPair(keyspace, c), Keyset_K.ksPair(k_n, c_n)));
        assert k !in c_n;
        assert k !in c;

        // assert false;
        
        fold opSpec(dop, k, c, c1, res);

        assert AuthKeyset_K.fpuAllowed(
          AuthKeyset_K.auth_frag(Keyset_K.ksPair(keyspace, c), Keyset_K.ksPair(k_n, c_n)), 
          AuthKeyset_K.auth_frag(Keyset_K.ksPair(keyspace, c1), Keyset_K.ksPair(k_n, c_n1))
        ) with {
          assume forall k: Keyset_K ::
            Keyset_K.ksPair(keyspace, c) == Keyset_K.comp(k, Keyset_K.ksPair(k_n, c_n)) ==>
            Keyset_K.ksPair(keyspace, c1) == Keyset_K.comp(k, Keyset_K.ksPair(k_n, c_n1));
        }
        
        fpu(r, authKS, 
        AuthKeyset_K.auth_frag(Keyset_K.ksPair(keyspace, c), Keyset_K.ksPair(k_n, c_n)),
        AuthKeyset_K.auth_frag(Keyset_K.ksPair(keyspace, c1), Keyset_K.ksPair(k_n, c_n1)));

        // assert false;
        
      } else {
        c1 := c -- {| k |};

        assert own(r, authKS, AuthKeyset_K.auth_frag(Keyset_K.ksPair(keyspace, c), Keyset_K.ksPair(k_n, c_n)));
        assert Keyset_K.valid(Keyset_K.frame(Keyset_K.ksPair(keyspace, c), Keyset_K.ksPair(k_n, c_n)));
        assert k in c_n;
        assert k in c;
        
        fold opSpec(dop, k, c, c1, res);

        assert AuthKeyset_K.fpuAllowed(
          AuthKeyset_K.auth_frag(Keyset_K.ksPair(keyspace, c), Keyset_K.ksPair(k_n, c_n)), 
          AuthKeyset_K.auth_frag(Keyset_K.ksPair(keyspace, c1), Keyset_K.ksPair(k_n, c_n1))
        );
        
        fpu(r, authKS, 
        AuthKeyset_K.auth_frag(Keyset_K.ksPair(keyspace, c), Keyset_K.ksPair(k_n, c_n)), 
        AuthKeyset_K.auth_frag(Keyset_K.ksPair(keyspace, c1), Keyset_K.ksPair(k_n, c_n1)));

        // assert false;
      }
    }


  }

  proc cssOp(dop: Op, r: Ref, k: K, implicit ghost c: Set[K])
    returns (res: Bool, implicit ghost c1: Set[K])
    requires k in keyspace
    requires css(r, c)
    ensures css(r, c1) && opSpec(dop, k, c, c1, res)
  {
    // autoLemmas();


    ghost var contents: Map[Ref, Set[K]];
    ghost var i: Map[Ref, Flow_K];
    ghost var g_i: Flow_K;

    unfold css(r, c);
    contents, i, g_i :| cssR(r, c, g_i, contents, i);

    inset_root_keyspace(r, c, g_i, contents, i);
    root_fp(r, c, contents, i, g_i);

    // assume i[r].inf[r] == fromSet(keyspace);
    fpInCss(r, r, c, g_i, contents, i);

    var n: Ref := traverse(r, r, k, c, contents, i, g_i);
    var succ: Bool;
    var res1: Bool;
    var c_n: Set[K];

    cssInFp(r, n, c, g_i, contents, i);
    unfold cssR(r, c, g_i, contents, i);
    unfold nodePred(r, n, contents[n], i[n]);
    AuthFlow_K.compValid();
    AuthFlow_K.compFrameInv();
    assert own(r, authFlow, AuthFlow_K.frag(i[n]));
    succ, res1, c_n := Node.decisiveOp(dop, n, k, contents[n], i[n]);

    if (succ) {
      var c_1: Set[K];

      unfold globalRes(r, c, g_i);
      unfold opSpec(dop, k, contents[n], c_n, res1);
      fold opSpec(dop, k, contents[n], c_n, res1);

      assert k in keyset(i[n]);
      assert c_n subseteq contents[n] ++ {| k |};

      assert own(r, authKS, AuthKeyset_K.frag( Keyset_K.ksPair(keyset(i[n]), contents[n])));
      assert contents[n] subseteq keyset(i[n]);

      c1 := keyset_theorem(r, dop, k, contents[n], c_n, c, res1, keyset(i[n]));

      assert own(r, authFlow, AuthFlow_K.frag(i[n]));
      var contents1: Map[Ref, Set[K]] := contents[n := c_n];

      // assert own(r, authKS, AuthKeyset_K.auth( Keyset_K.ksPair( keyspace, c1 )));

      fold globalRes(r, c1, g_i);

      assert own(r, authFlow, AuthFlow_K.frag(i[n]));
      assert own(r, authKS, AuthKeyset_K.frag( Keyset_K.ksPair(keyset(i[n]), c_n) ));
      // assert 

      AuthKeyset_K.compFrameInv();
      AuthKeyset_K.compValid();
      
      fold nodePred(r, n, contents1[n], i[n]);
      fold cssR(r, c1, g_i, contents1, i);
      assert cssR(r, c1, g_i, contents1, i);
      fold css(r, c1);

      // assert false;

      return res1, c1;
    } else {
      fold nodePred(r, n, contents[n], i[n]);
      fold cssR(r, c, g_i, contents, i);
      assert cssR(r, c, g_i, contents, i);
      fold css(r, c);

      var res2: Bool;
      var c2: Set[K];
      res2, c2 := cssOp(dop, r, k, c);

      // assert false;
      return res2, c2;
    }

  }

}
	
