include "ccm.rav"

import Library.Type
// import Library.CancellativeResourceAlgebra

module Multiset[K: Type]: CCM {
  rep type T = Map[K, Int]

  val id: T := {| k: K :: 0 |}

  func comp(a:T, b:T) returns (ret:T)
  { 
    {| k: K :: a[k] + b[k] |} 
  }
  
  func frame(a:T, b:T) returns (ret:T)
  {  
    {| k: K :: a[k] - b[k] |}
  }

  func valid(a:T) returns (ret: Bool)
  {
    forall k: K :: {a[k]} a[k] >= 0
  }

  func fromSet(s: Set[K]) returns (ret:T)
  {
    {| k: K :: k in s ? 1 : 0 |}
  }

  func elem(m: T, k: K) returns (ret: Bool)
  {
    m[k] > 0
  }
}
