module KeysetRA[K: Library.Type] : Library.CancellativeResourceAlgebra {
    rep type T = data {
        case prodKS(keyset: Set[K], contents: Set[K])
        case topKS
    }

    val id: T = prodKS({||}, {||});

    func valid(n:T) returns (ret:Bool) {
        n == prodKS(n.keyset, n.contents) && n.contents subseteq n.keyset
    }


    func ks_composable(a:T, b:T) returns (ret:Bool) {
        valid(a) && valid(b) && a.keyset ** b.keyset == {||}
    }

    func comp(a:T, b:T) returns (ret:T) {
        a == id ? 
            b :
            (b == id ? 
                a :
                (ks_composable(a, b) ?
                    prodKS(a.keyset ++ b.keyset, a.contents ++ b.contents) : topKS)
            )
    }

    func frame(a:T, b:T) returns (ret:T) {
        b == id ? a :
        (valid(a) && valid(b) && b.keyset subseteq a.keyset && b.contents subseteq a.contents ?
            prodKS(a.keyset -- b.keyset, a.contents -- b.contents) : topKS)
    }

    func fpuAllowed(a:T, b:T) returns (ret:Bool) {
      valid(a) && valid(b) && b.keyset subseteq a.keyset
    }
}