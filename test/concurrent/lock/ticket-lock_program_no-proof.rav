include "lock.rav"

interface TicketLock[R: LockResource] { 
  field next: Int
  field curr: Int

  inv lock_inv(l: Ref; r: R)

  proc create(r: R) returns (l: Ref) 
    requires resource(r)
    ensures lock_inv(l, r)
  {
    l := new(next: 0, curr: -1);
  }
  
  proc acquire(l: Ref, implicit ghost r: R) 
    requires lock_inv(l, r)
    ensures resource(r)
  {
    val x: Int := l.next;
    
    val res: Bool := cas(l.next, x, x+1);

    if (res) {
      var acq_flag: Bool = false;
      
      while(!acq_flag) {
        var crr: Int := l.curr;
        
        if (x == crr) {
          acq_flag := true;
        }
      }
    
      return;

    } else {
      acquire(l);
    }
  }

  proc release(l: Ref, implicit ghost r: R) 
    requires lock_inv(l, r) && resource(r)
    ensures true
  {
    val crr: Int := l.curr;
    val c1: Int := c+1;

    l.curr := c1;
  }
}