include "lock.rav"

module TicketLock[R: LockResource] {
  import R.resource

  field next: Int
  field curr: Int

  module IntSet = Library.DisjSet[Library.IntType]
  module AuthDisjInts = Library.Auth[IntSet]

  ghost field tickets: AuthDisjInts

  pred is_lock(l: Ref; r: R, b: Bool) {
    exists n: Int, c: Int ::
      own(l.next, n, 1.0) && n >= 0
      && own(l.curr, c, 1.0)
      && (b ? 
        own(l.tickets, AuthDisjInts.frag(IntSet.set({|c|}))) :
        resource(r)
      )
      && own(l.tickets, 
        AuthDisjInts.auth_frag(
          IntSet.set({|i: Int :: 0 <= i && i < n|}), 
          IntSet.set({||})
        )
      )
  }

  proc create(r: R) returns (l: Ref)
    requires resource(r)
    ensures is_lock(l, r, false)
  {
    l := new (
      next: 0, curr: -1, 
      tickets: AuthDisjInts.auth_frag(
        IntSet.set({||}), IntSet.set({||})
      )
    );

    fold is_lock(l, r, false);
  }

  proc wait_loop(l: Ref, x: Int, implicit ghost r: R, implicit ghost b: Bool)
    requires own(l.tickets, AuthDisjInts.frag(IntSet.set({|x|})))
    atomic requires is_lock(l, r, b)
    atomic ensures is_lock(l, r, true) && b == false && resource(r)
  {
    ghost val phi := bindAU();
    r, b := openAU(phi);
    unfold is_lock(l);
    val c: Int := l.curr;    

    if (x == c) {
      fold is_lock(l, r, true);
      commitAU(phi);
      return;
    } else {
      fold is_lock(l, r, b);
      abortAU(phi);  
      r, b := openAU(phi);
      wait_loop(l, x);
      commitAU(phi);
    }
  }

  proc acquire(l: Ref, implicit ghost r: R, implicit ghost b: Bool)
    atomic requires is_lock(l, r, b)
    atomic ensures is_lock(l, r, true) && b == false && resource(r)
  {
    ghost val phi := bindAU();
        
    r, b := openAU(phi);
    unfold is_lock(l);
    val nxt: Int := l.next;
    fold is_lock(l, r, b);
    abortAU(phi);

    r, b := openAU(phi);
    unfold is_lock(l);
    val res: Bool := cas(l.next, nxt, nxt+1);

    if (res) {
      fpu(l, tickets, 
        AuthDisjInts.auth_frag(
          IntSet.set({|i: Int :: 0 <= i && i < nxt|}), 
          IntSet.set({||})
        ), 
        AuthDisjInts.auth_frag(
          IntSet.set({|i: Int :: 0 <= i && i < nxt+1|}), 
          IntSet.set({|nxt|})
        )
      );
      fold is_lock(l, r, b);
      abortAU(phi);
      r, b := openAU(phi);
      wait_loop(l, nxt);
      commitAU(phi);

    } else {
      fold is_lock(l, r, b);
      abortAU(phi);
      r, b := openAU(phi);
      acquire(l);
      commitAU(phi);
    }
  }
  
  
  proc release(l: Ref, implicit ghost r: R)
    atomic requires is_lock(l, r, true) && resource(r)
    atomic ensures is_lock(l, r, false)
  {
    ghost val phi := bindAU();  
    r := openAU(phi);
    unfold is_lock(l, r, true);
    val c: Int := l.curr;
    fold is_lock(l, r, true);
    abortAU(phi);
      
    val c1: Int := c + 1;
    r := openAU(phi);
    unfold is_lock(l, r, true);
    l.curr := c1;
    fold is_lock(l, r, false);
    commitAU(phi);
  }
}
