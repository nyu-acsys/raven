include "lock.rav"

module SpinLock[R: LockResource] : Lock {
  field bit: Bool
  
  import R.resource
  
  pred lock_rep(l: Ref; b: Bool) {
    own(l, bit, b, 1.0)
  }

  proc create(r: R)
    returns (l: Ref)
    requires resource(r)
    ensures is_lock(l, r, false)
  {
    l := new (bit: false, agr: Agree.agree(r));
    fold lock_rep(l, false);
    fold is_lock(l, r, false);
  }

  proc acquire(l: Ref, implicit ghost r: R, implicit ghost b: Bool)
    atomic requires is_lock(l, r, b)
    atomic ensures is_lock(l, r, true) && b == false && resource(r)
  {
    ghost val phi: AtomicToken = bindAU();
        
    ghost var b1: Bool;
    r, b1 := openAU(phi);
    unfold is_lock(l, r, b1);
    unfold lock_rep(l, b1);
    val res: Bool := cas(l.bit, false, true);
    {!
      fold lock_rep(l, true);
      fold is_lock(l, r, true);
      if (res) {
        commitAU(phi);
      } else {
        abortAU(phi);
      }
    !}

    if (res) {
      return;
    }

    r, b1 := openAU(phi);
    assert is_lock(l, r, b1);
    acquire(l, r, b1);
    commitAU(phi);
  }
  
  proc release(l: Ref, implicit ghost r: R)
    atomic requires is_lock(l, r, true) && resource(r)
    atomic ensures is_lock(l, r, false)
  {
    ghost val phi: AtomicToken = bindAU();  
    r := openAU(phi);
    unfold is_lock(l, r, true);
    unfold lock_rep(l, true);
    l.bit := false;
    fold lock_rep(l, false);
    fold is_lock(l, r, false);
    commitAU(phi);
  }
}
