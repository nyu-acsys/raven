//include "lock.rav"

interface LockResource : Library.Type {
  rep type T
  
  // Resource protected by a lock
  pred resource(r: T)

  axiom exclusive(r: T)
    requires resource(r) && resource(r)
    ensures false
}

interface Lock {
  module R: LockResource

  inv lock_inv(l: Ref; r: R)

  proc create(r: R) returns (l: Ref)
    requires R.resource(r)
    ensures lock_inv(l, r)

  proc acquire(l: Ref, implicit ghost r: R)
    requires lock_inv(l, r)
    ensures R.resource(r)

  proc release(l: Ref, implicit ghost r: R)
    requires lock_inv(l, r) && R.resource(r)
    ensures true
}

module TicketLock[R: LockResource] : Lock {
  import R.resource
  
  field next: Int
  field curr: Int

  module IntSet = Library.DisjSet[Library.IntType]
  module AuthDisjInts = Library.Auth[IntSet]
 
  ghost field tickets: AuthDisjInts

  inv lock_inv(l: Ref; r: R) {
    exists n: Int, c: Int, b: Bool ::
      own(l.next, n, 1.0) && n >= 0
      && own(l.curr, c, 1.0)
      && own(l.tickets,
        AuthDisjInts.auth(
          IntSet.set({| i: Int :: 0 <= i && i < n |})
         )
      ) && (b ? 
        own(l.tickets, AuthDisjInts.frag(IntSet.set({|c|}))) :
        resource(r)
      )
  }

  proc create(r: R) returns (l: Ref)
    requires resource(r)
    ensures lock_inv(l, r)
  {
    l := new (
      next: 0, curr: -1,
      tickets: AuthDisjInts.auth(
        IntSet.set({||})
      )
    );
    fold lock_inv(l, r)[b := false];
  }
  
  proc acquire(l: Ref, implicit ghost r: R)
    requires lock_inv(l, r)
    ensures resource(r)
  {
    ghost var lockAcq: Bool;    
    unfold lock_inv(l, r)[lockAcq := b];
    val nxt := faa(l.next, 1);
    fpu(l.tickets,
      AuthDisjInts.auth_frag(
        IntSet.set({|i: Int :: 0 <= i && i < nxt|}),
        IntSet.set({||})
      ),
      AuthDisjInts.auth_frag(
        IntSet.set({|i: Int :: 0 <= i && i < nxt+1|}),
        IntSet.set({|nxt|})
      )
    );
    fold lock_inv(l, r)[b := lockAcq];
      
    var crr: Int := -1;
    while (nxt != crr)
      invariant lock_inv(l, r) && (
        nxt == crr ? resource(r) :
          own(l.tickets, AuthDisjInts.frag(IntSet.set({|nxt|})))
      )
    {
      unfold lock_inv(l, r)[ lockAcq := b ];
      crr := l.curr;
      fold lock_inv(l, r)[ b := nxt == crr || lockAcq];
    }
  }

  proc release(l: Ref, implicit ghost r: R)
    requires lock_inv(l, r) && resource(r)
    ensures true
  {
    ghost var lockAcq: Bool;
    
    unfold lock_inv(l, r)[ lockAcq := b ];
    {! if (!lockAcq) R.exclusive(r); !}
    
    val crr: Int := l.curr;
    fold lock_inv(l, r)[b := true];
    
    val c1: Int := crr+1;
    unfold lock_inv(l, r);

    l.curr := c1;
    
    fold lock_inv(l, r)[b := false];
  }
}