
interface Queue {

    // definitions

    module Option_Int = Library.Option[Library.IntType]
    import Option_Int.some
    import Option_Int.none

    field head: Ref
    field tail: Ref
    field next: Ref
    field value: Option_Int

    // predicate p holds for all values stored in the queue
    pred p(v: Option_Int)

    lemma p_none()
        ensures p(none)
    
    lemma p_dup(v: Option_Int)
        requires p(v)
        ensures p(v) && p(v)

    auto pred node(n: Ref) {
        exists v: Option_Int, nx: Ref :: 
            own(n.next, nx) && own(n.value, v) && p(v) && is_queue(nx)
    }

    inv is_queue(n: Ref) {
            n == null ? true : node(n)
    }

    inv queue(q: Ref) {
        exists hd: Ref, tl: Ref :: 
            own(q.head, hd) && is_queue(hd) && hd != null
        && own(q.tail, tl) && is_queue(tl) && tl != null
    }

    // algorithms

    proc create()
        returns (q: Ref)
        ensures queue(q)
    {
        fold is_queue(null);
        var tl: Ref;
        tl := new(next: null, value: none);
        p_none();
        fold is_queue(tl);
        var hd: Ref;
        hd := new(next: tl, value: none);
        p_none();
        fold is_queue(hd);
        q := new(head: hd, tail: tl);
        fold queue(q);
    }

    proc dequeue(q: Ref)
        returns (v: Option_Int)
        requires queue(q)
        ensures queue(q) && p(v)
    {
        unfold queue(q);
        var hd: Ref := q.head;
        fold queue(q);

        if (hd == null) {
            p_none();
            return none;
        }
        
        unfold is_queue(hd);
        var nx: Ref := hd.next;
        fold is_queue(hd);

        if (nx == null) {
            p_none();
            return none;
        } else {
            unfold queue(q);
            var b: Bool := cas(q.head, hd, nx);
            fold queue(q);


            if (b) {
                unfold is_queue(hd);
                v := hd.value;
                p_dup(v);
                fold is_queue(hd);
                return v;
            } else {
                v := dequeue(q);
                return v;
            }
        }
    }

    proc set_tail(q:Ref, n: Ref)
        requires queue(q) && is_queue(n) && n != null
    {
        unfold queue(q);
        var tl: Ref := q.tail;
        fold queue(q);

        unfold is_queue(tl);
        var nx: Ref := tl.next;
        fold is_queue(tl);

        if (nx == null) {

            unfold is_queue(tl);
            var b: Bool := cas(tl.next, null, n);
            fold is_queue(tl);
            if (b) {
                unfold queue(q);
                var b: Bool := cas(q.tail, tl, n);
                fold queue(q);
            } else {
                set_tail(q, n);
            }
        } else {
            unfold queue(q);
            var b: Bool := cas(q.tail, tl, nx);
            fold queue(q);
            set_tail(q, n);
        }
    }

    proc enqueue(q: Ref, v: Int)
        requires queue(q) && p(some(v))
        ensures queue(q)
    {
        var n: Ref;
        n := new(next: null, value: some(v));

        fold is_queue(null);
        fold is_queue(n);

        set_tail(q, n);
    }


}