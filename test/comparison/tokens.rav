include "shareable_predicates.rav"

module TokenRA : Library.ResourceAlgebra {
    rep type T = data {
        case noToken;
        case tokens(authCount: Int, authPerm: Real, fragCount: Int, fragPerm: Real);
        case identity;
        case top
    }

    val id: T = identity

    func comp(a: T, b: T) returns (ret: T) {
        a == id ?
            b :
        (b == id ?
            a :
        (valid(a) && valid(b) ?            
        (a == tokens(a.authCount, a.authPerm, a.fragCount, a.fragPerm) && b == tokens(b.authCount, b.authPerm, b.fragCount, b.fragPerm) && ((a.authCount == 0 && a.authPerm == 0.0) || (b.authCount == 0 && b.authPerm == 0.0)) && 
        valid(tokens(a.authCount + b.authCount, a.authPerm + b.authPerm, a.fragCount + b.fragCount, a.fragPerm + b.fragPerm)) ?
            tokens(a.authCount + b.authCount, a.authPerm + b.authPerm, a.fragCount + b.fragCount, a.fragPerm + b.fragPerm) :
        // (a == noToken && b == noToken ?
            // noToken :
            top
        // )
        ) :
        top
        
        ))
    }

    func valid(a: T) returns (ret: Bool) {
        a == noToken || a == id ||
        (a == tokens(a.authCount, a.authPerm, a.fragCount, a.fragPerm) &&
            a.authCount >= 0 && 
            a.authPerm >= 0.0 && a.authPerm <= 1.0 &&
            a.fragCount >= 0 && 
            a.fragPerm >= 0.0 && a.fragPerm <= 1.0 &&
            (
                (a.fragCount <= a.authCount && a.fragPerm <= a.authPerm ) || 
                (a.authCount == 0 && a.authPerm == 0.0)
            ) &&
            (
                (a.authCount > 0 && a.authPerm > 0.0) || 
                (a.fragCount > 0 && a.fragPerm > 0.0)
            ) &&
            (a.authCount > a.fragCount ==> a.authPerm > a.fragPerm)) &&
            (a.authCount == a.fragCount ==> a.authPerm == a.fragPerm)
    }

    func frame(a: T, b: T) returns (ret: T) {
        b == id ?
            a :
        (
            // a == noToken && b == noToken ?
            // noToken :
        (a == b ? 
            id :
        (a == tokens(a.authCount, a.authPerm, a.fragCount, a.fragPerm) && 
        b == tokens(b.authCount, b.authPerm, b.fragCount, b.fragPerm) && valid(a) && valid(b) &&
        ((b.authCount == 0 && b.authPerm == 0.0) || (b.authCount == a.authCount && b.authPerm == a.authPerm)) && b.fragCount <= a.fragCount && b.fragPerm <= a.fragPerm ?
            tokens(a.authCount - b.authCount, a.authPerm - b.authPerm, a.fragCount - b.fragCount, a.fragPerm - b.fragPerm) :
            top
        )))
    }

    func fpuAllowed(a: T, b: T) returns (ret: Bool) {
        a == b ? true : 
        (valid(a) && valid(b) ?
        (a == noToken ?
            (b == tokens(b.authCount, 1.0, b.authCount, 1.0)) :
        (a == tokens(a.authCount, a.authPerm, a.fragCount, a.fragPerm) && 
        b == tokens(b.authCount, b.authPerm, b.fragCount, b.fragPerm) ?
            (a.authCount - a.fragCount == b.authCount - b.fragCount  &&
            a.authPerm - a.fragPerm == b.authPerm - b.fragPerm )
            :
        (a == tokens(a.authCount, a.authPerm, a.fragCount, a.fragPerm) ?
            a.authCount == a.fragCount && a.authPerm == a.fragPerm :
            false)
        )) : 
        false)
    }
}

interface Tokens {
    module SharePred: ShareablePredicate

    field v: TokenRA

    pred noTokens(x: Ref) {
        own(x.v, TokenRA.noToken)
    }

    pred tokenCounter(x: Ref, n: Int) {
        exists q: Real :: 
            q < 1.0 && own(x.v, TokenRA.tokens(n, q, 0, 0.0)) && 
            (q > 0.0 ==> SharePred.p_chunk(x, 1.0-q))
    }

    pred token(x: Ref) {
        exists q: Real :: SharePred.p_chunk(x, q) && own(x.v, TokenRA.tokens(0, 0.0, 1, q)) 
    }

    lemma token_interact(x: Ref)
        requires noTokens(x)
        requires token(x)
        ensures false

    lemma token_mutate_incr(x: Ref, n: Int)
        requires tokenCounter(x, n)
        ensures tokenCounter(x, n + 1) && token(x)

    lemma token_mutate_decr(x: Ref, n: Int)
        requires n > 1 && tokenCounter(x, n) && token(x)
        ensures tokenCounter(x, n - 1)

    lemma token_mutate_decr_last(x: Ref)
        requires tokenCounter(x, 1) && token(x)
        ensures noTokens(x) && SharePred.p_chunk(x, 1.0)

    lemma token_mutate_generate(x: Ref)
        requires noTokens(x)
        ensures tokenCounter(x, 1) && token(x)
}