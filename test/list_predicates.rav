// No null values
// No support for implications outside of iterated star
// Evaluate the new command

field key: Int
field next: Ref

// try insertion with this
pred list(start: Ref, end: Ref, nmap: Map[Ref, Ref]) {
  (start == end) ? true : 
    (own(start, next, nmap[start], 1.0) && list(nmap[start], end, nmap))
} 

proc append(x: Ref, y: Ref, z: Ref, nmap: Map[Ref, Ref]) 
  requires list(x, y, nmap)
  requires list(y, z, nmap)
  ensures list(x, z, nmap)
{
  if (x != y) {
    unfold list(x,y, nmap);
    append(x.next, y, z, nmap);
    assert list(x.next, z, nmap);
    fold list(x, z, nmap);
    // assert false;
  }
  // assert false;
}

proc deque(x: Ref, y: Ref, nmap: Map[Ref, Ref]) 
  returns (xn: Ref)
  requires list(x, y, nmap)
  requires x != y
  ensures list(xn, y, nmap)
{
  unfold list(x, y, nmap);
  xn := x.next;
}

proc insert(x: Ref, y: Ref, z: Ref, n: Ref, nmap: Map[Ref, Ref])
  returns (nmap1: Map[Ref, Ref])
  requires list(x, y, nmap)
  requires own(n, next, nmap[n], 1.0)
  requires n != y
  ensures list(n, y, nmap1)
  ensures nmap1[n] == x
  ensures forall a: Ref :: a != n ==> nmap1[a] == nmap[a]  
{
  nmap1 := nmap;
  n.next := x;
  nmap1[n] := x;
  assert list(x, y, nmap1);
  fold list(n, y, nmap1);
}

// pred list_seg(start: Ref, end: Ref, i: Int, j: Int, l: Map[Int, Int], nmap: Map[Ref, Ref], kmap: Map[Ref, Int]) {
//   ((start == end) ? true :
//     (own(start, next, nmap[start], 1.0) && own(start, key, kmap[start], 1.0) 
//       && l[i] == kmap[start] && list_seg(nmap[start], end, i+1, j, l, nmap, kmap)))
// }

// proc append2(x: Ref, y: Ref, z: Ref, l1: Int, l2: Int, l3: Int, ls: Map[Int, Int], nmap: Map[Ref, Ref], kmap: Map[Ref, Int])
//   requires list_seg(x, y, l1, l2, ls, nmap, kmap)
//   requires list_seg(y, z, l2, l3, ls, nmap, kmap)
//   ensures list_seg(x, z, l1, l3, ls, nmap, kmap)
// {
//   if (x != y) {
//     unfold list_seg(x, y, l1, l2, ls, nmap, kmap);
//     append2(x.next, y, z, l1+1, l2, l3, ls, nmap, kmap);

//     assert list_seg(x.next, z, l1+1, l3, ls, nmap, kmap);
//     fold list_seg(x, z, l1, l3, ls, nmap, kmap);
//     // assert false;
//   }

//   // assert false;
  
// }

// proc deque(x: Ref, y: Ref, i: Int, j: Int, l: Map[Int, Int], nmap: Map[Ref, Ref], kmap: Map[Ref, Int])
//   returns (xn: Ref)
//   requires (x != y)
//   requires list_seg(x, y, i, j, l, nmap, kmap)
//   ensures list_seg(xn, y, i+1, j, l, nmap, kmap)
// {
//   unfold list_seg(x, y, i, j, l, nmap, kmap);
//   xn := x.next;
//   // assert false;
// }

// proc insert(x: Ref, y: Ref, i: Int, j: Int, l: Map[Int, Int], nmap: Map[Ref, Ref], kmap: Map[Ref, Int], k : Int)
//   returns (l1: Map[Int, Int], idx: Int, nmap1: Map[Ref, Ref], kmap1: Map[Ref, Int])
//   requires (x != y)
//   requires list_seg(x, y, i, j, l, nmap, kmap)
//   requires forall i1 : Int :: i <= i1 < j ==> l[i1] <= l[i1+1]
//   requires kmap[x] < k <= kmap[y]
//   ensures i < idx <= j
//   ensures list_seg(x, y, i, j+1, l1, nmap1, kmap1)
//   ensures l1[idx] == k
//   ensures forall i1 : Int :: i <= i1 < idx ==> l1[i1] == l[i]
//   ensures forall i1 : Int :: idx < i1 <= j+1 ==> l1[i1] == l[i-1]
// {
//   var prev : Ref;
//   var curr : Ref;
//   var currkey : Int;
  
//   prev := x;
//   curr := x;
//   unfold list_seg(x, y, i, j, l, nmap, kmap);
//   currkey := curr.key;
//   idx := i;

//   fold list_seg(x, prev, i, idx, l, nmap, kmap);
//   fold list_seg(curr, y, idx, j, l, nmap, kmap);

//   while (currkey < k)
//     invariant list_seg(x, prev, i, idx, l, nmap, kmap)
//     invariant list_seg(curr, y, idx, j, l, nmap, kmap)
//     invariant curr != y
//   {
//     prev := curr;

//     unfold list_seg(curr, y, idx, j, l, nmap, kmap);
    
//     curr := curr.next;
//     currkey := curr.key;

//     idx := idx + 1;
//   }

//   var n: Ref;
//   n := new(key: k, next: curr);
//   prev.next := n;

// }