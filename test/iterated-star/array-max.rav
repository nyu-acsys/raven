/* Encoding of arrays */

interface IArray {
  rep type T
  
  func loc(a: T, i: Int) returns (r: Ref)
  func len(a: T) returns (l: Int)
  func first(r: Ref) returns (a: T)
  func second(r: Ref) returns (i: Int)
  
  auto lemma all_diff()
    ensures forall a:T, i: Int :: first(loc(a, i)) == a && second(loc(a, i)) == i
    
  auto lemma len_nonneg()
    ensures forall a:T :: len(a) >= 0
}

module ArrayMax[M: IArray] {
  field value: Int

  pred arr(a: M, m: Map[Int, Int]) {
    forall j: Int :: 0 <= j < M.len(a) ==> own(M.loc(a, j).value, m[j], 1.0)
  }
  
  pred is_max(i: Int, m: Map[Int, Int], u: Int) {
    forall j: Int :: 0 <= j && j < u ==> m[j] <= m[i]
  }
  
  proc max(a: M, implicit ghost m: Map[Int, Int]) 
    returns (x: Int)
    requires arr(a, m)
    ensures  arr(a, m)
    ensures  M.len(a) == 0 ? x == -1 : (0 <= x && x < M.len(a))
    ensures  is_max(x, m, M.len(a))
  {
    // No longer needed, since autoLemma dependencies have been added.
    // M.all_diff();
    // M.len_nonneg();
    var z : Int;
    if (M.len(a) == 0) {
      x := -1;
    } else {
      var y: Int;
      x := 0;
      y := M.len(a) - 1;

      while (x != y)
        invariant arr(a, m)
        invariant 0 <= x && x <= y && y < M.len(a)
        invariant    (forall i: Int ::
                            (((0 <= i && i < x) || (y < i && i < M.len(a)))
                        ==> m[i] < m[x]) || 
                        (((0 <= i && i < x) || (y < i && i < M.len(a)))
                        ==> m[i] <= m[y])
                        )
      {
        M.all_diff();
        unfold arr(a,m);
        
        var tmp1 : Int := M.loc(a, x).value;
        var tmp2 : Int := M.loc(a, y).value;
        
        if (tmp1 <= tmp2) {
          x := x + 1;
        } else {
          y := y - 1;
        }
        fold arr(a,m);
      }
    }

    fold is_max(x, m, M.len(a));
  }
}


