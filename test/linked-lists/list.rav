module List {

  field next: Ref

  pred lseg(x: Ref, y: Ref) {
    x == y ? true :
    (exists z: Ref :: own(x.next, z, 1.0) && lseg(z, y))
  }

  lemma append_tail(x: Ref, y: Ref, z: Ref)
    requires lseg(x, y) && own(y.next, z, 1.0)
    ensures lseg(x, z)
  {
    unfold lseg(x, y);
    if (x == y) {
      fold lseg(z, z);
      fold lseg(y, z);
    } else {
      val xnext: Ref := x.next;
      append_tail(xnext, y, z);
      fold lseg(x, z);
    }
  }

  proc traverse(x: Ref)
    requires lseg(x, null)
    ensures lseg(x, null)
  {
    var curr: Ref := x;
    fold lseg(x, curr);
    while (curr != null)
      invariant lseg(x, curr) && lseg(curr, null)
    {
      unfold lseg(curr, null);
      ghost var old_curr: Ref := curr;
      curr := curr.next;
      append_tail(x, old_curr, curr);
    }
  }
}
