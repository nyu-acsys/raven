field c: Int

pred pred1(x:Ref, v:Int) {
    true
}

proc p() {
    var x: Ref;
    inhale exists v: Int :: own(x, c, v, 1.0) && pred1(x, v);
    exhale exists v: Int :: own(x, c, v, 1.0) && pred1(x, v);

    // After witness computation, the above exhale gets replaced by:
    //     exhale own(x, c, c$Heap[x].frac_proj1, 1.0) && pred1(x, c$Heap[x].frac_proj1);

    // which gets translated to:
    //     exhale own(x, c, c$Heap[x].frac_proj1, 1.0) 
    //     exhale pred1(x, c$Heap[x].frac_proj1);

    // After the first exhale, the value `c$Heap[x].frac_proj1` is no longer available.
}