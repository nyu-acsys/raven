include "array.rav"

interface LockResource : Library.Type {
  rep type T
  
  type S

  // Resource protected by a lock
  pred resource(r: T; s: S)

  axiom exclusive(r: T)
    requires resource(r) && resource(r)
    ensures false
}

interface Lock[R: LockResource] {
  import R.resource

  module RS : Library.Type {
    rep type T = (R, R.S)
  }

  module Agree = Library.Agree[RS]

  ghost field agr: Agree
  

  // Lock representation invariant
  pred lock_rep(l: Ref; b: Bool)

  // Abstract predicate describing a lock 
  pred is_lock(l: Ref; r: R, s: R.S, b: Bool) {
    own(l.agr, Agree.agree((r, s)))
    && lock_rep(l, b)
    && (b ? true : resource(r, s))
  }

  proc create(r: R, implicit ghost s: R.S)
    returns (l: Ref)
    requires resource(r, s)
    ensures is_lock(l, r, s)

  proc acquire(l: Ref, implicit ghost r: R, implicit ghost s: R.S)
    atomic requires is_lock(l, r, s)
    atomic ensures is_lock(l, r, s) && resource(r, s)

  proc release(l: Ref, implicit ghost r: R, implicit ghost s: R.S)
    atomic requires is_lock(l, r, s) && resource(r, s)
    atomic ensures is_lock(l, r, s)
}


interface PArray : Library.Type {
  module E : Library.Type

  rep type T

  module A = Array[E]

  inv parr(a:T; l: Int, m: Map[Int, E], lck: Ref)

  proc get(a: T, x: Int, implicit ghost m: Map[Int, E], implicit ghost l: Int, implicit ghost lck: Ref)
    returns (res: E)
    requires parr(a, l, m, lck)
    requires 0 <= x < l
    ensures parr(a, l, m, lck)
    ensures m[x] == res

  proc set(pa: T, x: Int, e: E, implicit ghost m: Map[Int, E], implicit ghost len: Int, implicit ghost lck: Ref)
    returns (a1: T)
    requires parr(pa, len, m, lck)
    requires 0 <= x < len
    ensures parr(pa, len, m, lck)
    ensures parr(a1, len, m[x := e])

  proc create(len: Int, d: E)
    returns (a: T)
    requires 0 <= len
    ensures parr(a, len, {| i: Int :: 0 <= i < len ? d : A.default |})
}

module Make[E: Library.Type, LockF: Lock] : PArray {
  rep type T = Ref

  type Desc = data {
    case base(elements: A.T)
    case diff(adata: T, index: Int, value: E)
  }

  field dist: Int
  field desc: Desc

  module R : LockResource {
    rep type T = Ref
    
    type S = (Int, Map[Int, E])

    pred resource(a: T; s: S) {
      exists av: Desc, d: Int ::
        own(a.desc, av) && own(a.dist, d) &&
        (av == base(av.elements) ? 
        A.arr(av.elements, s#1) && s#0 == A.length(av.elements) :
        (exists m1: Map[Int, E] :: parr(av.adata, s#0, m1) && 0 <= av.index < s#0 && s#1 == m1[av.index := av.value])
      ) 
    }

    lemma exclusive(r: T)
      requires resource(r) && resource(r)
      ensures false
    {
      unfold resource(r);
      unfold resource(r);
    }
  }

  module L = LockF[R]

  field lock: Ref

  inv parr(a: T; len: Int, m: Map[Int, E], lck: Ref) {
    exists b: Bool ::
      own(a.lock, lck) && L.is_lock(lck, a, (len, m), b)
  }

  proc create(len: Int, d: E)
    returns (a: T)
    requires 0 <= len
    ensures parr(a, len, {| i: Int :: 0 <= i < len ? d : A.default |})
  {
    val elems := A.alloc(len, d);
    a := new(lock: null, desc: base(elems), dist: 0);
    val m := {| i: Int :: 0 <= i < len ? d : A.default |};
    fold R.resource(a, (len, m));
    val l := L.create(a);
    a.lock := l;
    fold parr(a, len, m);
  }

  proc to_array(a: T, implicit ghost m: Map[Int, E], implicit ghost len: Int)
    returns (b: A.T)
    requires parr(a, len, m)
    ensures parr(a, len, m) && R.resource(a, (len, m)) && A.arr(b, m) && A.length(b) == len
  {
    unfold parr(a);
    var lck := a.lock;
    fold parr(a);
    unfold parr(a);
    L.acquire(lck);
    fold parr(a);
    
    ghost var m1: Map[Int, E];
    unfold R.resource(a)[ m1 := m1 ];

    val av := a.desc;
    if (av == base(av.elements)) {
      b := A.copy(av.elements);
    } else {
      b := to_array(av.adata);
      unfold parr(av.adata);
      lck := av.adata.lock;
      fold parr(av.adata);
      unfold parr(av.adata);
      L.release(lck, av.adata);
      fold parr(av.adata);
      unfold A.arr(b);
      A.loc(b, av.index).A.value := av.value;
      fold A.arr(b, m);      
    }
    fold R.resource(a, (len, m))[m1 := m1];
  }

  proc rebase(pa: T, implicit ghost m: Map[Int, E], implicit ghost len: Int)
    returns (b: A.T)
    requires parr(pa, len, m)
    ensures own(pa.desc, base(b)) && (exists d: Int :: own(pa.dist, d))
    ensures A.arr(b, m) && len == A.length(b)
  {
    b := to_array(pa);
    unfold R.resource(pa);
    pa.desc := base(b);
  }

  proc get(pa: T, x: Int, implicit ghost m: Map[Int, E], implicit ghost len: Int, implicit ghost lck: Ref)
    returns (res: E)
    requires parr(pa, len, m, lck)
    requires 0 <= x < len
    ensures parr(pa, len, m, lck)
    ensures m[x] == res
  {
    val b := rebase(pa);
    unfold A.arr(b);
    res := A.loc(b, x).A.value;
    fold A.arr(b, m);
    fold R.resource(pa, (len, m));
    unfold parr(pa);
    var lck1 := pa.lock;
    fold parr(pa);
    unfold parr(pa);
    L.release(lck1, pa, (len, m));
    fold parr(pa);
  }

  proc set(pa: T, x: Int, e: E, implicit ghost m: Map[Int, E], implicit ghost len: Int, implicit ghost lck: Ref)
    returns (pb: T)
    requires parr(pa, len, m, lck)
    requires 0 <= x < len
    ensures parr(pa, len, m, lck)
    ensures parr(pb, len, m[x := e])
  {
    val a := rebase(pa);
    val d := pa.dist;
    if (d == A.length(a)) {
      val b := A.copy(a);
      unfold A.arr(b);
      A.loc(b, x).A.value := e;
      fold A.arr(b, m[x := e]);
      unfold parr(pa);
      var lck := pa.lock;
      fold parr(pa);
      unfold parr(pa);
      fold R.resource(pa, (len, m));
      L.release(lck, pa, (len, m));
      fold parr(pa);
      pb := new (lock: null, desc: base(b), dist: 0);
      fold R.resource(pb, (len, m[x := e]));
      lck := L.create(pb);
      pb.lock := lck;
      fold parr(pb);
      return pb;
    } else {
      unfold A.arr(a);
      val v := A.loc(a, x).A.value;
      A.loc(a, x).A.value := e;
      fold A.arr(a, m[x := e]);
      pb := new (lock: null, desc: base(a), dist: d + 1);
      fold R.resource(pb, (len, m[x := e]));
      var lck := L.create(pb);
      pb.lock := lck;
      fold parr(pb, len, m[x := e]);
      pa.desc := diff(pb, x, v);
      unfold parr(pa);
      lck := pa.lock;
      fold parr(pa);
      unfold parr(pa);
      fold R.resource(pa, (len, m))[m1 := m[x := e]];
      L.release(lck, pa, (len, m));
      fold parr(pa);
      return pb;
    }
  }
}