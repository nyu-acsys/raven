interface Array[E: Library.Type] {
  rep type T

  func loc(a: T, i: Int) returns (r: Ref)
  func length(a: T) returns (l: Int)
  func first(r: Ref) returns (a: T)
  func second(r: Ref) returns (i: Int)
  
  auto axiom all_diff()
    ensures forall a:T, i: Int :: {loc(a, i)} first(loc(a, i)) == a && second(loc(a, i)) == i
    
  auto axiom len_nonneg()
    ensures forall a:T :: {length(a)} length(a) >= 0

  field value: E

  val default: E

  val default_map: Map[Int, E] = {| i: Int :: default |}

  auto pred arr(a: T; m: Map[Int, E]) {
    (forall j: Int :: {m[j]} 0 <= j < length(a) ==> own(loc(a, j).value, m[j], 1.0)) 
    && (forall j: Int :: {m[j]} (0 > j || j >= length(a)) ==> m[j] == default)
  }

  proc alloc(len: Int, d: E) returns (a: T)
    requires 0 <= len
    ensures length(a) == len && arr(a, {| i: Int :: 0 <= i < len ? d : default |})

  func injective(m: Map[Int, E], i: Int, j: Int) returns (res: Bool)
  {
    forall i1: Int, i2: Int :: {m[i1], m[i2]} i <= i1 < i2 < j ==> m[i1] != m[i2]
  }

  // func inverse_help(m: Map[Int, E], i: Int, j: Int, k: E, i1: Int) returns (res: Int)
  // {
  //   m[i1] == k && i1 < j ? i1 : (i1 < j ? inverse_help(m, i, j, k, i1+1) : i-1)
  // }
  
  func inverse(m: Map[Int, E], i: Int, j: Int, k: E) returns (res: Int)
  // {
  //   inverse_help(m, i, j, k, i)
  // }

  // lemma invertable_help(m: Map[Int, E], i: Int, j: Int, i1: Int, i2: Int)
  //   requires injective(m, i, j)
  //   ensures i <= i2 <= i1 < j ==> inverse_help(m, i, j, m[i1], i2) == i1
  // {
  //   if (i <= i2 <= i1 < j) {
  //     if (i2 < i1) {
  //       invertable_help(m, i, j, i1, i2+1);
  //     } 
  //   }
  // }

  auto lemma invertable()
    ensures forall m: Map[Int, E], i: Int, j: Int, i1: Int :: {m[i1]} 
      injective(m, i, j) && i <= i1 < j ==> inverse(m, i, j, m[i1]) == i1
  // {
  //   assert forall m: Map[Int, E], i: Int, j: Int, i1: Int :: {injective(m, i, j), m[i1]} 
  //     injective(m, i, j) && i <= i1 < j ==> inverse(m, i, j, m[i1]) == i1 with {
  //     if (injective(m, i, j) && i <= i1 < j) {
  //       invertable_help(m, i, j, i1, i);
  //     }
  //   }
  // }

  // lemma invertable2_help(m: Map[Int, E], i: Int, j: Int, k: E, i2: Int)
  //   ensures i <= i2 <= inverse_help(m, i, j, k, i2) < j ==> m[inverse_help(m, i, j, k, i2)] == k
  //   ensures i2 > inverse_help(m, i, j, k, i2) || inverse_help(m, i, j, k, i2) >= j ==> inverse_help(m, i, j, k, i2) == i-1
  // {
  //   if (i2 < j) {
  //     invertable2_help(m, i, j, k, i2+1);
  //   }
  // }

  auto lemma invertable2()
    ensures forall m: Map[Int, E], i: Int, j: Int, k: E :: {inverse(m, i, j, k)} 
      (i <= inverse(m, i, j, k) < j ==> m[inverse(m, i, j, k)] == k) &&
      (i > inverse(m, i, j, k) || inverse(m, i, j, k) >= j ==> inverse(m, i, j, k) == i-1)
  // {
  //   assert forall m: Map[Int, E], i: Int, j: Int, k: E :: {inverse(m, i, j, k)} 
  //     (i <= inverse(m, i, j, k) < j ==> m[inverse(m, i, j, k)] == k) &&
  //     (i > inverse(m, i, j, k) || inverse(m, i, j, k) >= j ==> inverse(m, i, j, k) == i-1)
  //   with {
  //     invertable2_help(m, i, j, k, i);
  //   }
  // }

  // lemma inverse_update_help(m: Map[Int, E], i: Int, j: Int, k: E, i1: Int, k2: E, i2: Int)
  //   requires inverse_help(m, i, j, k2, i2) < i2 || i1 < i2 || i1 >= j 
  //   ensures inverse_help(m[i1 := k], i, j, k2, i2) == (k == k2 && i2 <= i1 < j ? i1 : inverse_help(m, i, j, k2, i2))
  // {
  //   if (i2 < j) {
  //     inverse_update_help(m, i, j, k, i1, k2, i2+1);
  //   }
  // }

  auto lemma inverse_update()
    ensures forall m: Map[Int, E], i: Int, j: Int, k: E, i1: Int, k2: E :: {inverse(m, i, j, k2), m[i1 := k]} {inverse(m[i1 := k], i, j, k2)} 
      inverse(m, i, j, k2) < i || i1 < i || i1 >= j ==> 
        inverse(m[i1 := k], i, j, k2) == (k == k2 && i <= i1 < j ? i1 : inverse(m, i, j, k2))
  // {
  //   assert forall m: Map[Int, E], i: Int, j: Int, k: E, i1: Int, k2: E :: {inverse(m[i1 := k], i, j, k2)} 
  //     inverse(m, i, j, k2) < i || i1 < i || i1 >= j ==> 
  //       inverse(m[i1 := k], i, j, k2) == (k == k2 && i <= i1 < j ? i1 : inverse(m, i, j, k2)) with {
  //     if (inverse(m, i, j, k2) < i || i1 < i || i1 >= j) {
  //       inverse_update_help(m, i, j, k, i1, k2, i);
  //     }
  //   }
  // }

  func set_of_map(m: Map[Int, E], i: Int, j: Int) returns (res: Set[E])
  {
    {| k: E :: /*injective(m, i, j) &&*/ i <= inverse(m, i, j, k) < j |} //&& m[inverse(m, i, j, k)] == k |}
  }

  lemma injective_split()
    ensures forall m: Map[Int, E], i: Int, j: Int, l: Int :: {injective(m, i, l), injective(m, i, j)} 
      i <= j <= l && injective(m, i, l) ==> injective(m, i, j)
    ensures forall m: Map[Int, E], i: Int, j: Int, l: Int :: {injective(m, i, l), injective(m, j, l)} 
      i <= j <= l && injective(m, i, l) ==> injective(m, j, l)
  {}

  lemma set_of_map_split(m: Map[Int, E], i: Int, j: Int, l: Int)
    requires i <= j <= l && injective(m, i, l)
    ensures set_of_map(m, i, l) == set_of_map(m, i, j) ++ set_of_map(m, j, l)
  { 
  }

  func map_shift(m: Map[Int, E], src: Int, dst: Int, len: Int)
    returns (res: Map[Int, E])
  {
    {| i: Int :: i < dst || dst + len <= i ? m[i] : m[src + (i - dst)] |}
  }

  func map_copy(m1: Map[Int, E], m2: Map[Int, E], src: Int, dst: Int, len: Int)
    returns (res: Map[Int, E])
    //ensures forall i: Int :: {res[i]} {m1[i]} 
      //res[i] == (dst <= i < dst + len ? m2[src + (i - dst)] : m1[i])
  {
    {| i: Int :: dst <= i < dst + len ? m2[src + (i - dst)] : m1[i] |}
  }

  lemma set_of_map_equal(m1: Map[Int, E], m2: Map[Int, E], i1: Int, i2: Int, len: Int)
    requires forall j: Int :: {m1[j]} i1 <= j < i1 + len ==> m1[j] == m2[j + (i2 - i1)]
    requires injective(m1, i1, i1 + len) && injective(m2, i2, i2 + len)
    ensures set_of_map(m1, i1, i1 + len) == set_of_map(m2, i2, i2 + len)
  {
    assert forall x: E ::  x in set_of_map(m2, i2, i2 + len) ==> x in set_of_map(m1, i1, i1 + len) with {
      if (x in set_of_map(m2, i2, i2 + len)) {
        assert m1[inverse(m2, i2, i2 + len, x) - i2 + i1] == m2[inverse(m2, i2, i2 + len, x)];
      }
    }
  }
  
  lemma frame_set_of_map(m: Map[Int, E], i: Int, j: Int)
    requires i <= j
    requires injective(m, i, j)
    ensures forall i1: Int, k: E :: {set_of_map(m[i1 := k], i, j)} 
      i1 < i || j <= i1 ==> set_of_map(m, i, j) == set_of_map(m[i1 := k], i, j)
  { 
   
  }

  // Shift a[src..src+len] to a[dst..dst+len]
  proc arr_shift(a: T, src: Int, dst: Int, len: Int, implicit ghost amap: Map[Int, E])
    requires arr(a, amap)
    requires 0 <= src <= src + len <= length(a) && 0 <= dst <= dst + len <= length(a)
    ensures arr(a, map_shift(amap, src, dst, len))
  {
    if (src < dst) {
      var i: Int := len - 1;
      
      while (i >= 0) 
        invariant arr(a, map_shift(amap, src + i + 1, dst + i + 1, len - i - 1))
        invariant src < dst
        invariant 0 <= src <= src + len <= length(a)
        invariant 0 <= dst <= dst + len <= length(a)
        invariant -1 <= i < len
      {
        //unfold arr(a, map_shift(amap, src + i + 1, dst + i + 1, len - i - 1));
        var tmp: E := loc(a, src + i).value;
        loc(a, dst + i).value := tmp;
        ghost var m : Map[Int, E] := map_shift(amap, src + i, dst + i, len - i);
        assert m == map_shift(amap, src + i + 1, dst + i + 1, len - i - 1)[dst + i := tmp];
        //fold arr(a, m);
        i := i - 1;
      }
    } else if (src > dst) {
      var i: Int := 0;
      while (i < len)
        invariant arr(a, map_shift(amap, src, dst, i))
        invariant src > dst
        invariant 0 <= src <= src + len <= length(a)
        invariant 0 <= dst <= dst + len <= length(a)
        invariant 0 <= i <= len 
      {
        //unfold arr(a, map_shift(amap, src, dst, i));
        var tmp: E := loc(a, src + i).value;
        loc(a, dst + i).value := tmp;
        ghost var m : Map[Int, E] = map_shift(amap, src, dst, i + 1);
        assert m == map_shift(amap, src, dst, i)[dst + i := tmp];
        //fold arr(a, m);
        i := i + 1;
      }
    }
  }

  // Copy a[src..src+len] to b[dst..dst+len]
  proc arr_copy(a: T, b: T, src: Int, dst: Int, len: Int, implicit ghost amap: Map[Int, E], implicit ghost bmap: Map[Int, E] )
    requires arr(a, amap) && arr(b, bmap)
    requires 0 <= src <= src + len <= length(a)
    requires 0 <= dst <= dst + len <= length(b)
    ensures arr(a, amap) && arr(b, map_copy(bmap, amap, src, dst, len))
  {
    var i: Int := 0;
  
    while (i < len)
      invariant arr(a, amap) && arr(b, map_copy(bmap, amap, src, dst, i))
      invariant 0 <= i <= len
      invariant 0 <= src <= src + len <= length(a)
      invariant 0 <= dst <= dst + len <= length(b)
    {
      //unfold arr(a, amap);
      var tmp: E := loc(a, src + i).value;
      //fold arr(a, amap);
      //unfold arr(b, map_copy(bmap, amap, src, dst, i));
      
      
      loc(b, dst + i).value := tmp;
      ghost var m: Map[Int, E] = map_copy(bmap, amap, src, dst, i + 1);
      assert m == map_copy(bmap, amap, src, dst, i)[dst + i := tmp];
      //fold arr(b, m);
      i := i + 1;
    }
  }

}
