// This file is just the concatenation of array.rav and ordered_array.rav, for benchmarking purposes

interface Array[E: Library.Type] {
  rep type T

  func loc(a: T, i: Int) returns (r: Ref)
  func length(a: T) returns (l: Int)
  func first(r: Ref) returns (a: T)
  func second(r: Ref) returns (i: Int)
  
  auto axiom all_diff()
    ensures forall a:T, i: Int :: {loc(a, i)} first(loc(a, i)) == a && second(loc(a, i)) == i
    
  auto axiom len_nonneg()
    ensures forall a:T :: {length(a)} length(a) >= 0

  field value: E

  val default: E

  val default_map: Map[Int, E] = {| i: Int :: default |}

  pred arr(a: T; m: Map[Int, E]) {
    (forall j: Int :: {m[j]} 0 <= j < length(a) ==> own(loc(a, j).value, m[j], 1.0)) 
    && (forall j: Int :: {m[j]} (0 > j || j >= length(a)) ==> m[j] == default)
  }

  proc alloc(len: Int, d: E) returns (a: T)
    requires 0 <= len
    ensures length(a) == len && arr(a, {| i: Int :: 0 <= i < len ? d : default |})

  func injective(m: Map[Int, E], i: Int, j: Int) returns (res: Bool)
  {
    forall i1: Int, i2: Int :: {m[i1], m[i2]} i <= i1 < i2 < j ==> m[i1] != m[i2]
  }

  func inverse(m: Map[Int, E], i: Int, j: Int, k: E) returns (res: Int)

  auto lemma invertable()
    ensures forall m: Map[Int, E], i: Int, j: Int, i1: Int :: {m[i1]} 
      injective(m, i, j) && i <= i1 < j ==> inverse(m, i, j, m[i1]) == i1

  auto lemma invertable2()
    ensures forall m: Map[Int, E], i: Int, j: Int, k: E :: {inverse(m, i, j, k)} 
      (i <= inverse(m, i, j, k) < j ==> m[inverse(m, i, j, k)] == k) &&
      (i > inverse(m, i, j, k) || inverse(m, i, j, k) >= j ==> inverse(m, i, j, k) == i-1)

  auto lemma inverse_update()
    ensures forall m: Map[Int, E], i: Int, j: Int, k: E, i1: Int, k2: E :: {inverse(m, i, j, k2), m[i1 := k]} {inverse(m[i1 := k], i, j, k2)} 
      inverse(m, i, j, k2) < i || i1 < i || i1 >= j ==> 
        inverse(m[i1 := k], i, j, k2) == (k == k2 && i <= i1 < j ? i1 : inverse(m, i, j, k2))

  func set_of_map(m: Map[Int, E], i: Int, j: Int) returns (res: Set[E])
  {
    {| k: E :: i <= inverse(m, i, j, k) < j |}
  }

  lemma injective_split()
    ensures forall m: Map[Int, E], i: Int, j: Int, l: Int :: {injective(m, i, l), injective(m, i, j)} 
      i <= j <= l && injective(m, i, l) ==> injective(m, i, j)
    ensures forall m: Map[Int, E], i: Int, j: Int, l: Int :: {injective(m, i, l), injective(m, j, l)} 
      i <= j <= l && injective(m, i, l) ==> injective(m, j, l)
  {}

  lemma set_of_map_split(m: Map[Int, E], i: Int, j: Int, l: Int)
    requires i <= j <= l && injective(m, i, l)
    ensures set_of_map(m, i, l) == set_of_map(m, i, j) ++ set_of_map(m, j, l)
  { 
  }

  func map_shift(m: Map[Int, E], src: Int, dst: Int, len: Int)
    returns (res: Map[Int, E])
  {
    {| i: Int :: i < dst || dst + len <= i ? m[i] : m[src + (i - dst)] |}
  }

  func map_copy(m1: Map[Int, E], m2: Map[Int, E], src: Int, dst: Int, len: Int)
    returns (res: Map[Int, E])
  {
    {| i: Int :: dst <= i < dst + len ? m2[src + (i - dst)] : m1[i] |}
  }

  lemma set_of_map_equal(m1: Map[Int, E], m2: Map[Int, E], i1: Int, i2: Int, len: Int)
    requires forall j: Int :: {m1[j]} i1 <= j < i1 + len ==> m1[j] == m2[j + (i2 - i1)]
    requires injective(m1, i1, i1 + len) && injective(m2, i2, i2 + len)
    ensures set_of_map(m1, i1, i1 + len) == set_of_map(m2, i2, i2 + len)
  {
    assert forall x: E ::  x in set_of_map(m2, i2, i2 + len) ==> x in set_of_map(m1, i1, i1 + len) with {
      if (x in set_of_map(m2, i2, i2 + len)) {
        assert m1[inverse(m2, i2, i2 + len, x) - i2 + i1] == m2[inverse(m2, i2, i2 + len, x)];
      }
    }
  }
  
  lemma frame_set_of_map(m: Map[Int, E], i: Int, j: Int)
    requires i <= j
    requires injective(m, i, j)
    ensures forall i1: Int, k: E :: {set_of_map(m[i1 := k], i, j)} 
      i1 < i || j <= i1 ==> set_of_map(m, i, j) == set_of_map(m[i1 := k], i, j)
  { 
   
  }

  // Shift a[src..src+len] to a[dst..dst+len]
  proc arr_shift(a: T, src: Int, dst: Int, len: Int, implicit ghost amap: Map[Int, E])
    requires arr(a, amap)
    requires 0 <= src <= src + len <= length(a) && 0 <= dst <= dst + len <= length(a)
    ensures arr(a, map_shift(amap, src, dst, len))
  {
    if (src < dst) {
      var i: Int := len - 1;
      
      while (i >= 0) 
        invariant arr(a, map_shift(amap, src + i + 1, dst + i + 1, len - i - 1))
        invariant src < dst
        invariant 0 <= src <= src + len <= length(a)
        invariant 0 <= dst <= dst + len <= length(a)
        invariant -1 <= i < len
      {
        unfold arr(a, map_shift(amap, src + i + 1, dst + i + 1, len - i - 1));
        var tmp: E := loc(a, src + i).value;
        loc(a, dst + i).value := tmp;
        ghost var m : Map[Int, E] := map_shift(amap, src + i, dst + i, len - i);
        assert m == map_shift(amap, src + i + 1, dst + i + 1, len - i - 1)[dst + i := tmp];
        fold arr(a, m);
        i := i - 1;
      }
    } else if (src > dst) {
      var i: Int := 0;
      while (i < len)
        invariant arr(a, map_shift(amap, src, dst, i))
        invariant src > dst
        invariant 0 <= src <= src + len <= length(a)
        invariant 0 <= dst <= dst + len <= length(a)
        invariant 0 <= i <= len 
      {
        unfold arr(a, map_shift(amap, src, dst, i));
        var tmp: E := loc(a, src + i).value;
        loc(a, dst + i).value := tmp;
        ghost var m : Map[Int, E] := map_shift(amap, src, dst, i + 1);
        assert m == map_shift(amap, src, dst, i)[dst + i := tmp];
        fold arr(a, m);
        i := i + 1;
      }
    }
  }

  // Copy a[src..src+len] to b[dst..dst+len]
  proc arr_copy(a: T, b: T, src: Int, dst: Int, len: Int, implicit ghost amap: Map[Int, E], implicit ghost bmap: Map[Int, E] )
    requires arr(a, amap) && arr(b, bmap)
    requires 0 <= src <= src + len <= length(a)
    requires 0 <= dst <= dst + len <= length(b)
    ensures arr(a, amap) && arr(b, map_copy(bmap, amap, src, dst, len))
  {
    var i: Int := 0;
  
    while (i < len)
      invariant arr(a, amap) && arr(b, map_copy(bmap, amap, src, dst, i))
      invariant 0 <= i <= len
      invariant 0 <= src <= src + len <= length(a)
      invariant 0 <= dst <= dst + len <= length(b)
    {
      unfold arr(a, amap);
      var tmp: E := loc(a, src + i).value;
      fold arr(a, amap);
      unfold arr(b, map_copy(bmap, amap, src, dst, i));
      
      
      loc(b, dst + i).value := tmp;
      ghost var m: Map[Int, E] := map_copy(bmap, amap, src, dst, i + 1);
      assert m == map_copy(bmap, amap, src, dst, i)[dst + i := tmp];
      fold arr(b, m);
      i := i + 1;
    }
  }

}

interface OrderedArray[E: Library.OrderedType] : Array {
  import E.lt

  func sorted_map_seg(m: Map[Int, E], i: Int, j: Int) returns (res: Bool) {
    forall i1: Int, i2: Int :: {m[i1], m[i2]} i <= i1 && i1 < i2 && i2 < j ==> lt(m[i1], m[i2])
  }

  pred sorted_array_with_content(a: T, len: Int; m: Map[Int, E]) {
    0 <= len <= length(a) && arr(a, m) && sorted_map_seg(m, 0, len)
  }

  auto lemma sorted_injective()
    ensures forall m: Map[Int, E], i: Int, j: Int :: {sorted_map_seg(m, i, j)}
       sorted_map_seg(m, i, j) ==> injective(m, i, j)
  { }

  func map_find(m: Map[Int, E], i: Int, j: Int, k: E) returns (idx: Int)
  {
    i < j && lt(m[i], k) ? map_find(m, i + 1, j, k) : i  
  }

  lemma map_find_spec(m: Map[Int, E], i: Int, j: Int, k: E)
    ensures i <= j && sorted_map_seg(m, i, j) ==>
        i <= map_find(m, i, j, k) && map_find(m, i, j, k) <= j &&
        (m[map_find(m, i, j, k)] == k || map_find(m, i, j, k) == j || lt(k, m[map_find(m, i, j, k)])) &&
        (i < map_find(m, i, j, k) ==> lt(m[map_find(m, i, j, k) - 1], k))
  {
    if (i < j && sorted_map_seg(m, i, j)) {
      map_find_spec(m, i+1, j, k);
    }
  }

  auto lemma map_find_spec_auto()
    ensures forall m: Map[Int, E], i: Int, j: Int, k: E :: i <= j && sorted_map_seg(m, i, j) ==>
        i <= map_find(m, i, j, k) && map_find(m, i, j, k) <= j &&
        (m[map_find(m, i, j, k)] == k || map_find(m, i, j, k) == j || lt(k, m[map_find(m, i, j, k)])) &&
        (i < map_find(m, i, j, k) ==> lt(m[map_find(m, i, j, k) - 1], k))
  {
    assert forall m: Map[Int, E], i: Int, j: Int, k: E :: i <= j && sorted_map_seg(m, i, j) ==>
        i <= map_find(m, i, j, k) && map_find(m, i, j, k) <= j &&
        (m[map_find(m, i, j, k)] == k || map_find(m, i, j, k) == j || lt(k, m[map_find(m, i, j, k)])) &&
        (i < map_find(m, i, j, k) ==> lt(m[map_find(m, i, j, k) - 1], k)) with {
      map_find_spec(m, i, j, k);
    }
  }

  auto lemma map_find_content_set()
    ensures forall m: Map[Int, E], i: Int, j: Int, k: E :: {sorted_map_seg(m, i, j), map_find(m, i, j, k)}
      i <= j && sorted_map_seg(m, i, j) ==> 
        k !in set_of_map(m, i, map_find(m, i, j, k)) &&
        k !in set_of_map(m, map_find(m, i, j, k) + 1, j)
  { }

  lemma map_insert_content_set(m: Map[Int, E], m1: Map[Int, E], idx: Int, k: E, len: Int, new_len: Int)
    requires sorted_map_seg(m, 0, len)
    requires idx == map_find(m, 0, len, k)
    requires 0 <= idx <= len
    requires k in set_of_map(m, 0, len) ==> new_len == len && m1 == m
    requires k !in set_of_map(m, 0, len) ==> new_len == len + 1 && m1 == map_shift(m, idx, idx + 1, len - idx)[idx := k]
    ensures set_of_map(m1, 0, new_len) == set_of_map(m, 0, len) ++ {| k |}
  {
    if (m[idx] == k && idx < len) {
      return;
    }
    var ms := map_shift(m, idx, idx + 1, len - idx);

    // prove set_of_map(m, 0, len) == set_of_map(ms, 0, idx) ++ set_of_map(ms, idx + 1, len + 1);
    set_of_map_split(m, 0, idx, len);
    set_of_map_equal(m, ms, 0, 0, idx);
    set_of_map_equal(m, ms, idx, idx + 1, len - idx);
    assert set_of_map(m, 0, len) == set_of_map(ms, 0, idx) ++ set_of_map(ms, idx + 1, len + 1);
    // prove set_of_map(m1, 0, new_len) == set_of_map(ms, 0, idx) ++ {|k|} ++ set_of_map(ms, idx + 1, len + 1)
    inverse_update();
    frame_set_of_map(ms, 0, idx);
    frame_set_of_map(ms, idx + 1, len + 1); 
    set_of_map_split(m1, 0, idx, len + 1);
    assert set_of_map(m1, 0, new_len) == set_of_map(ms, 0, idx) ++ {|k|} ++ set_of_map(ms, idx + 1, len + 1);
  }

  lemma map_delete_content_set(m: Map[Int, E], len: Int, idx: Int, k: E)
    requires sorted_map_seg(m, 0, len)
    requires idx == map_find(m, 0, len, k)
    requires 0 <= idx <= len
    ensures set_of_map((k in set_of_map(m, 0, len) ? map_shift(m, idx + 1, idx, len - (idx + 1)) : m), 0, 
                       (k in set_of_map(m, 0, len) ? len - 1 : len)) == set_of_map(m, 0, len) -- {|k|}
  {   
    if (idx == len || m[idx] != k) {
      return;
    }
    val m1: Map[Int, E] := map_shift(m, idx + 1, idx, len - (idx + 1));
    // prove: set_of_map(m, 0, len) -- {k} == set_of_map(m1, 0, idx - 1) ++ set_of_map(m1, idx - 1, len - 1)
    set_of_map_equal(m, m1, 0, 0, idx);
    set_of_map_equal(m, m1, idx + 1, idx, len - (idx + 1));
    set_of_map_split(m1, 0, idx, len - 1);
  }

  // Find key `k` in sorted array segment `a[0..len]` using binary search
  proc arr_find(a: T, len: Int, k: E, implicit ghost m: Map[Int, E])
    returns (found: Bool, idx: Int)
    requires sorted_array_with_content(a, len, m)
    requires 0 <= len <= length(a)
    ensures sorted_array_with_content(a, len, m)
    // what we actually care about
    ensures idx == map_find(m, 0, len, k)
    ensures found == (k in set_of_map(m, 0, len))
  {
    var lo := 0;
    var hi := len;
    
    while (hi != lo)
      invariant sorted_array_with_content(a, len, m)
      // what we actually care about
      invariant 0 <= lo <= hi <= len <= length(a)
      invariant hi == len || m[lo] == k || lt(k, m[hi])
      invariant 0 < lo ==> lt(m[lo - 1], k)
      invariant hi < len - 1 ==> lt(k, m[hi + 1])
    {
      unfold sorted_array_with_content(a, len, m);
      unfold arr(a, m);
      var mid := (hi + lo) / 2;
      var amid: E := loc(a, mid).value;
      var cmp: Int := E.compare(k, amid);
      if (cmp < 0) {
        hi := mid;      // look in first half
      } else if (cmp > 0) {
        lo := mid + 1;    // look in second half
      } else {
        // found it
        hi := mid;
        lo := mid;
      }
      fold arr(a, m);
      fold sorted_array_with_content(a, len, m);
    }
    
    idx := lo;
    
    if (idx == len) {
      found := false;
    } else {
      unfold sorted_array_with_content(a, len, m);
      unfold arr(a, m);
      var alo: E := loc(a, lo).value;
      found := !lt(k, alo);
      fold arr(a, m);
      fold sorted_array_with_content(a, len, m);
    }

    unfold sorted_array_with_content(a, len, m);
    fold sorted_array_with_content(a, len, m);
  }

  // Given a sorted array segment `a[0..len]`,
  // insert `k` into `a[0..len+1]` while preserving sortedness.
  // If `k` is already contained in `a[0..len]`, then do not modify `a`.
  proc arr_insert(a: T, k: E, len: Int, implicit ghost m: Map[Int, E])
    returns (idx: Int, new_len: Int, implicit ghost m1: Map[Int, E])
    requires sorted_array_with_content(a, len, m)
    requires 0 <= len < length(a)
    ensures sorted_array_with_content(a, new_len, m1)
    ensures idx == map_find(m, 0, len, k)
    ensures k in set_of_map(m, 0, len) ==> new_len == len && m1 == m
    ensures k !in set_of_map(m, 0, len) ==> new_len == len + 1 && m1 == map_shift(m, idx, idx + 1, len - idx)[idx := k]
  {
    // find position for insertion
    var i: Int;
    var found: Bool;
    found, i := arr_find(a, len, k, m);

    unfold sorted_array_with_content(a, len, m);
    fold sorted_array_with_content(a, len, m);
    
    // k already in C?
    if (found) return i, len, m;
    
    unfold sorted_array_with_content(a, len, m);
    arr_shift(a, i, i + 1, len - i, m);

    unfold arr(a, map_shift(m, i, i + 1, len - i));
    loc(a, i).value := k;
    m1 := map_shift(m, i, i + 1, len - i)[i := k];
    fold arr(a, m1);
    fold sorted_array_with_content(a, len + 1, m1);

    return i, len + 1, m1;
  }

  // Given a sorted array segment `a[0..len]`,
  // delete `k` from the segment while preserving sortedness.
  // If `k` is already contained in `a[0..len]`, then do not modify `a`.
  proc arr_delete(a: T, k: E, len: Int, implicit ghost m: Map[Int, E])
    returns (new_len: Int, idx: Int, implicit ghost m1: Map[Int, E])
    requires 0 <= len <= length(a)
    requires sorted_array_with_content(a, len, m)
    ensures sorted_array_with_content(a, new_len, m1)
    ensures idx == map_find(m, 0, len, k)
    ensures k !in set_of_map(m, 0, len) ==> new_len == len && m1 == m
    ensures k in set_of_map(m, 0, len) ==> new_len == len - 1 && m1 == map_shift(m, idx + 1, idx, len - (idx + 1))
  {
    // find position for insertion
    var found: Bool;
    found, idx := arr_find(a, len, k, m);

    unfold sorted_array_with_content(a, len, m);
    fold sorted_array_with_content(a, len, m);
    
    // k !in C?
    if (!found) {
      return len, idx, m;
    }
    
    // shift array entries a[i+1..len] by 1 entry to the left 
    unfold sorted_array_with_content(a, len, m);
    arr_shift(a, idx + 1, idx, len - (idx + 1), m);
    m1 := map_shift(m, idx + 1, idx, len - (idx + 1));
    fold sorted_array_with_content(a, len - 1, m1);
    return len - 1, idx, m1;
  }

}