module Lock {
  rep type t = struct {
    var bit: Bool
  }

  pred lockR(l: t, b: Bool) {
    own(l.bit, b)
  }

  var l = true

  proc create()
    returns (l: t)
    ensures lockR(l, false)
  {
    l := new t(bit(false));
    val x = true;
    val y = false;

    if (x == true) {
      var y = true;
    }


  }

  /* How to prove following spec? Lob induction? */ 
  
  proc acquire(l: t, implicit ghost b: Bool)
    atomic requires lockR(l, b)
    atomic ensures lockR(l, true)
  {
    val res = true;

    if (l.bit) {
        res := false;
     }
    
    else {
        res := true;
    }
    
    /*
    {!
      if (res) commit(phi);
      else abort(phi);
    !} */

    /* Have to formalize the ghost code language. */

    if (!res) acquire(l);
  }

  proc release(l: Lock)
    atomic requires lockR(l, true)
    atomic ensures lockR(l, false)
  {
    l.bit := false;

    /* Presumably the atomic open etc can be automatically inferred for such a simple case? */
  }

  module Trial {
    var l = Lock.l
  }
}


